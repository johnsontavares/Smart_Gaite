{"ast":null,"code":"import { Connection } from \"./Connection\";\nimport { ConnectionNotFoundError } from \"../error/ConnectionNotFoundError\";\nimport { AlreadyHasActiveConnectionError } from \"../error/AlreadyHasActiveConnectionError\";\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n */\n\nvar ConnectionManager =\n/** @class */\nfunction () {\n  function ConnectionManager() {\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * List of connections registered in this connection manager.\n     */\n    this.connections = [];\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Checks if connection with the given name exist in the manager.\n   */\n\n\n  ConnectionManager.prototype.has = function (name) {\n    return !!this.connections.find(function (connection) {\n      return connection.name === name;\n    });\n  };\n  /**\n   * Gets registered connection with the given name.\n   * If connection name is not given then it will get a default connection.\n   * Throws error if connection with the given name was not found.\n   */\n\n\n  ConnectionManager.prototype.get = function (name) {\n    if (name === void 0) {\n      name = \"default\";\n    }\n\n    var connection = this.connections.find(function (connection) {\n      return connection.name === name;\n    });\n    if (!connection) throw new ConnectionNotFoundError(name);\n    return connection;\n  };\n  /**\n   * Creates a new connection based on the given connection options and registers it in the manager.\n   * Connection won't be established, you'll need to manually call connect method to establish connection.\n   */\n\n\n  ConnectionManager.prototype.create = function (options) {\n    // check if such connection is already registered\n    var existConnection = this.connections.find(function (connection) {\n      return connection.name === (options.name || \"default\");\n    });\n\n    if (existConnection) {\n      // if connection is registered and its not closed then throw an error\n      if (existConnection.isConnected) throw new AlreadyHasActiveConnectionError(options.name || \"default\"); // if its registered but closed then simply remove it from the manager\n\n      this.connections.splice(this.connections.indexOf(existConnection), 1);\n    } // create a new connection\n\n\n    var connection = new Connection(options);\n    this.connections.push(connection);\n    return connection;\n  };\n\n  return ConnectionManager;\n}();\n\nexport { ConnectionManager };","map":{"version":3,"sources":["../browser/src/connection/ConnectionManager.ts"],"names":[],"mappings":"AAAA,SAAQ,UAAR,QAAyB,cAAzB;AACA,SAAQ,uBAAR,QAAsC,kCAAtC;AAEA,SAAQ,+BAAR,QAA8C,0CAA9C;AAEA;;;AAGG;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA;AAEI;AACA;AACA;;AAEA;;AAEG;AACa,SAAA,WAAA,GAA4B,EAA5B;AAkDnB,GA3DD,CAWI;AACA;AACA;;AAEA;;AAEG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,IAAJ,EAAgB;AACZ,WAAO,CAAC,CAAC,KAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAA,UAAA,EAAU;AAAI,aAAA,UAAU,CAAC,IAAX,KAAA,IAAA;AAAwB,KAA5D,CAAT;AACH,GAFD;AAIA;;;;AAIG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,IAAJ,EAA4B;AAAxB,QAAA,IAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,IAAA,GAAA,SAAA;AAAwB;;AACxB,QAAM,UAAU,GAAG,KAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAA,UAAA,EAAU;AAAI,aAAA,UAAU,CAAC,IAAX,KAAA,IAAA;AAAwB,KAA5D,CAAnB;AACA,QAAI,CAAC,UAAL,EACI,MAAM,IAAI,uBAAJ,CAA4B,IAA5B,CAAN;AAEJ,WAAO,UAAP;AACH,GAND;AAQA;;;AAGG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,OAAP,EAAiC;AAE7B;AACA,QAAM,eAAe,GAAG,KAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAA,UAAA,EAAU;AAAI,aAAA,UAAU,CAAC,IAAX,MAAqB,OAAO,CAAC,IAAR,IAArB,SAAA,CAAA;AAA+C,KAAnF,CAAxB;;AACA,QAAI,eAAJ,EAAqB;AAEjB;AACA,UAAI,eAAe,CAAC,WAApB,EACI,MAAM,IAAI,+BAAJ,CAAoC,OAAO,CAAC,IAAR,IAAgB,SAApD,CAAN,CAJa,CAMjB;;AACA,WAAK,WAAL,CAAiB,MAAjB,CAAwB,KAAK,WAAL,CAAiB,OAAjB,CAAyB,eAAzB,CAAxB,EAAmE,CAAnE;AACH,KAZ4B,CAc7B;;;AACA,QAAM,UAAU,GAAG,IAAI,UAAJ,CAAe,OAAf,CAAnB;AACA,SAAK,WAAL,CAAiB,IAAjB,CAAsB,UAAtB;AACA,WAAO,UAAP;AACH,GAlBD;;AAoBJ,SAAA,iBAAA;AAAC,CA3DD,EAAA","sourcesContent":["import {Connection} from \"./Connection\";\nimport {ConnectionNotFoundError} from \"../error/ConnectionNotFoundError\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {AlreadyHasActiveConnectionError} from \"../error/AlreadyHasActiveConnectionError\";\n\n/**\n * ConnectionManager is used to store and manage multiple orm connections.\n * It also provides useful factory methods to simplify connection creation.\n */\nexport class ConnectionManager {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * List of connections registered in this connection manager.\n     */\n    public readonly connections: Connection[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Checks if connection with the given name exist in the manager.\n     */\n    has(name: string): boolean {\n        return !!this.connections.find(connection => connection.name === name);\n    }\n\n    /**\n     * Gets registered connection with the given name.\n     * If connection name is not given then it will get a default connection.\n     * Throws error if connection with the given name was not found.\n     */\n    get(name: string = \"default\"): Connection {\n        const connection = this.connections.find(connection => connection.name === name);\n        if (!connection)\n            throw new ConnectionNotFoundError(name);\n\n        return connection;\n    }\n\n    /**\n     * Creates a new connection based on the given connection options and registers it in the manager.\n     * Connection won't be established, you'll need to manually call connect method to establish connection.\n     */\n    create(options: ConnectionOptions): Connection {\n\n        // check if such connection is already registered\n        const existConnection = this.connections.find(connection => connection.name === (options.name || \"default\"));\n        if (existConnection) {\n\n            // if connection is registered and its not closed then throw an error\n            if (existConnection.isConnected)\n                throw new AlreadyHasActiveConnectionError(options.name || \"default\");\n\n            // if its registered but closed then simply remove it from the manager\n            this.connections.splice(this.connections.indexOf(existConnection), 1);\n        }\n\n        // create a new connection\n        const connection = new Connection(options);\n        this.connections.push(connection);\n        return connection;\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}