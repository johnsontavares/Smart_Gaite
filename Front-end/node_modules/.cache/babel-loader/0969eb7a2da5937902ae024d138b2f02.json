{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\n/**\n * Runs queries on a single sqlite database connection.\n */\n\nvar SqljsQueryRunner =\n/** @class */\nfunction (_super) {\n  __extends(SqljsQueryRunner, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function SqljsQueryRunner(driver) {\n    var _this = _super.call(this) || this;\n\n    _this.driver = driver;\n    _this.connection = driver.connection;\n    _this.broadcaster = new Broadcaster(_this);\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  SqljsQueryRunner.prototype.commitTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , _super.prototype.commitTransaction.call(this)];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.driver.autoSave()];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Executes a given SQL query.\n   */\n\n\n  SqljsQueryRunner.prototype.query = function (query, parameters) {\n    var _this = this;\n\n    if (parameters === void 0) {\n      parameters = [];\n    }\n\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    return new Promise(function (ok, fail) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var databaseConnection, queryStartTime, statement, maxQueryExecutionTime, queryEndTime, queryExecutionTime, result;\n        return __generator(this, function (_a) {\n          databaseConnection = this.driver.databaseConnection;\n          this.driver.connection.logger.logQuery(query, parameters, this);\n          queryStartTime = +new Date();\n\n          try {\n            statement = databaseConnection.prepare(query);\n\n            if (parameters) {\n              parameters = parameters.map(function (p) {\n                return typeof p !== 'undefined' ? p : null;\n              });\n              statement.bind(parameters);\n            }\n\n            maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n            queryEndTime = +new Date();\n            queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n            result = [];\n\n            while (statement.step()) {\n              result.push(statement.getAsObject());\n            }\n\n            statement.free();\n            ok(result);\n          } catch (e) {\n            if (statement) {\n              statement.free();\n            }\n\n            this.driver.connection.logger.logQueryError(e, query, parameters, this);\n            fail(new QueryFailedError(query, parameters, e));\n          }\n\n          return [2\n          /*return*/\n          ];\n        });\n      });\n    });\n  };\n\n  return SqljsQueryRunner;\n}(AbstractSqliteQueryRunner);\n\nexport { SqljsQueryRunner };","map":{"version":3,"sources":["../browser/src/driver/sqljs/SqljsQueryRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {SqljsDriver} from \"./SqljsDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class SqljsQueryRunner extends AbstractSqliteQueryRunner {\n    \n    /**\n     * Database driver used by connection.\n     */\n    driver: SqljsDriver;\n    \n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqljsDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public methods\n    // -------------------------------------------------------------------------\n    \n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        await super.commitTransaction();\n        await this.driver.autoSave();\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters: any[] = []): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise<any[]>(async (ok, fail) => {\n            const databaseConnection = this.driver.databaseConnection;\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            let statement: any;\n            try {\n                statement = databaseConnection.prepare(query);\n                if (parameters) {\n                    parameters = parameters.map(p => typeof p !== 'undefined' ? p : null);\n\n                    statement.bind(parameters);\n                }\n                \n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                const result: any[] = [];\n\n                while (statement.step()) {\n                    result.push(statement.getAsObject());\n                }\n                \n                statement.free();\n                ok(result);\n            }\n            catch (e) {\n                if (statement) {\n                    statement.free();\n                }\n\n                this.driver.connection.logger.logQueryError(e, query, parameters, this);\n                fail(new QueryFailedError(query, parameters, e));\n            }\n        });\n    }\n}"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}