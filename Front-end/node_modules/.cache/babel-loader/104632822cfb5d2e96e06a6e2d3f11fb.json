{"ast":null,"code":"import { MissingDriverError } from \"../error/MissingDriverError\";\nimport { CockroachDriver } from \"./cockroachdb/CockroachDriver\";\nimport { MongoDriver } from \"./mongodb/MongoDriver\";\nimport { SqlServerDriver } from \"./sqlserver/SqlServerDriver\";\nimport { OracleDriver } from \"./oracle/OracleDriver\";\nimport { SqliteDriver } from \"./sqlite/SqliteDriver\";\nimport { CordovaDriver } from \"./cordova/CordovaDriver\";\nimport { ReactNativeDriver } from \"./react-native/ReactNativeDriver\";\nimport { NativescriptDriver } from \"./nativescript/NativescriptDriver\";\nimport { SqljsDriver } from \"./sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"./mysql/MysqlDriver\";\nimport { PostgresDriver } from \"./postgres/PostgresDriver\";\nimport { ExpoDriver } from \"./expo/ExpoDriver\";\nimport { AuroraDataApiDriver } from \"./aurora-data-api/AuroraDataApiDriver\";\nimport { AuroraDataApiPostgresDriver } from \"./aurora-data-api-pg/AuroraDataApiPostgresDriver\";\nimport { SapDriver } from \"./sap/SapDriver\";\nimport { BetterSqlite3Driver } from \"./better-sqlite3/BetterSqlite3Driver\";\nimport { CapacitorDriver } from \"./capacitor/CapacitorDriver\";\n/**\n * Helps to create drivers.\n */\n\nvar DriverFactory =\n/** @class */\nfunction () {\n  function DriverFactory() {}\n  /**\n   * Creates a new driver depend on a given connection's driver type.\n   */\n\n\n  DriverFactory.prototype.create = function (connection) {\n    var type = connection.options.type;\n\n    switch (type) {\n      case \"mysql\":\n        return new MysqlDriver(connection);\n\n      case \"postgres\":\n        return new PostgresDriver(connection);\n\n      case \"cockroachdb\":\n        return new CockroachDriver(connection);\n\n      case \"sap\":\n        return new SapDriver(connection);\n\n      case \"mariadb\":\n        return new MysqlDriver(connection);\n\n      case \"sqlite\":\n        return new SqliteDriver(connection);\n\n      case \"better-sqlite3\":\n        return new BetterSqlite3Driver(connection);\n\n      case \"cordova\":\n        return new CordovaDriver(connection);\n\n      case \"nativescript\":\n        return new NativescriptDriver(connection);\n\n      case \"react-native\":\n        return new ReactNativeDriver(connection);\n\n      case \"sqljs\":\n        return new SqljsDriver(connection);\n\n      case \"oracle\":\n        return new OracleDriver(connection);\n\n      case \"mssql\":\n        return new SqlServerDriver(connection);\n\n      case \"mongodb\":\n        return new MongoDriver(connection);\n\n      case \"expo\":\n        return new ExpoDriver(connection);\n\n      case \"aurora-data-api\":\n        return new AuroraDataApiDriver(connection);\n\n      case \"aurora-data-api-pg\":\n        return new AuroraDataApiPostgresDriver(connection);\n\n      case \"capacitor\":\n        return new CapacitorDriver(connection);\n\n      default:\n        throw new MissingDriverError(type);\n    }\n  };\n\n  return DriverFactory;\n}();\n\nexport { DriverFactory };","map":{"version":3,"sources":["../browser/src/driver/DriverFactory.ts"],"names":[],"mappings":"AAAA,SAAQ,kBAAR,QAAiC,6BAAjC;AACA,SAAQ,eAAR,QAA8B,+BAA9B;AACA,SAAQ,WAAR,QAA0B,uBAA1B;AACA,SAAQ,eAAR,QAA8B,6BAA9B;AACA,SAAQ,YAAR,QAA2B,uBAA3B;AACA,SAAQ,YAAR,QAA2B,uBAA3B;AACA,SAAQ,aAAR,QAA4B,yBAA5B;AACA,SAAQ,iBAAR,QAAgC,kCAAhC;AACA,SAAQ,kBAAR,QAAiC,mCAAjC;AACA,SAAQ,WAAR,QAA0B,qBAA1B;AACA,SAAQ,WAAR,QAA0B,qBAA1B;AACA,SAAQ,cAAR,QAA6B,2BAA7B;AACA,SAAQ,UAAR,QAAyB,mBAAzB;AACA,SAAQ,mBAAR,QAAkC,uCAAlC;AACA,SAAQ,2BAAR,QAA0C,kDAA1C;AAGA,SAAQ,SAAR,QAAwB,iBAAxB;AACA,SAAQ,mBAAR,QAAkC,sCAAlC;AACA,SAAQ,eAAR,QAA8B,6BAA9B;AAEA;;AAEG;;AACH,IAAA,aAAA;AAAA;AAAA,YAAA;AAAA,WAAA,aAAA,GAAA,CAiDC;AA/CG;;AAEG;;;AACH,EAAA,aAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,UAAP,EAA6B;AAClB,QAAA,IAAI,GAAI,UAAU,CAAC,OAAX,CAAJ,IAAJ;;AACP,YAAQ,IAAR;AACI,WAAK,OAAL;AACI,eAAO,IAAI,WAAJ,CAAgB,UAAhB,CAAP;;AACJ,WAAK,UAAL;AACI,eAAO,IAAI,cAAJ,CAAmB,UAAnB,CAAP;;AACJ,WAAK,aAAL;AACI,eAAO,IAAI,eAAJ,CAAoB,UAApB,CAAP;;AACJ,WAAK,KAAL;AACI,eAAO,IAAI,SAAJ,CAAc,UAAd,CAAP;;AACJ,WAAK,SAAL;AACI,eAAO,IAAI,WAAJ,CAAgB,UAAhB,CAAP;;AACJ,WAAK,QAAL;AACI,eAAO,IAAI,YAAJ,CAAiB,UAAjB,CAAP;;AACJ,WAAK,gBAAL;AACI,eAAO,IAAI,mBAAJ,CAAwB,UAAxB,CAAP;;AACJ,WAAK,SAAL;AACI,eAAO,IAAI,aAAJ,CAAkB,UAAlB,CAAP;;AACJ,WAAK,cAAL;AACI,eAAO,IAAI,kBAAJ,CAAuB,UAAvB,CAAP;;AACJ,WAAK,cAAL;AACI,eAAO,IAAI,iBAAJ,CAAsB,UAAtB,CAAP;;AACJ,WAAK,OAAL;AACI,eAAO,IAAI,WAAJ,CAAgB,UAAhB,CAAP;;AACJ,WAAK,QAAL;AACI,eAAO,IAAI,YAAJ,CAAiB,UAAjB,CAAP;;AACJ,WAAK,OAAL;AACI,eAAO,IAAI,eAAJ,CAAoB,UAApB,CAAP;;AACJ,WAAK,SAAL;AACI,eAAO,IAAI,WAAJ,CAAgB,UAAhB,CAAP;;AACJ,WAAK,MAAL;AACI,eAAO,IAAI,UAAJ,CAAe,UAAf,CAAP;;AACJ,WAAK,iBAAL;AACI,eAAO,IAAI,mBAAJ,CAAwB,UAAxB,CAAP;;AACJ,WAAK,oBAAL;AACI,eAAO,IAAI,2BAAJ,CAAgC,UAAhC,CAAP;;AACJ,WAAK,WAAL;AACI,eAAO,IAAI,eAAJ,CAAoB,UAApB,CAAP;;AACJ;AACI,cAAM,IAAI,kBAAJ,CAAuB,IAAvB,CAAN;AAtCR;AAwCH,GA1CD;;AA4CJ,SAAA,aAAA;AAAC,CAjDD,EAAA","sourcesContent":["import {MissingDriverError} from \"../error/MissingDriverError\";\nimport {CockroachDriver} from \"./cockroachdb/CockroachDriver\";\nimport {MongoDriver} from \"./mongodb/MongoDriver\";\nimport {SqlServerDriver} from \"./sqlserver/SqlServerDriver\";\nimport {OracleDriver} from \"./oracle/OracleDriver\";\nimport {SqliteDriver} from \"./sqlite/SqliteDriver\";\nimport {CordovaDriver} from \"./cordova/CordovaDriver\";\nimport {ReactNativeDriver} from \"./react-native/ReactNativeDriver\";\nimport {NativescriptDriver} from \"./nativescript/NativescriptDriver\";\nimport {SqljsDriver} from \"./sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"./mysql/MysqlDriver\";\nimport {PostgresDriver} from \"./postgres/PostgresDriver\";\nimport {ExpoDriver} from \"./expo/ExpoDriver\";\nimport {AuroraDataApiDriver} from \"./aurora-data-api/AuroraDataApiDriver\";\nimport {AuroraDataApiPostgresDriver} from \"./aurora-data-api-pg/AuroraDataApiPostgresDriver\";\nimport {Driver} from \"./Driver\";\nimport {Connection} from \"../connection/Connection\";\nimport {SapDriver} from \"./sap/SapDriver\";\nimport {BetterSqlite3Driver} from \"./better-sqlite3/BetterSqlite3Driver\";\nimport {CapacitorDriver} from \"./capacitor/CapacitorDriver\";\n\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    create(connection: Connection): Driver {\n        const {type} = connection.options;\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection);\n            case \"postgres\":\n                return new PostgresDriver(connection);\n            case \"cockroachdb\":\n                return new CockroachDriver(connection);\n            case \"sap\":\n                return new SapDriver(connection);\n            case \"mariadb\":\n                return new MysqlDriver(connection);\n            case \"sqlite\":\n                return new SqliteDriver(connection);\n            case \"better-sqlite3\":\n                return new BetterSqlite3Driver(connection);\n            case \"cordova\":\n                return new CordovaDriver(connection);\n            case \"nativescript\":\n                return new NativescriptDriver(connection);\n            case \"react-native\":\n                return new ReactNativeDriver(connection);\n            case \"sqljs\":\n                return new SqljsDriver(connection);\n            case \"oracle\":\n                return new OracleDriver(connection);\n            case \"mssql\":\n                return new SqlServerDriver(connection);\n            case \"mongodb\":\n                return new MongoDriver(connection);\n            case \"expo\":\n                return new ExpoDriver(connection);\n            case \"aurora-data-api\":\n                return new AuroraDataApiDriver(connection);\n            case \"aurora-data-api-pg\":\n                return new AuroraDataApiPostgresDriver(connection);\n            case \"capacitor\":\n                return new CapacitorDriver(connection);\n            default:\n                throw new MissingDriverError(type);\n        }\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}