{"ast":null,"code":"/**\n * Index metadata contains all information about table's index.\n */\nvar IndexMetadata =\n/** @class */\nfunction () {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  function IndexMetadata(options) {\n    /**\n     * Indicates if this index must be unique.\n     */\n    this.isUnique = false;\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n\n    this.isSpatial = false;\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n\n    this.isFulltext = false;\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n\n    this.synchronize = true;\n    /**\n     * Indexed columns.\n     */\n\n    this.columns = [];\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n\n    this.columnNamesWithOrderingMap = {};\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    if (options.columns) this.columns = options.columns;\n\n    if (options.args) {\n      this.target = options.args.target;\n      if (options.args.synchronize !== null && options.args.synchronize !== undefined) this.synchronize = options.args.synchronize;\n      this.isUnique = !!options.args.unique;\n      this.isSpatial = !!options.args.spatial;\n      this.isFulltext = !!options.args.fulltext;\n      this.parser = options.args.parser;\n      this.where = options.args.where;\n      this.isSparse = options.args.sparse;\n      this.isBackground = options.args.background;\n      this.expireAfterSeconds = options.args.expireAfterSeconds;\n      this.givenName = options.args.name;\n      this.givenColumnNames = options.args.columns;\n    }\n  } // ---------------------------------------------------------------------\n  // Public Build Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Builds some depend index properties.\n   * Must be called after all entity metadata's properties map, columns and relations are built.\n   */\n\n\n  IndexMetadata.prototype.build = function (namingStrategy) {\n    var _this = this;\n\n    if (this.synchronize === false) {\n      this.name = this.givenName;\n      return this;\n    }\n\n    var map = {}; // if columns already an array of string then simply return it\n\n    if (this.givenColumnNames) {\n      var columnPropertyPaths = [];\n\n      if (Array.isArray(this.givenColumnNames)) {\n        columnPropertyPaths = this.givenColumnNames.map(function (columnName) {\n          if (_this.embeddedMetadata) return _this.embeddedMetadata.propertyPath + \".\" + columnName;\n          return columnName.trim();\n        });\n        columnPropertyPaths.forEach(function (propertyPath) {\n          return map[propertyPath] = 1;\n        });\n      } else {\n        // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n        // if columns is a function that returns array of field names then execute it and get columns names from it\n        var columnsFnResult_1 = this.givenColumnNames(this.entityMetadata.propertiesMap);\n\n        if (Array.isArray(columnsFnResult_1)) {\n          columnPropertyPaths = columnsFnResult_1.map(function (i) {\n            return String(i);\n          });\n          columnPropertyPaths.forEach(function (name) {\n            return map[name] = 1;\n          });\n        } else {\n          columnPropertyPaths = Object.keys(columnsFnResult_1).map(function (i) {\n            return String(i);\n          });\n          Object.keys(columnsFnResult_1).forEach(function (columnName) {\n            return map[columnName] = columnsFnResult_1[columnName];\n          });\n        }\n      }\n\n      this.columns = columnPropertyPaths.map(function (propertyPath) {\n        var columnWithSameName = _this.entityMetadata.columns.find(function (column) {\n          return column.propertyPath === propertyPath;\n        });\n\n        if (columnWithSameName) {\n          return [columnWithSameName];\n        }\n\n        var relationWithSameName = _this.entityMetadata.relations.find(function (relation) {\n          return relation.isWithJoinColumn && relation.propertyName === propertyPath;\n        });\n\n        if (relationWithSameName) {\n          return relationWithSameName.joinColumns;\n        }\n\n        var indexName = _this.givenName ? \"\\\"\" + _this.givenName + \"\\\" \" : \"\";\n        var entityName = _this.entityMetadata.targetName;\n        throw new Error(\"Index \" + indexName + \"contains column that is missing in the entity (\" + entityName + \"): \" + propertyPath);\n      }).reduce(function (a, b) {\n        return a.concat(b);\n      });\n    }\n\n    this.columnNamesWithOrderingMap = Object.keys(map).reduce(function (updatedMap, key) {\n      var column = _this.entityMetadata.columns.find(function (column) {\n        return column.propertyPath === key;\n      });\n\n      if (column) updatedMap[column.databasePath] = map[key];\n      return updatedMap;\n    }, {});\n    this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tablePath, this.columns.map(function (column) {\n      return column.databaseName;\n    }), this.where);\n    return this;\n  };\n\n  return IndexMetadata;\n}();\n\nexport { IndexMetadata };","map":{"version":3,"sources":["../browser/src/metadata/IndexMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import {EntityMetadata} from \"./EntityMetadata\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\n\n/**\n * Index metadata contains all information about table's index.\n */\nexport class IndexMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this index is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata if this index was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Indicates if this index must be unique.\n     */\n    isUnique: boolean = false;\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean = false;\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean = false;\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string;\n\n    /**\n     * Indicates if this index must synchronize with database index.\n     */\n    synchronize: boolean = true;\n\n    /**\n     * If true, the index only references documents with the specified field.\n     * These indexes use less space but behave differently in some situations (particularly sorts).\n     * This option is only supported for mongodb database.\n     */\n    isSparse?: boolean;\n\n    /**\n     * Builds the index in the background so that building an index an does not block other database activities.\n     * This option is only supported for mongodb database.\n     */\n    isBackground?: boolean;\n\n    /**\n     * Specifies a time to live, in seconds.\n     * This option is only supported for mongodb database.\n     */\n    expireAfterSeconds?: number;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Indexed columns.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * User specified index name.\n     */\n    givenName?: string;\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\n\n    /**\n     * Final index name.\n     * If index name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If index name was not given then its generated.\n     */\n    name: string;\n\n    /**\n     * Index filter condition.\n     */\n    where?: string;\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        columns?: ColumnMetadata[],\n        args?: IndexMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n\n        if (options.args) {\n            this.target = options.args.target;\n            if (options.args.synchronize !== null && options.args.synchronize !== undefined)\n                this.synchronize = options.args.synchronize;\n            this.isUnique = !!options.args.unique;\n            this.isSpatial = !!options.args.spatial;\n            this.isFulltext = !!options.args.fulltext;\n            this.parser = options.args.parser;\n            this.where = options.args.where;\n            this.isSparse = options.args.sparse;\n            this.isBackground = options.args.background;\n            this.expireAfterSeconds = options.args.expireAfterSeconds;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend index properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n        if (this.synchronize === false) {\n            this.name = this.givenName!;\n            return this;\n        }\n\n        const map: { [key: string]: number } = {};\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(columnName => {\n                    if (this.embeddedMetadata)\n                        return this.embeddedMetadata.propertyPath + \".\" + columnName;\n\n                    return columnName.trim();\n                });\n                columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n            } else { // todo: indices in embeds are not implemented in this syntax. deprecate this syntax?\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) => String(i));\n                    columnPropertyPaths.forEach(name => map[name] = 1);\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i: any) => String(i));\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n                }\n            }\n\n            this.columns = columnPropertyPaths.map(propertyPath => {\n                const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyPath);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyPath);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new Error(`Index ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyPath);\n            })\n            .reduce((a, b) => a.concat(b));\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n\n            return updatedMap;\n        }, {} as { [key: string]: number });\n\n        this.name = this.givenName ? this.givenName : namingStrategy.indexName(this.entityMetadata.tablePath, this.columns.map(column => column.databaseName), this.where);\n        return this;\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}