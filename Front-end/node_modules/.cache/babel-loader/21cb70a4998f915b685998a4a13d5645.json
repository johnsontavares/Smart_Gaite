{"ast":null,"code":"var ApplyValueTransformers =\n/** @class */\nfunction () {\n  function ApplyValueTransformers() {}\n\n  ApplyValueTransformers.transformFrom = function (transformer, databaseValue) {\n    if (Array.isArray(transformer)) {\n      var reverseTransformers = transformer.slice().reverse();\n      return reverseTransformers.reduce(function (transformedValue, _transformer) {\n        return _transformer.from(transformedValue);\n      }, databaseValue);\n    }\n\n    return transformer.from(databaseValue);\n  };\n\n  ApplyValueTransformers.transformTo = function (transformer, entityValue) {\n    if (Array.isArray(transformer)) {\n      return transformer.reduce(function (transformedValue, _transformer) {\n        return _transformer.to(transformedValue);\n      }, entityValue);\n    }\n\n    return transformer.to(entityValue);\n  };\n\n  return ApplyValueTransformers;\n}();\n\nexport { ApplyValueTransformers };","map":{"version":3,"sources":["../browser/src/util/ApplyValueTransformers.ts"],"names":[],"mappings":"AAEA,IAAA,sBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,sBAAA,GAAA,CAkBC;;AAjBU,EAAA,sBAAA,CAAA,aAAA,GAAP,UAAqB,WAArB,EAAyE,aAAzE,EAA2F;AACvF,QAAI,KAAK,CAAC,OAAN,CAAc,WAAd,CAAJ,EAAgC;AAC5B,UAAM,mBAAmB,GAAG,WAAW,CAAC,KAAZ,GAAoB,OAApB,EAA5B;AACA,aAAO,mBAAmB,CAAC,MAApB,CAA2B,UAAC,gBAAD,EAAmB,YAAnB,EAA+B;AAC7D,eAAO,YAAY,CAAC,IAAb,CAAkB,gBAAlB,CAAP;AACH,OAFM,EAEJ,aAFI,CAAP;AAGH;;AACD,WAAO,WAAW,CAAC,IAAZ,CAAiB,aAAjB,CAAP;AACH,GARM;;AASA,EAAA,sBAAA,CAAA,WAAA,GAAP,UAAmB,WAAnB,EAAuE,WAAvE,EAAuF;AACnF,QAAI,KAAK,CAAC,OAAN,CAAc,WAAd,CAAJ,EAAgC;AAC5B,aAAO,WAAW,CAAC,MAAZ,CAAmB,UAAC,gBAAD,EAAmB,YAAnB,EAA+B;AACrD,eAAO,YAAY,CAAC,EAAb,CAAgB,gBAAhB,CAAP;AACH,OAFM,EAEJ,WAFI,CAAP;AAGH;;AACD,WAAO,WAAW,CAAC,EAAZ,CAAe,WAAf,CAAP;AACH,GAPM;;AAQX,SAAA,sBAAA;AAAC,CAlBD,EAAA","sourcesContent":["import {ValueTransformer} from \"../decorator/options/ValueTransformer\";\n\nexport class ApplyValueTransformers {\n    static transformFrom(transformer: ValueTransformer | ValueTransformer[], databaseValue: any) {\n        if (Array.isArray(transformer)) {\n            const reverseTransformers = transformer.slice().reverse();\n            return reverseTransformers.reduce((transformedValue, _transformer) => {\n                return _transformer.from(transformedValue);\n            }, databaseValue);\n        }\n        return transformer.from(databaseValue);\n    }\n    static transformTo(transformer: ValueTransformer | ValueTransformer[], entityValue: any) {\n        if (Array.isArray(transformer)) {\n            return transformer.reduce((transformedValue, _transformer) => {\n                return _transformer.to(transformedValue);\n            }, entityValue);\n        }\n        return transformer.to(entityValue);\n    }\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}