{"ast":null,"code":"import { __values } from \"tslib\";\n\nvar ObjectUtils =\n/** @class */\nfunction () {\n  function ObjectUtils() {}\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object.\n   * @param target The target object to copy to.\n   * @param sources One or more source objects from which to copy properties\n   */\n\n\n  ObjectUtils.assign = function (target) {\n    var e_1, _a, e_2, _b;\n\n    var sources = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      sources[_i - 1] = arguments[_i];\n    }\n\n    try {\n      for (var sources_1 = __values(sources), sources_1_1 = sources_1.next(); !sources_1_1.done; sources_1_1 = sources_1.next()) {\n        var source = sources_1_1.value;\n\n        try {\n          for (var _c = (e_2 = void 0, __values(Object.getOwnPropertyNames(source))), _d = _c.next(); !_d.done; _d = _c.next()) {\n            var prop = _d.value;\n            target[prop] = source[prop];\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return)) _a.call(sources_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  return ObjectUtils;\n}();\n\nexport { ObjectUtils };","map":{"version":3,"sources":["../browser/src/util/ObjectUtils.ts"],"names":[],"mappings":";;AAAA,IAAA,WAAA;AAAA;AAAA,YAAA;AAAA,WAAA,WAAA,GAAA,CAyCC;AAbC;;;;;AAKG;;;AACI,EAAA,WAAA,CAAA,MAAA,GAAP,UAAc,MAAd,EAA4B;;;AAAE,QAAA,OAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAiB;AAAjB,MAAA,OAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;;AAC5B,WAAqB,IAAA,SAAA,GAAA,QAAA,CAAA,OAAA,CAAA,EAAO,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,WAAA,CAAA,IAA5B,EAA4B,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA8B;AAAzB,YAAM,MAAM,GAAA,WAAA,CAAA,KAAZ;;;AACH,eAAmB,IAAA,EAAA,IAAA,GAAA,GAAA,KAAA,CAAA,EAAA,QAAA,CAAA,MAAM,CAAC,mBAAP,CAA2B,MAA3B,CAAA,CAAA,CAAA,EAAkC,EAAA,GAAA,EAAA,CAAA,IAAA,EAArD,EAAqD,CAAA,EAAA,CAAA,IAArD,EAAqD,EAAA,GAAA,EAAA,CAAA,IAAA,EAArD,EAAuD;AAAlD,gBAAM,IAAI,GAAA,EAAA,CAAA,KAAV;AACA,YAAA,MAAc,CAAC,IAAD,CAAd,GAAuB,MAAM,CAAC,IAAD,CAA7B;AACJ;;;;;;;;;;;;AACF;;;;;;;;;;;;AACF,GANM;;AAOT,SAAA,WAAA;AAAC,CAzCD,EAAA","sourcesContent":["export class ObjectUtils {\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object.\n   * @param target The target object to copy to.\n   * @param source The source object from which to copy properties.\n   */\n  static assign<T, U>(target: T, source: U): void;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object.\n   * @param target The target object to copy to.\n   * @param source1 The first source object from which to copy properties.\n   * @param source2 The second source object from which to copy properties.\n   */\n  static assign<T, U, V>(target: T, source1: U, source2: V): void;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object.\n   * @param target The target object to copy to.\n   * @param source1 The first source object from which to copy properties.\n   * @param source2 The second source object from which to copy properties.\n   * @param source3 The third source object from which to copy properties.\n   */\n  static assign<T, U, V, W>(target: T, source1: U, source2: V, source3: W): void;\n\n  /**\n   * Copy the values of all of the enumerable own properties from one or more source objects to a\n   * target object.\n   * @param target The target object to copy to.\n   * @param sources One or more source objects from which to copy properties\n   */\n  static assign(target: object, ...sources: any[]): void {\n    for (const source of sources) {\n      for (const prop of Object.getOwnPropertyNames(source)) {\n          (target as any)[prop] = source[prop];\n      }\n    }\n  }\n}"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}