{"ast":null,"code":"import { __awaiter, __extends, __generator, __read, __values } from \"tslib\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Query } from \"../Query\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single oracle database connection.\n */\n\nvar OracleQueryRunner =\n/** @class */\nfunction (_super) {\n  __extends(OracleQueryRunner, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function OracleQueryRunner(driver, mode) {\n    var _this = _super.call(this) || this;\n\n    _this.driver = driver;\n    _this.connection = driver.connection;\n    _this.broadcaster = new Broadcaster(_this);\n    _this.mode = mode;\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates/uses database connection from the connection pool to perform further operations.\n   * Returns obtained database connection.\n   */\n\n\n  OracleQueryRunner.prototype.connect = function () {\n    var _this = this;\n\n    if (this.databaseConnection) return Promise.resolve(this.databaseConnection);\n    if (this.databaseConnectionPromise) return this.databaseConnectionPromise;\n\n    if (this.mode === \"slave\" && this.driver.isReplicated) {\n      this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(function (connection) {\n        _this.databaseConnection = connection;\n        return _this.databaseConnection;\n      });\n    } else {\n      // master\n      this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(function (connection) {\n        _this.databaseConnection = connection;\n        return _this.databaseConnection;\n      });\n    }\n\n    return this.databaseConnectionPromise;\n  };\n  /**\n   * Releases used database connection.\n   * You cannot use query runner methods once its released.\n   */\n\n\n  OracleQueryRunner.prototype.release = function () {\n    var _this = this;\n\n    return new Promise(function (ok, fail) {\n      _this.isReleased = true;\n\n      if (_this.databaseConnection) {\n        _this.databaseConnection.close(function (err) {\n          if (err) return fail(err);\n          ok();\n        });\n      } else {\n        ok();\n      }\n    });\n  };\n  /**\n   * Starts transaction.\n   */\n\n\n  OracleQueryRunner.prototype.startTransaction = function (isolationLevel) {\n    if (isolationLevel === void 0) {\n      isolationLevel = \"READ COMMITTED\";\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            if (this.isTransactionActive) throw new TransactionAlreadyStartedError(); // await this.query(\"START TRANSACTION\");\n\n            if (isolationLevel !== \"SERIALIZABLE\" && isolationLevel !== \"READ COMMITTED\") {\n              throw new Error(\"Oracle only supports SERIALIZABLE and READ COMMITTED isolation\");\n            }\n\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel)];\n\n          case 3:\n            _a.sent();\n\n            this.isTransactionActive = true;\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  OracleQueryRunner.prototype.commitTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.query(\"COMMIT\")];\n\n          case 3:\n            _a.sent();\n\n            this.isTransactionActive = false;\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Rollbacks transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  OracleQueryRunner.prototype.rollbackTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.query(\"ROLLBACK\")];\n\n          case 3:\n            _a.sent();\n\n            this.isTransactionActive = false;\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Executes a given SQL query.\n   */\n\n\n  OracleQueryRunner.prototype.query = function (query, parameters) {\n    var _this = this;\n\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    return new Promise(function (ok, fail) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var queryStartTime_1, handler, executionOptions, databaseConnection, err_1;\n\n        var _this = this;\n\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              this.driver.connection.logger.logQuery(query, parameters, this);\n              queryStartTime_1 = +new Date();\n\n              handler = function (err, result) {\n                // log slow queries if maxQueryExecution time is set\n                var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;\n                var queryEndTime = +new Date();\n                var queryExecutionTime = queryEndTime - queryStartTime_1;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);\n\n                if (err) {\n                  _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n\n                  return fail(new QueryFailedError(query, parameters, err));\n                } // TODO: find better solution. Must return result instead of properties\n\n\n                ok(result.rows || result.outBinds || result.rowsAffected);\n              };\n\n              executionOptions = {\n                autoCommit: this.isTransactionActive ? false : true\n              };\n              return [4\n              /*yield*/\n              , this.connect()];\n\n            case 1:\n              databaseConnection = _a.sent();\n              databaseConnection.execute(query, parameters || {}, executionOptions, handler);\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              err_1 = _a.sent();\n              fail(err_1);\n              return [3\n              /*break*/\n              , 3];\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Returns raw data stream.\n   */\n\n\n  OracleQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {\n    throw new Error(\"Stream is not supported by Oracle driver.\");\n  };\n  /**\n   * Returns all available database names including system databases.\n   */\n\n\n  OracleQueryRunner.prototype.getDatabases = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve([])];\n      });\n    });\n  };\n  /**\n   * Returns all available schema names including system schemas.\n   * If database parameter specified, returns schemas of that database.\n   */\n\n\n  OracleQueryRunner.prototype.getSchemas = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve([])];\n      });\n    });\n  };\n  /**\n   * Checks if database with the given name exist.\n   */\n\n\n  OracleQueryRunner.prototype.hasDatabase = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve(false)];\n      });\n    });\n  };\n  /**\n   * Loads currently using database\n   */\n\n\n  OracleQueryRunner.prototype.getCurrentDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var query;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT SYS_CONTEXT('USERENV','DB_NAME') AS \\\"db_name\\\" FROM dual\")];\n\n          case 1:\n            query = _a.sent();\n            return [2\n            /*return*/\n            , query[0][\"db_name\"]];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if schema with the given name exist.\n   */\n\n\n  OracleQueryRunner.prototype.hasSchema = function (schema) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve(false)];\n      });\n    });\n  };\n  /**\n   * Loads currently using database schema\n   */\n\n\n  OracleQueryRunner.prototype.getCurrentSchema = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var query;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT SYS_CONTEXT('USERENV','CURRENT_SCHEMA') AS \\\"schema_name\\\" FROM dual\")];\n\n          case 1:\n            query = _a.sent();\n            return [2\n            /*return*/\n            , query[0][\"schema_name\"]];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if table with the given name exist in the database.\n   */\n\n\n  OracleQueryRunner.prototype.hasTable = function (tableOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tableName, sql, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n            sql = \"SELECT \\\"TABLE_NAME\\\" FROM \\\"USER_TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + tableName + \"'\";\n            return [4\n            /*yield*/\n            , this.query(sql)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if column with the given name exist in the given table.\n   */\n\n\n  OracleQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tableName, sql, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n            sql = \"SELECT \\\"COLUMN_NAME\\\" FROM \\\"USER_TAB_COLS\\\" WHERE \\\"TABLE_NAME\\\" = '\" + tableName + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"'\";\n            return [4\n            /*yield*/\n            , this.query(sql)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new database.\n   */\n\n\n  OracleQueryRunner.prototype.createDatabase = function (database, ifNotExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"CREATE DATABASE IF NOT EXISTS \\\"\" + database + \"\\\"\")];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops database.\n   */\n\n\n  OracleQueryRunner.prototype.dropDatabase = function (database, ifExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve()];\n      });\n    });\n  };\n  /**\n   * Creates a new table schema.\n   */\n\n\n  OracleQueryRunner.prototype.createSchema = function (schemas, ifNotExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Schema create queries are not supported by Oracle driver.\");\n      });\n    });\n  };\n  /**\n   * Drops table schema.\n   */\n\n\n  OracleQueryRunner.prototype.dropSchema = function (schemaPath, ifExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Schema drop queries are not supported by Oracle driver.\");\n      });\n    });\n  };\n  /**\n   * Creates a new table.\n   */\n\n\n  OracleQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {\n    if (ifNotExist === void 0) {\n      ifNotExist = false;\n    }\n\n    if (createForeignKeys === void 0) {\n      createForeignKeys = true;\n    }\n\n    if (createIndices === void 0) {\n      createIndices = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isTableExist, upQueries, downQueries;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!ifNotExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasTable(table)];\n\n          case 1:\n            isTableExist = _a.sent();\n            if (isTableExist) return [2\n            /*return*/\n            , Promise.resolve()];\n            _a.label = 2;\n\n          case 2:\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(this.createTableSql(table, createForeignKeys));\n            downQueries.push(this.dropTableSql(table)); // if createForeignKeys is true, we must drop created foreign keys in down query.\n            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n\n            if (createForeignKeys) table.foreignKeys.forEach(function (foreignKey) {\n              return downQueries.push(_this.dropForeignKeySql(table, foreignKey));\n            });\n\n            if (createIndices) {\n              table.indices.forEach(function (index) {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name) index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(_this.createIndexSql(table, index));\n                downQueries.push(_this.dropIndexSql(index));\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the table.\n   */\n\n\n  OracleQueryRunner.prototype.dropTable = function (tableOrName, ifExist, dropForeignKeys, dropIndices) {\n    if (dropForeignKeys === void 0) {\n      dropForeignKeys = true;\n    }\n\n    if (dropIndices === void 0) {\n      dropIndices = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isTableExist, createForeignKeys, table, _a, upQueries, downQueries;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!ifExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasTable(tableOrName)];\n\n          case 1:\n            isTableExist = _b.sent();\n            if (!isTableExist) return [2\n            /*return*/\n            , Promise.resolve()];\n            _b.label = 2;\n\n          case 2:\n            createForeignKeys = dropForeignKeys;\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 3];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 4:\n            _a = _b.sent();\n            _b.label = 5;\n\n          case 5:\n            table = _a;\n            upQueries = [];\n            downQueries = [];\n\n            if (dropIndices) {\n              table.indices.forEach(function (index) {\n                upQueries.push(_this.dropIndexSql(index));\n                downQueries.push(_this.createIndexSql(table, index));\n              });\n            } // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n\n\n            if (dropForeignKeys) table.foreignKeys.forEach(function (foreignKey) {\n              return upQueries.push(_this.dropForeignKeySql(table, foreignKey));\n            });\n            upQueries.push(this.dropTableSql(table));\n            downQueries.push(this.createTableSql(table, createForeignKeys));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 6:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new view.\n   */\n\n\n  OracleQueryRunner.prototype.createView = function (view) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(this.createViewSql(view));\n            upQueries.push(this.insertViewDefinitionSql(view));\n            downQueries.push(this.dropViewSql(view));\n            downQueries.push(this.deleteViewDefinitionSql(view));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the view.\n   */\n\n\n  OracleQueryRunner.prototype.dropView = function (target) {\n    return __awaiter(this, void 0, void 0, function () {\n      var viewName, view, upQueries, downQueries;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            viewName = target instanceof View ? target.name : target;\n            return [4\n            /*yield*/\n            , this.getCachedView(viewName)];\n\n          case 1:\n            view = _a.sent();\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(this.deleteViewDefinitionSql(view));\n            upQueries.push(this.dropViewSql(view));\n            downQueries.push(this.insertViewDefinitionSql(view));\n            downQueries.push(this.createViewSql(view));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Renames the given table.\n   */\n\n\n  OracleQueryRunner.prototype.renameTable = function (oldTableOrName, newTableOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries, oldTable, _a, newTable, columnNames, oldPkName, newPkName;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            if (!(oldTableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = oldTableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(oldTableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            oldTable = _a;\n            newTable = oldTable.clone();\n\n            if (newTableOrName instanceof Table) {\n              newTable = newTableOrName;\n            } else {\n              newTable.name = newTableOrName;\n            } // rename table\n\n\n            upQueries.push(new Query(\"ALTER TABLE \\\"\" + oldTable.name + \"\\\" RENAME TO \\\"\" + newTable.name + \"\\\"\"));\n            downQueries.push(new Query(\"ALTER TABLE \\\"\" + newTable.name + \"\\\" RENAME TO \\\"\" + oldTable.name + \"\\\"\")); // rename primary key constraint\n\n            if (newTable.primaryColumns.length > 0) {\n              columnNames = newTable.primaryColumns.map(function (column) {\n                return column.name;\n              });\n              oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n              newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames); // build queries\n\n              upQueries.push(new Query(\"ALTER TABLE \\\"\" + newTable.name + \"\\\" RENAME CONSTRAINT \\\"\" + oldPkName + \"\\\" TO \\\"\" + newPkName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \\\"\" + newTable.name + \"\\\" RENAME CONSTRAINT \\\"\" + newPkName + \"\\\" TO \\\"\" + oldPkName + \"\\\"\"));\n            } // rename unique constraints\n\n\n            newTable.uniques.forEach(function (unique) {\n              // build new constraint name\n              var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames); // build queries\n\n\n              upQueries.push(new Query(\"ALTER TABLE \\\"\" + newTable.name + \"\\\" RENAME CONSTRAINT \\\"\" + unique.name + \"\\\" TO \\\"\" + newUniqueName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \\\"\" + newTable.name + \"\\\" RENAME CONSTRAINT \\\"\" + newUniqueName + \"\\\" TO \\\"\" + unique.name + \"\\\"\")); // replace constraint name\n\n              unique.name = newUniqueName;\n            }); // rename index constraints\n\n            newTable.indices.forEach(function (index) {\n              // build new constraint name\n              var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where); // build queries\n\n\n              upQueries.push(new Query(\"ALTER INDEX \\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER INDEX \\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\")); // replace constraint name\n\n              index.name = newIndexName;\n            }); // rename foreign key constraints\n\n            newTable.foreignKeys.forEach(function (foreignKey) {\n              // build new constraint name\n              var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames); // build queries\n\n\n              upQueries.push(new Query(\"ALTER TABLE \\\"\" + newTable.name + \"\\\" RENAME CONSTRAINT \\\"\" + foreignKey.name + \"\\\" TO \\\"\" + newForeignKeyName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \\\"\" + newTable.name + \"\\\" RENAME CONSTRAINT \\\"\" + newForeignKeyName + \"\\\" TO \\\"\" + foreignKey.name + \"\\\"\")); // replace constraint name\n\n              foreignKey.name = newForeignKeyName;\n            });\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _b.sent(); // rename old table and replace it in cached tabled;\n\n\n            oldTable.name = newTable.name;\n            this.replaceCachedTable(oldTable, newTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new column from the column in the table.\n   */\n\n\n  OracleQueryRunner.prototype.addColumn = function (tableOrName, column) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, upQueries, downQueries, primaryColumns, pkName_1, columnNames_1, pkName, columnNames, columnIndex, uniqueConstraint;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD \" + this.buildCreateColumnSql(column)));\n            downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP COLUMN \\\"\" + column.name + \"\\\"\")); // create or update primary key constraint\n\n            if (column.isPrimary) {\n              primaryColumns = clonedTable.primaryColumns; // if table already have primary key, me must drop it and recreate again\n\n              if (primaryColumns.length > 0) {\n                pkName_1 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames_1 = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + pkName_1 + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + pkName_1 + \"\\\" PRIMARY KEY (\" + columnNames_1 + \")\"));\n              }\n\n              primaryColumns.push(column);\n              pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNames = primaryColumns.map(function (column) {\n                return \"\\\"\" + column.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n            }\n\n            columnIndex = clonedTable.indices.find(function (index) {\n              return index.columnNames.length === 1 && index.columnNames[0] === column.name;\n            });\n\n            if (columnIndex) {\n              clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n              upQueries.push(this.createIndexSql(table, columnIndex));\n              downQueries.push(this.dropIndexSql(columnIndex));\n            } // create unique constraint\n\n\n            if (column.isUnique) {\n              uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                columnNames: [column.name]\n              });\n              clonedTable.uniques.push(uniqueConstraint);\n              upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + column.name + \"\\\")\"));\n              downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\"));\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _b.sent();\n\n            clonedTable.addColumn(column);\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new columns from the column in the table.\n   */\n\n\n  OracleQueryRunner.prototype.addColumns = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var columns_1, columns_1_1, column, e_1_1;\n\n      var e_1, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            columns_1 = __values(columns), columns_1_1 = columns_1.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!columns_1_1.done) return [3\n            /*break*/\n            , 4];\n            column = columns_1_1.value;\n            return [4\n            /*yield*/\n            , this.addColumn(tableOrName, column)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            columns_1_1 = columns_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (columns_1_1 && !columns_1_1.done && (_a = columns_1.return)) _a.call(columns_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Renames column in the given table.\n   */\n\n\n  OracleQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, oldColumn, newColumn;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (c) {\n              return c.name === oldTableColumnOrName;\n            });\n            if (!oldColumn) throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n            newColumn = undefined;\n\n            if (newTableColumnOrName instanceof TableColumn) {\n              newColumn = newTableColumnOrName;\n            } else {\n              newColumn = oldColumn.clone();\n              newColumn.name = newTableColumnOrName;\n            }\n\n            return [4\n            /*yield*/\n            , this.changeColumn(table, oldColumn, newColumn)];\n\n          case 4:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Changes a column in the table.\n   */\n\n\n  OracleQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, upQueries, downQueries, oldColumn, primaryColumns, columnNames, oldPkName, newPkName, oldTableColumn, defaultUp, defaultDown, nullableUp, nullableDown, primaryColumns, pkName, columnNames, column, pkName, columnNames, primaryColumn, column, pkName, columnNames, uniqueConstraint, uniqueConstraint;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (column) {\n              return column.name === oldTableColumnOrName;\n            });\n            if (!oldColumn) throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n            if (!(newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\" || oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length)) return [3\n            /*break*/\n            , 6]; // Oracle does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n\n            return [4\n            /*yield*/\n            , this.dropColumn(table, oldColumn)];\n\n          case 4:\n            // Oracle does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.addColumn(table, newColumn)];\n\n          case 5:\n            _b.sent(); // update cloned table\n\n\n            clonedTable = table.clone();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            if (newColumn.name !== oldColumn.name) {\n              // rename column\n              upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" RENAME COLUMN \\\"\" + oldColumn.name + \"\\\" TO \\\"\" + newColumn.name + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" RENAME COLUMN \\\"\" + newColumn.name + \"\\\" TO \\\"\" + oldColumn.name + \"\\\"\")); // rename column primary key constraint\n\n              if (oldColumn.isPrimary === true) {\n                primaryColumns = clonedTable.primaryColumns;\n                columnNames = primaryColumns.map(function (column) {\n                  return column.name;\n                });\n                oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames); // replace old column name with new column name\n\n                columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                columnNames.push(newColumn.name);\n                newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n                upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" RENAME CONSTRAINT \\\"\" + oldPkName + \"\\\" TO \\\"\" + newPkName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" RENAME CONSTRAINT \\\"\" + newPkName + \"\\\" TO \\\"\" + oldPkName + \"\\\"\"));\n              } // rename unique constraints\n\n\n              clonedTable.findColumnUniques(oldColumn).forEach(function (unique) {\n                // build new constraint name\n                unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                unique.columnNames.push(newColumn.name);\n\n                var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames); // build queries\n\n\n                upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" RENAME CONSTRAINT \\\"\" + unique.name + \"\\\" TO \\\"\" + newUniqueName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" RENAME CONSTRAINT \\\"\" + newUniqueName + \"\\\" TO \\\"\" + unique.name + \"\\\"\")); // replace constraint name\n\n                unique.name = newUniqueName;\n              }); // rename index constraints\n\n              clonedTable.findColumnIndices(oldColumn).forEach(function (index) {\n                // build new constraint name\n                index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                index.columnNames.push(newColumn.name);\n\n                var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where); // build queries\n\n\n                upQueries.push(new Query(\"ALTER INDEX \\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER INDEX \\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\")); // replace constraint name\n\n                index.name = newIndexName;\n              }); // rename foreign key constraints\n\n              clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {\n                // build new constraint name\n                foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                foreignKey.columnNames.push(newColumn.name);\n\n                var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames); // build queries\n\n\n                upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" RENAME CONSTRAINT \\\"\" + foreignKey.name + \"\\\" TO \\\"\" + newForeignKeyName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" RENAME CONSTRAINT \\\"\" + newForeignKeyName + \"\\\" TO \\\"\" + foreignKey.name + \"\\\"\")); // replace constraint name\n\n                foreignKey.name = newForeignKeyName;\n              });\n              oldTableColumn = clonedTable.columns.find(function (column) {\n                return column.name === oldColumn.name;\n              });\n              clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n              oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\n              defaultUp = \"\";\n              defaultDown = \"\";\n              nullableUp = \"\";\n              nullableDown = \"\"; // changing column default\n\n              if (newColumn.default !== null && newColumn.default !== undefined) {\n                defaultUp = \"DEFAULT \" + newColumn.default;\n\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                  defaultDown = \"DEFAULT \" + oldColumn.default;\n                } else {\n                  defaultDown = \"DEFAULT NULL\";\n                }\n              } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                defaultUp = \"DEFAULT NULL\";\n                defaultDown = \"DEFAULT \" + oldColumn.default;\n              } // changing column isNullable property\n\n\n              if (newColumn.isNullable !== oldColumn.isNullable) {\n                if (newColumn.isNullable === true) {\n                  nullableUp = \"NULL\";\n                  nullableDown = \"NOT NULL\";\n                } else {\n                  nullableUp = \"NOT NULL\";\n                  nullableDown = \"NULL\";\n                }\n              }\n\n              upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" MODIFY \\\"\" + oldColumn.name + \"\\\" \" + this.connection.driver.createFullType(newColumn) + \" \" + defaultUp + \" \" + nullableUp));\n              downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" MODIFY \\\"\" + oldColumn.name + \"\\\" \" + this.connection.driver.createFullType(oldColumn) + \" \" + defaultDown + \" \" + nullableDown));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n              primaryColumns = clonedTable.primaryColumns; // if primary column state changed, we must always drop existed constraint.\n\n              if (primaryColumns.length > 0) {\n                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              }\n\n              if (newColumn.isPrimary === true) {\n                primaryColumns.push(newColumn);\n                column = clonedTable.columns.find(function (column) {\n                  return column.name === newColumn.name;\n                });\n                column.isPrimary = true;\n                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n              } else {\n                primaryColumn = primaryColumns.find(function (c) {\n                  return c.name === newColumn.name;\n                });\n                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                column = clonedTable.columns.find(function (column) {\n                  return column.name === newColumn.name;\n                });\n                column.isPrimary = false; // if we have another primary keys, we must recreate constraint.\n\n                if (primaryColumns.length > 0) {\n                  pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                    return column.name;\n                  }));\n                  columnNames = primaryColumns.map(function (column) {\n                    return \"\\\"\" + column.name + \"\\\"\";\n                  }).join(\", \");\n                  upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                  downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                }\n              }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n              if (newColumn.isUnique === true) {\n                uniqueConstraint = new TableUnique({\n                  name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                  columnNames: [newColumn.name]\n                });\n                clonedTable.uniques.push(uniqueConstraint);\n                upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\"));\n                downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\"));\n              } else {\n                uniqueConstraint = clonedTable.uniques.find(function (unique) {\n                  return unique.columnNames.length === 1 && !!unique.columnNames.find(function (columnName) {\n                    return columnName === newColumn.name;\n                  });\n                });\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);\n                upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\"));\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 7:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            _b.label = 8;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Changes a column in the table.\n   */\n\n\n  OracleQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var changedColumns_1, changedColumns_1_1, _a, oldColumn, newColumn, e_2_1;\n\n      var e_2, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 5, 6, 7]);\n\n            changedColumns_1 = __values(changedColumns), changedColumns_1_1 = changedColumns_1.next();\n            _c.label = 1;\n\n          case 1:\n            if (!!changedColumns_1_1.done) return [3\n            /*break*/\n            , 4];\n            _a = changedColumns_1_1.value, oldColumn = _a.oldColumn, newColumn = _a.newColumn;\n            return [4\n            /*yield*/\n            , this.changeColumn(tableOrName, oldColumn, newColumn)];\n\n          case 2:\n            _c.sent();\n\n            _c.label = 3;\n\n          case 3:\n            changedColumns_1_1 = changedColumns_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_2_1 = _c.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (changedColumns_1_1 && !changedColumns_1_1.done && (_b = changedColumns_1.return)) _b.call(changedColumns_1);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops column in the table.\n   */\n\n\n  OracleQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, column, clonedTable, upQueries, downQueries, pkName, columnNames, tableColumn, pkName_2, columnNames_2, columnIndex, columnCheck, columnUnique;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n            if (!column) throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = []; // drop primary key constraint\n\n            if (column.isPrimary) {\n              pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNames = clonedTable.primaryColumns.map(function (primaryColumn) {\n                return \"\\\"\" + primaryColumn.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \\\"\" + clonedTable.name + \"\\\" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \\\"\" + clonedTable.name + \"\\\" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              tableColumn = clonedTable.findColumnByName(column.name);\n              tableColumn.isPrimary = false; // if primary key have multiple columns, we must recreate it without dropped column\n\n              if (clonedTable.primaryColumns.length > 0) {\n                pkName_2 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames_2 = clonedTable.primaryColumns.map(function (primaryColumn) {\n                  return \"\\\"\" + primaryColumn.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \\\"\" + clonedTable.name + \"\\\" ADD CONSTRAINT \\\"\" + pkName_2 + \"\\\" PRIMARY KEY (\" + columnNames_2 + \")\"));\n                downQueries.push(new Query(\"ALTER TABLE \\\"\" + clonedTable.name + \"\\\" DROP CONSTRAINT \\\"\" + pkName_2 + \"\\\"\"));\n              }\n            }\n\n            columnIndex = clonedTable.indices.find(function (index) {\n              return index.columnNames.length === 1 && index.columnNames[0] === column.name;\n            });\n\n            if (columnIndex) {\n              upQueries.push(this.dropIndexSql(columnIndex));\n              downQueries.push(this.createIndexSql(table, columnIndex));\n            }\n\n            columnCheck = clonedTable.checks.find(function (check) {\n              return !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name;\n            });\n\n            if (columnCheck) {\n              clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n              upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n              downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n            }\n\n            columnUnique = clonedTable.uniques.find(function (unique) {\n              return unique.columnNames.length === 1 && unique.columnNames[0] === column.name;\n            });\n\n            if (columnUnique) {\n              clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n              upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n              downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n            }\n\n            upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP COLUMN \\\"\" + column.name + \"\\\"\"));\n            downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD \" + this.buildCreateColumnSql(column)));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _b.sent();\n\n            clonedTable.removeColumn(column);\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the columns in the table.\n   */\n\n\n  OracleQueryRunner.prototype.dropColumns = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var columns_2, columns_2_1, column, e_3_1;\n\n      var e_3, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            columns_2 = __values(columns), columns_2_1 = columns_2.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!columns_2_1.done) return [3\n            /*break*/\n            , 4];\n            column = columns_2_1.value;\n            return [4\n            /*yield*/\n            , this.dropColumn(tableOrName, column)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            columns_2_1 = columns_2.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_3_1 = _b.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (columns_2_1 && !columns_2_1.done && (_a = columns_2.return)) _a.call(columns_2);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new primary key.\n   */\n\n\n  OracleQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            up = this.createPrimaryKeySql(table, columnNames); // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n\n            clonedTable.columns.forEach(function (column) {\n              if (columnNames.find(function (columnName) {\n                return columnName === column.name;\n              })) column.isPrimary = true;\n            });\n            down = this.dropPrimaryKeySql(clonedTable);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Updates composite primary keys.\n   */\n\n\n  OracleQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, columnNames, clonedTable, upQueries, downQueries, primaryColumns, pkName_3, columnNamesString_1, pkName, columnNamesString;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            columnNames = columns.map(function (column) {\n              return column.name;\n            });\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            primaryColumns = clonedTable.primaryColumns;\n\n            if (primaryColumns.length > 0) {\n              pkName_3 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNamesString_1 = primaryColumns.map(function (column) {\n                return \"\\\"\" + column.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + pkName_3 + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + pkName_3 + \"\\\" PRIMARY KEY (\" + columnNamesString_1 + \")\"));\n            } // update columns in table.\n\n\n            clonedTable.columns.filter(function (column) {\n              return columnNames.indexOf(column.name) !== -1;\n            }).forEach(function (column) {\n              return column.isPrimary = true;\n            });\n            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n            columnNamesString = columnNames.map(function (columnName) {\n              return \"\\\"\" + columnName + \"\\\"\";\n            }).join(\", \");\n            upQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\"));\n            downQueries.push(new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a primary key.\n   */\n\n\n  OracleQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            up = this.dropPrimaryKeySql(table);\n            down = this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) {\n              return column.name;\n            }));\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.primaryColumns.forEach(function (column) {\n              column.isPrimary = false;\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new unique constraint.\n   */\n\n\n  OracleQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.\n\n            if (!uniqueConstraint.name) uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n            up = this.createUniqueConstraintSql(table, uniqueConstraint);\n            down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addUniqueConstraint(uniqueConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new unique constraints.\n   */\n\n\n  OracleQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = uniqueConstraints.map(function (uniqueConstraint) {\n              return _this.createUniqueConstraint(tableOrName, uniqueConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an unique constraint.\n   */\n\n\n  OracleQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, uniqueConstraint, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(function (u) {\n              return u.name === uniqueOrName;\n            });\n            if (!uniqueConstraint) throw new Error(\"Supplied unique constraint was not found in table \" + table.name);\n            up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n            down = this.createUniqueConstraintSql(table, uniqueConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeUniqueConstraint(uniqueConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates an unique constraints.\n   */\n\n\n  OracleQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = uniqueConstraints.map(function (uniqueConstraint) {\n              return _this.dropUniqueConstraint(tableOrName, uniqueConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates new check constraint.\n   */\n\n\n  OracleQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.\n\n            if (!checkConstraint.name) checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);\n            up = this.createCheckConstraintSql(table, checkConstraint);\n            down = this.dropCheckConstraintSql(table, checkConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addCheckConstraint(checkConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates new check constraints.\n   */\n\n\n  OracleQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = checkConstraints.map(function (checkConstraint) {\n              return _this.createCheckConstraint(tableOrName, checkConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops check constraint.\n   */\n\n\n  OracleQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, checkConstraint, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(function (c) {\n              return c.name === checkOrName;\n            });\n            if (!checkConstraint) throw new Error(\"Supplied check constraint was not found in table \" + table.name);\n            up = this.dropCheckConstraintSql(table, checkConstraint);\n            down = this.createCheckConstraintSql(table, checkConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeCheckConstraint(checkConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops check constraints.\n   */\n\n\n  OracleQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = checkConstraints.map(function (checkConstraint) {\n              return _this.dropCheckConstraint(tableOrName, checkConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new exclusion constraint.\n   */\n\n\n  OracleQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Oracle does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Creates a new exclusion constraints.\n   */\n\n\n  OracleQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Oracle does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Drops exclusion constraint.\n   */\n\n\n  OracleQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Oracle does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Drops exclusion constraints.\n   */\n\n\n  OracleQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Oracle does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Creates a new foreign key.\n   */\n\n\n  OracleQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new FK may be passed without name. In this case we generate FK name manually.\n\n            if (!foreignKey.name) foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n            up = this.createForeignKeySql(table, foreignKey);\n            down = this.dropForeignKeySql(table, foreignKey);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addForeignKey(foreignKey);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new foreign keys.\n   */\n\n\n  OracleQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = foreignKeys.map(function (foreignKey) {\n              return _this.createForeignKey(tableOrName, foreignKey);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a foreign key from the table.\n   */\n\n\n  OracleQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, foreignKey, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(function (fk) {\n              return fk.name === foreignKeyOrName;\n            });\n            if (!foreignKey) throw new Error(\"Supplied foreign key was not found in table \" + table.name);\n            up = this.dropForeignKeySql(table, foreignKey);\n            down = this.createForeignKeySql(table, foreignKey);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeForeignKey(foreignKey);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a foreign keys from the table.\n   */\n\n\n  OracleQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = foreignKeys.map(function (foreignKey) {\n              return _this.dropForeignKey(tableOrName, foreignKey);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new index.\n   */\n\n\n  OracleQueryRunner.prototype.createIndex = function (tableOrName, index) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new index may be passed without name. In this case we generate index name manually.\n\n            if (!index.name) index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n            up = this.createIndexSql(table, index);\n            down = this.dropIndexSql(index);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addIndex(index);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new indices\n   */\n\n\n  OracleQueryRunner.prototype.createIndices = function (tableOrName, indices) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = indices.map(function (index) {\n              return _this.createIndex(tableOrName, index);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an index from the table.\n   */\n\n\n  OracleQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, index, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(function (i) {\n              return i.name === indexOrName;\n            });\n            if (!index) throw new Error(\"Supplied index was not found in table \" + table.name);\n            up = this.dropIndexSql(index);\n            down = this.createIndexSql(table, index);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeIndex(index);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an indices from the table.\n   */\n\n\n  OracleQueryRunner.prototype.dropIndices = function (tableOrName, indices) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = indices.map(function (index) {\n              return _this.dropIndex(tableOrName, index);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Clears all table contents.\n   * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n   */\n\n\n  OracleQueryRunner.prototype.clearTable = function (tableName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"TRUNCATE TABLE \\\"\" + tableName + \"\\\"\")];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Removes all tables from the currently connected database.\n   */\n\n\n  OracleQueryRunner.prototype.clearDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var dropViewsQuery, dropViewQueries, dropMatViewsQuery, dropMatViewQueries, dropTablesQuery, dropTableQueries, error_1, rollbackError_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.startTransaction()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 10,, 15]);\n\n            dropViewsQuery = \"SELECT 'DROP VIEW \\\"' || VIEW_NAME || '\\\"' AS \\\"query\\\" FROM \\\"USER_VIEWS\\\"\";\n            return [4\n            /*yield*/\n            , this.query(dropViewsQuery)];\n\n          case 3:\n            dropViewQueries = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(dropViewQueries.map(function (query) {\n              return _this.query(query[\"query\"]);\n            }))];\n\n          case 4:\n            _a.sent();\n\n            dropMatViewsQuery = \"SELECT 'DROP MATERIALIZED VIEW \\\"' || MVIEW_NAME || '\\\"' AS \\\"query\\\" FROM \\\"USER_MVIEWS\\\"\";\n            return [4\n            /*yield*/\n            , this.query(dropMatViewsQuery)];\n\n          case 5:\n            dropMatViewQueries = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(dropMatViewQueries.map(function (query) {\n              return _this.query(query[\"query\"]);\n            }))];\n\n          case 6:\n            _a.sent();\n\n            dropTablesQuery = \"SELECT 'DROP TABLE \\\"' || TABLE_NAME || '\\\" CASCADE CONSTRAINTS' AS \\\"query\\\" FROM \\\"USER_TABLES\\\"\";\n            return [4\n            /*yield*/\n            , this.query(dropTablesQuery)];\n\n          case 7:\n            dropTableQueries = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(dropTableQueries.map(function (query) {\n              return _this.query(query[\"query\"]);\n            }))];\n\n          case 8:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.commitTransaction()];\n\n          case 9:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 15];\n\n          case 10:\n            error_1 = _a.sent();\n            _a.label = 11;\n\n          case 11:\n            _a.trys.push([11, 13,, 14]);\n\n            return [4\n            /*yield*/\n            , this.rollbackTransaction()];\n\n          case 12:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 14];\n\n          case 13:\n            rollbackError_1 = _a.sent();\n            return [3\n            /*break*/\n            , 14];\n\n          case 14:\n            throw error_1;\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n\n  OracleQueryRunner.prototype.loadViews = function (viewNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hasTable, viewNamesString, query, dbViews;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.hasTable(this.getTypeormMetadataTableName())];\n\n          case 1:\n            hasTable = _a.sent();\n            if (!hasTable) return [2\n            /*return*/\n            , Promise.resolve([])];\n            viewNamesString = viewNames.map(function (name) {\n              return \"'\" + name + \"'\";\n            }).join(\", \");\n            query = \"SELECT \\\"T\\\".* FROM \\\"\" + this.getTypeormMetadataTableName() + \"\\\" \\\"T\\\" \" + \"INNER JOIN \\\"USER_OBJECTS\\\" \\\"O\\\" ON \\\"O\\\".\\\"OBJECT_NAME\\\" = \\\"T\\\".\\\"name\\\" AND \\\"O\\\".\\\"OBJECT_TYPE\\\" IN ( 'MATERIALIZED VIEW', 'VIEW' ) \" + \"WHERE \\\"T\\\".\\\"type\\\" IN ( 'MATERIALIZED_VIEW', 'VIEW' )\";\n            if (viewNamesString.length > 0) query += \" AND \\\"T\\\".\\\"name\\\" IN (\" + viewNamesString + \")\";\n            return [4\n            /*yield*/\n            , this.query(query)];\n\n          case 2:\n            dbViews = _a.sent();\n            return [2\n            /*return*/\n            , dbViews.map(function (dbView) {\n              var view = new View();\n              view.name = dbView[\"name\"];\n              view.expression = dbView[\"value\"];\n              view.materialized = dbView[\"type\"] === \"MATERIALIZED_VIEW\";\n              return view;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Loads all tables (with given names) from the database and creates a Table from them.\n   */\n\n\n  OracleQueryRunner.prototype.loadTables = function (tableNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var tableNamesString, tablesSql, columnsSql, indicesSql, foreignKeysSql, constraintsSql, _a, dbTables, dbColumns, dbIndices, dbForeignKeys, dbConstraints;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            // if no tables given then no need to proceed\n            if (!tableNames || !tableNames.length) return [2\n            /*return*/\n            , []];\n            tableNamesString = tableNames.map(function (name) {\n              return \"'\" + name + \"'\";\n            }).join(\", \");\n            tablesSql = \"SELECT * FROM \\\"USER_TABLES\\\" WHERE \\\"TABLE_NAME\\\" IN (\" + tableNamesString + \")\";\n            columnsSql = \"SELECT * FROM \\\"USER_TAB_COLS\\\" WHERE \\\"TABLE_NAME\\\" IN (\" + tableNamesString + \")\";\n            indicesSql = \"SELECT \\\"IND\\\".\\\"INDEX_NAME\\\", \\\"IND\\\".\\\"TABLE_NAME\\\", \\\"IND\\\".\\\"UNIQUENESS\\\", \" + \"LISTAGG (\\\"COL\\\".\\\"COLUMN_NAME\\\", ',') WITHIN GROUP (ORDER BY \\\"COL\\\".\\\"COLUMN_NAME\\\") AS \\\"COLUMN_NAMES\\\" \" + \"FROM \\\"USER_INDEXES\\\" \\\"IND\\\" \" + \"INNER JOIN \\\"USER_IND_COLUMNS\\\" \\\"COL\\\" ON \\\"COL\\\".\\\"INDEX_NAME\\\" = \\\"IND\\\".\\\"INDEX_NAME\\\" \" + \"LEFT JOIN \\\"USER_CONSTRAINTS\\\" \\\"CON\\\" ON \\\"CON\\\".\\\"CONSTRAINT_NAME\\\" = \\\"IND\\\".\\\"INDEX_NAME\\\" \" + (\"WHERE \\\"IND\\\".\\\"TABLE_NAME\\\" IN (\" + tableNamesString + \") AND \\\"CON\\\".\\\"CONSTRAINT_NAME\\\" IS NULL \") + \"GROUP BY \\\"IND\\\".\\\"INDEX_NAME\\\", \\\"IND\\\".\\\"TABLE_NAME\\\", \\\"IND\\\".\\\"UNIQUENESS\\\"\";\n            foreignKeysSql = \"SELECT \\\"C\\\".\\\"CONSTRAINT_NAME\\\", \\\"C\\\".\\\"TABLE_NAME\\\", \\\"COL\\\".\\\"COLUMN_NAME\\\", \\\"REF_COL\\\".\\\"TABLE_NAME\\\" AS \\\"REFERENCED_TABLE_NAME\\\", \" + \"\\\"REF_COL\\\".\\\"COLUMN_NAME\\\" AS \\\"REFERENCED_COLUMN_NAME\\\", \\\"C\\\".\\\"DELETE_RULE\\\" AS \\\"ON_DELETE\\\" \" + \"FROM \\\"USER_CONSTRAINTS\\\" \\\"C\\\" \" + \"INNER JOIN \\\"USER_CONS_COLUMNS\\\" \\\"COL\\\" ON \\\"COL\\\".\\\"OWNER\\\" = \\\"C\\\".\\\"OWNER\\\" AND \\\"COL\\\".\\\"CONSTRAINT_NAME\\\" = \\\"C\\\".\\\"CONSTRAINT_NAME\\\" \" + \"INNER JOIN \\\"USER_CONS_COLUMNS\\\" \\\"REF_COL\\\" ON \\\"REF_COL\\\".\\\"OWNER\\\" = \\\"C\\\".\\\"R_OWNER\\\" AND \\\"REF_COL\\\".\\\"CONSTRAINT_NAME\\\" = \\\"C\\\".\\\"R_CONSTRAINT_NAME\\\" AND \\\"REF_COL\\\".\\\"POSITION\\\" = \\\"COL\\\".\\\"POSITION\\\" \" + (\"WHERE \\\"C\\\".\\\"TABLE_NAME\\\" IN (\" + tableNamesString + \") AND \\\"C\\\".\\\"CONSTRAINT_TYPE\\\" = 'R'\");\n            constraintsSql = \"SELECT \\\"C\\\".\\\"CONSTRAINT_NAME\\\", \\\"C\\\".\\\"CONSTRAINT_TYPE\\\", \\\"C\\\".\\\"TABLE_NAME\\\", \\\"COL\\\".\\\"COLUMN_NAME\\\", \\\"C\\\".\\\"SEARCH_CONDITION\\\" \" + \"FROM \\\"USER_CONSTRAINTS\\\" \\\"C\\\" \" + \"INNER JOIN \\\"USER_CONS_COLUMNS\\\" \\\"COL\\\" ON \\\"COL\\\".\\\"OWNER\\\" = \\\"C\\\".\\\"OWNER\\\" AND \\\"COL\\\".\\\"CONSTRAINT_NAME\\\" = \\\"C\\\".\\\"CONSTRAINT_NAME\\\" \" + (\"WHERE \\\"C\\\".\\\"TABLE_NAME\\\" IN (\" + tableNamesString + \") AND \\\"C\\\".\\\"CONSTRAINT_TYPE\\\" IN ('C', 'U', 'P') AND \\\"C\\\".\\\"GENERATED\\\" = 'USER NAME'\");\n            return [4\n            /*yield*/\n            , Promise.all([this.query(tablesSql), this.query(columnsSql), this.query(indicesSql), this.query(foreignKeysSql), this.query(constraintsSql)])];\n\n          case 1:\n            _a = __read.apply(void 0, [_b.sent(), 5]), dbTables = _a[0], dbColumns = _a[1], dbIndices = _a[2], dbForeignKeys = _a[3], dbConstraints = _a[4]; // if tables were not found in the db, no need to proceed\n\n            if (!dbTables.length) return [2\n            /*return*/\n            , []]; // create tables for loaded tables\n\n            return [2\n            /*return*/\n            , dbTables.map(function (dbTable) {\n              var table = new Table();\n              table.name = dbTable[\"TABLE_NAME\"]; // create columns from the loaded columns\n\n              table.columns = dbColumns.filter(function (dbColumn) {\n                return dbColumn[\"TABLE_NAME\"] === table.name;\n              }).map(function (dbColumn) {\n                var columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                  return dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                });\n                var uniqueConstraint = columnConstraints.find(function (constraint) {\n                  return constraint[\"CONSTRAINT_TYPE\"] === \"U\";\n                });\n                var isConstraintComposite = uniqueConstraint ? !!dbConstraints.find(function (dbConstraint) {\n                  return dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\" && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"] && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"];\n                }) : false;\n                var isUnique = !!uniqueConstraint && !isConstraintComposite;\n                var isPrimary = !!columnConstraints.find(function (constraint) {\n                  return constraint[\"CONSTRAINT_TYPE\"] === \"P\";\n                });\n                var tableColumn = new TableColumn();\n                tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                if (tableColumn.type.indexOf(\"(\") !== -1) tableColumn.type = tableColumn.type.replace(/\\([0-9]*\\)/, \"\"); // check only columns that have length property\n\n                if (_this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1) {\n                  var length_1 = tableColumn.type === \"raw\" ? dbColumn[\"DATA_LENGTH\"] : dbColumn[\"CHAR_COL_DECL_LENGTH\"];\n                  tableColumn.length = length_1 && !_this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1.toString() : \"\";\n                }\n\n                if (tableColumn.type === \"number\" || tableColumn.type === \"float\") {\n                  if (dbColumn[\"DATA_PRECISION\"] !== null && !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATA_PRECISION\"])) tableColumn.precision = dbColumn[\"DATA_PRECISION\"];\n                  if (dbColumn[\"DATA_SCALE\"] !== null && !_this.isDefaultColumnScale(table, tableColumn, dbColumn[\"DATA_SCALE\"])) tableColumn.scale = dbColumn[\"DATA_SCALE\"];\n                } else if ((tableColumn.type === \"timestamp\" || tableColumn.type === \"timestamp with time zone\" || tableColumn.type === \"timestamp with local time zone\") && dbColumn[\"DATA_SCALE\"] !== null) {\n                  tableColumn.precision = !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATA_SCALE\"]) ? dbColumn[\"DATA_SCALE\"] : undefined;\n                }\n\n                tableColumn.default = dbColumn[\"DATA_DEFAULT\"] !== null && dbColumn[\"DATA_DEFAULT\"] !== undefined && dbColumn[\"DATA_DEFAULT\"].trim() !== \"NULL\" ? tableColumn.default = dbColumn[\"DATA_DEFAULT\"].trim() : undefined;\n                tableColumn.isNullable = dbColumn[\"NULLABLE\"] === \"Y\";\n                tableColumn.isUnique = isUnique;\n                tableColumn.isPrimary = isPrimary;\n                tableColumn.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\";\n\n                if (tableColumn.isGenerated) {\n                  tableColumn.generationStrategy = \"increment\";\n                  tableColumn.default = undefined;\n                }\n\n                tableColumn.comment = \"\"; // todo\n\n                return tableColumn;\n              }); // find unique constraints of table, group them by constraint name and build TableUnique.\n\n              var tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                return dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\";\n              }), function (dbConstraint) {\n                return dbConstraint[\"CONSTRAINT_NAME\"];\n              });\n              table.uniques = tableUniqueConstraints.map(function (constraint) {\n                var uniques = dbConstraints.filter(function (dbC) {\n                  return dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"];\n                });\n                return new TableUnique({\n                  name: constraint[\"CONSTRAINT_NAME\"],\n                  columnNames: uniques.map(function (u) {\n                    return u[\"COLUMN_NAME\"];\n                  })\n                });\n              }); // find check constraints of table, group them by constraint name and build TableCheck.\n\n              var tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                return dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"CONSTRAINT_TYPE\"] === \"C\";\n              }), function (dbConstraint) {\n                return dbConstraint[\"CONSTRAINT_NAME\"];\n              });\n              table.checks = tableCheckConstraints.map(function (constraint) {\n                var checks = dbConstraints.filter(function (dbC) {\n                  return dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"];\n                });\n                return new TableCheck({\n                  name: constraint[\"CONSTRAINT_NAME\"],\n                  columnNames: checks.map(function (c) {\n                    return c[\"COLUMN_NAME\"];\n                  }),\n                  expression: constraint[\"SEARCH_CONDITION\"]\n                });\n              }); // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n\n              var tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(function (dbForeignKey) {\n                return dbForeignKey[\"TABLE_NAME\"] === table.name;\n              }), function (dbForeignKey) {\n                return dbForeignKey[\"CONSTRAINT_NAME\"];\n              });\n              table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {\n                var foreignKeys = dbForeignKeys.filter(function (dbFk) {\n                  return dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"];\n                });\n                return new TableForeignKey({\n                  name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                  columnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"COLUMN_NAME\"];\n                  }),\n                  referencedTableName: dbForeignKey[\"REFERENCED_TABLE_NAME\"],\n                  referencedColumnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"REFERENCED_COLUMN_NAME\"];\n                  }),\n                  onDelete: dbForeignKey[\"ON_DELETE\"],\n                  onUpdate: \"NO ACTION\" // Oracle does not have onUpdate option in FK's, but we need it for proper synchronization\n\n                });\n              }); // create TableIndex objects from the loaded indices\n\n              table.indices = dbIndices.filter(function (dbIndex) {\n                return dbIndex[\"TABLE_NAME\"] === table.name;\n              }).map(function (dbIndex) {\n                return new TableIndex({\n                  name: dbIndex[\"INDEX_NAME\"],\n                  columnNames: dbIndex[\"COLUMN_NAMES\"].split(\",\"),\n                  isUnique: dbIndex[\"UNIQUENESS\"] === \"UNIQUE\"\n                });\n              });\n              return table;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Builds and returns SQL for create table.\n   */\n\n\n  OracleQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {\n    var _this = this;\n\n    var columnDefinitions = table.columns.map(function (column) {\n      return _this.buildCreateColumnSql(column);\n    }).join(\", \");\n    var sql = \"CREATE TABLE \\\"\" + table.name + \"\\\" (\" + columnDefinitions;\n    table.columns.filter(function (column) {\n      return column.isUnique;\n    }).forEach(function (column) {\n      var isUniqueExist = table.uniques.some(function (unique) {\n        return unique.columnNames.length === 1 && unique.columnNames[0] === column.name;\n      });\n      if (!isUniqueExist) table.uniques.push(new TableUnique({\n        name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n        columnNames: [column.name]\n      }));\n    });\n\n    if (table.uniques.length > 0) {\n      var uniquesSql = table.uniques.map(function (unique) {\n        var uniqueName = unique.name ? unique.name : _this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n        var columnNames = unique.columnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        return \"CONSTRAINT \\\"\" + uniqueName + \"\\\" UNIQUE (\" + columnNames + \")\";\n      }).join(\", \");\n      sql += \", \" + uniquesSql;\n    }\n\n    if (table.checks.length > 0) {\n      var checksSql = table.checks.map(function (check) {\n        var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);\n        return \"CONSTRAINT \\\"\" + checkName + \"\\\" CHECK (\" + check.expression + \")\";\n      }).join(\", \");\n      sql += \", \" + checksSql;\n    }\n\n    if (table.foreignKeys.length > 0 && createForeignKeys) {\n      var foreignKeysSql = table.foreignKeys.map(function (fk) {\n        var columnNames = fk.columnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        if (!fk.name) fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n        var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        var constraint = \"CONSTRAINT \\\"\" + fk.name + \"\\\" FOREIGN KEY (\" + columnNames + \") REFERENCES \\\"\" + fk.referencedTableName + \"\\\" (\" + referencedColumnNames + \")\";\n        if (fk.onDelete && fk.onDelete !== \"NO ACTION\") // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n          constraint += \" ON DELETE \" + fk.onDelete;\n        return constraint;\n      }).join(\", \");\n      sql += \", \" + foreignKeysSql;\n    }\n\n    var primaryColumns = table.columns.filter(function (column) {\n      return column.isPrimary;\n    });\n\n    if (primaryColumns.length > 0) {\n      var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(function (column) {\n        return column.name;\n      }));\n      var columnNames = primaryColumns.map(function (column) {\n        return \"\\\"\" + column.name + \"\\\"\";\n      }).join(\", \");\n      sql += \", CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNames + \")\";\n    }\n\n    sql += \")\";\n    return new Query(sql);\n  };\n  /**\n   * Builds drop table sql.\n   */\n\n\n  OracleQueryRunner.prototype.dropTableSql = function (tableOrName, ifExist) {\n    var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n    var query = ifExist ? \"DROP TABLE IF EXISTS \\\"\" + tableName + \"\\\"\" : \"DROP TABLE \\\"\" + tableName + \"\\\"\";\n    return new Query(query);\n  };\n\n  OracleQueryRunner.prototype.createViewSql = function (view) {\n    var materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n\n    if (typeof view.expression === \"string\") {\n      return new Query(\"CREATE \" + materializedClause + \"VIEW \\\"\" + view.name + \"\\\" AS \" + view.expression);\n    } else {\n      return new Query(\"CREATE \" + materializedClause + \"VIEW \\\"\" + view.name + \"\\\" AS \" + view.expression(this.connection).getQuery());\n    }\n  };\n\n  OracleQueryRunner.prototype.insertViewDefinitionSql = function (view) {\n    var expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n    var type = view.materialized ? \"MATERIALIZED_VIEW\" : \"VIEW\";\n\n    var _a = __read(this.connection.createQueryBuilder().insert().into(this.getTypeormMetadataTableName()).values({\n      type: type,\n      name: view.name,\n      value: expression\n    }).getQueryAndParameters(), 2),\n        query = _a[0],\n        parameters = _a[1];\n\n    return new Query(query, parameters);\n  };\n  /**\n   * Builds drop view sql.\n   */\n\n\n  OracleQueryRunner.prototype.dropViewSql = function (view) {\n    var materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n    return new Query(\"DROP \" + materializedClause + \"VIEW \\\"\" + view.name + \"\\\"\");\n  };\n  /**\n   * Builds remove view sql.\n   */\n\n\n  OracleQueryRunner.prototype.deleteViewDefinitionSql = function (view) {\n    var qb = this.connection.createQueryBuilder();\n    var type = view.materialized ? \"MATERIALIZED_VIEW\" : \"VIEW\";\n\n    var _a = __read(qb.delete().from(this.getTypeormMetadataTableName()).where(qb.escape(\"type\") + \" = :type\", {\n      type: type\n    }).andWhere(qb.escape(\"name\") + \" = :name\", {\n      name: view.name\n    }).getQueryAndParameters(), 2),\n        query = _a[0],\n        parameters = _a[1];\n\n    return new Query(query, parameters);\n  };\n  /**\n   * Builds create index sql.\n   */\n\n\n  OracleQueryRunner.prototype.createIndexSql = function (table, index) {\n    var columns = index.columnNames.map(function (columnName) {\n      return \"\\\"\" + columnName + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"CREATE \" + (index.isUnique ? \"UNIQUE \" : \"\") + \"INDEX \\\"\" + index.name + \"\\\" ON \\\"\" + table.name + \"\\\" (\" + columns + \")\");\n  };\n  /**\n   * Builds drop index sql.\n   */\n\n\n  OracleQueryRunner.prototype.dropIndexSql = function (indexOrName) {\n    var indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n    return new Query(\"DROP INDEX \\\"\" + indexName + \"\\\"\");\n  };\n  /**\n   * Builds create primary key sql.\n   */\n\n\n  OracleQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {\n    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n    var columnNamesString = columnNames.map(function (columnName) {\n      return \"\\\"\" + columnName + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\");\n  };\n  /**\n   * Builds drop primary key sql.\n   */\n\n\n  OracleQueryRunner.prototype.dropPrimaryKeySql = function (table) {\n    var columnNames = table.primaryColumns.map(function (column) {\n      return column.name;\n    });\n    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n    return new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + primaryKeyName + \"\\\"\");\n  };\n  /**\n   * Builds create unique constraint sql.\n   */\n\n\n  OracleQueryRunner.prototype.createUniqueConstraintSql = function (table, uniqueConstraint) {\n    var columnNames = uniqueConstraint.columnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\" + columnNames + \")\");\n  };\n  /**\n   * Builds drop unique constraint sql.\n   */\n\n\n  OracleQueryRunner.prototype.dropUniqueConstraintSql = function (table, uniqueOrName) {\n    var uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n    return new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + uniqueName + \"\\\"\");\n  };\n  /**\n   * Builds create check constraint sql.\n   */\n\n\n  OracleQueryRunner.prototype.createCheckConstraintSql = function (table, checkConstraint) {\n    return new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + checkConstraint.name + \"\\\" CHECK (\" + checkConstraint.expression + \")\");\n  };\n  /**\n   * Builds drop check constraint sql.\n   */\n\n\n  OracleQueryRunner.prototype.dropCheckConstraintSql = function (table, checkOrName) {\n    var checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n    return new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + checkName + \"\\\"\");\n  };\n  /**\n   * Builds create foreign key sql.\n   */\n\n\n  OracleQueryRunner.prototype.createForeignKeySql = function (table, foreignKey) {\n    var columnNames = foreignKey.columnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\", \");\n    var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\",\");\n    var sql = \"ALTER TABLE \\\"\" + table.name + \"\\\" ADD CONSTRAINT \\\"\" + foreignKey.name + \"\\\" FOREIGN KEY (\" + columnNames + \") \" + (\"REFERENCES \\\"\" + foreignKey.referencedTableName + \"\\\" (\" + referencedColumnNames + \")\"); // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n\n    if (foreignKey.onDelete && foreignKey.onDelete !== \"NO ACTION\") sql += \" ON DELETE \" + foreignKey.onDelete;\n    return new Query(sql);\n  };\n  /**\n   * Builds drop foreign key sql.\n   */\n\n\n  OracleQueryRunner.prototype.dropForeignKeySql = function (table, foreignKeyOrName) {\n    var foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n    return new Query(\"ALTER TABLE \\\"\" + table.name + \"\\\" DROP CONSTRAINT \\\"\" + foreignKeyName + \"\\\"\");\n  };\n  /**\n   * Builds a query for create column.\n   */\n\n\n  OracleQueryRunner.prototype.buildCreateColumnSql = function (column) {\n    var c = \"\\\"\" + column.name + \"\\\" \" + this.connection.driver.createFullType(column);\n    if (column.charset) c += \" CHARACTER SET \" + column.charset;\n    if (column.collation) c += \" COLLATE \" + column.collation;\n    if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL\n      c += \" DEFAULT \" + column.default;\n    if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n      c += \" NOT NULL\";\n    if (column.isGenerated === true && column.generationStrategy === \"increment\") c += \" GENERATED BY DEFAULT AS IDENTITY\";\n    return c;\n  };\n\n  return OracleQueryRunner;\n}(BaseQueryRunner);\n\nexport { OracleQueryRunner };","map":{"version":3,"sources":["../browser/src/driver/oracle/OracleQueryRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Query} from \"../Query\";\nimport {OracleDriver} from \"./OracleDriver\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {ColumnType} from \"../../index\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n/**\n * Runs queries on a single oracle database connection.\n */\nexport class OracleQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: OracleDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: OracleDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(connection => {\n                this.databaseConnection = connection;\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.isReleased = true;\n            if (this.databaseConnection) {\n                this.databaseConnection.close((err: any) => {\n                    if (err)\n                        return fail(err);\n\n                    ok();\n                });\n            } else {\n                ok();\n            }\n        });\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel: IsolationLevel = \"READ COMMITTED\"): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        // await this.query(\"START TRANSACTION\");\n        if (isolationLevel !== \"SERIALIZABLE\" && isolationLevel !== \"READ COMMITTED\") {\n            throw new Error(`Oracle only supports SERIALIZABLE and READ COMMITTED isolation`);\n        }\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n        this.isTransactionActive = true;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const queryStartTime = +new Date();\n\n                const handler = (err: any, result: any) => {\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    if (err) {\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        return fail(new QueryFailedError(query, parameters, err));\n                    }\n                    // TODO: find better solution. Must return result instead of properties\n                    ok(result.rows || result.outBinds || result.rowsAffected);\n                };\n                const executionOptions = {\n                    autoCommit: this.isTransactionActive ? false : true\n                };\n\n                const databaseConnection = await this.connect();\n                databaseConnection.execute(query, parameters || {}, executionOptions, handler);\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by Oracle driver.`);\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<undefined> {\n        const query = await this.query(`SELECT SYS_CONTEXT('USERENV','DB_NAME') AS \"db_name\" FROM dual`)\n        return query[0][\"db_name\"]\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const query = await this.query(`SELECT SYS_CONTEXT('USERENV','CURRENT_SCHEMA') AS \"schema_name\" FROM dual`)\n        return query[0][\"schema_name\"]\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT \"TABLE_NAME\" FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT \"COLUMN_NAME\" FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" = '${tableName}' AND \"COLUMN_NAME\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        await this.query(`CREATE DATABASE IF NOT EXISTS \"${database}\"`);\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schemas: string, ifNotExist?: boolean): Promise<void> {\n        throw new Error(`Schema create queries are not supported by Oracle driver.`);\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        throw new Error(`Schema drop queries are not supported by Oracle driver.`);\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {// It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableOrName: Table|string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        let newTable = oldTable.clone();\n\n        if (newTableOrName instanceof Table) {\n            newTable = newTableOrName;\n        } else {\n            newTable.name = newTableOrName;\n        }\n\n        // rename table\n        upQueries.push(new Query(`ALTER TABLE \"${oldTable.name}\" RENAME TO \"${newTable.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME TO \"${oldTable.name}\"`));\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            upQueries.push(new Query(`ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`));\n            downQueries.push(new Query(`ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD ${this.buildCreateColumnSql(column)}`));\n        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length) {\n            // Oracle does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // rename column\n                upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME COLUMN \"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME COLUMN \"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                // rename column primary key constraint\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n                }\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`));\n                    downQueries.push(new Query(`ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\n                let defaultUp: string = \"\";\n                let defaultDown: string = \"\";\n                let nullableUp:  string = \"\";\n                let nullableDown:  string = \"\";\n\n                // changing column default\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    defaultUp = `DEFAULT ${newColumn.default}`;\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        defaultDown = `DEFAULT ${oldColumn.default}`;\n                    } else {\n                        defaultDown = \"DEFAULT NULL\";\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    defaultUp = \"DEFAULT NULL\";\n                    defaultDown = `DEFAULT ${oldColumn.default}`;\n                }\n\n                // changing column isNullable property\n                if (newColumn.isNullable !== oldColumn.isNullable) {\n                    if (newColumn.isNullable === true) {\n                        nullableUp = \"NULL\";\n                        nullableDown = \"NOT NULL\";\n                    } else {\n                        nullableUp = \"NOT NULL\";\n                        nullableDown = \"NULL\";\n                    }\n                }\n\n                upQueries.push(new Query(`ALTER TABLE \"${table.name}\" MODIFY \"${oldColumn.name}\" ${this.connection.driver.createFullType(newColumn)} ${defaultUp} ${nullableUp}`));\n                downQueries.push(new Query(`ALTER TABLE \"${table.name}\" MODIFY \"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} ${defaultDown} ${nullableDown}`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE \"${clonedTable.name}\" DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.dropIndexSql(columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD ${this.buildCreateColumnSql(column)}`));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const columnNames = columns.map(column => column.name);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`Oracle does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            // drop views\n            const dropViewsQuery = `SELECT 'DROP VIEW \"' || VIEW_NAME || '\"' AS \"query\" FROM \"USER_VIEWS\"`;\n            const dropViewQueries: ObjectLiteral[] = await this.query(dropViewsQuery);\n            await Promise.all(dropViewQueries.map(query => this.query(query[\"query\"])));\n\n            // drop materialized views\n            const dropMatViewsQuery = `SELECT 'DROP MATERIALIZED VIEW \"' || MVIEW_NAME || '\"' AS \"query\" FROM \"USER_MVIEWS\"`;\n            const dropMatViewQueries: ObjectLiteral[] = await this.query(dropMatViewsQuery);\n            await Promise.all(dropMatViewQueries.map(query => this.query(query[\"query\"])));\n\n            // drop tables\n            const dropTablesQuery = `SELECT 'DROP TABLE \"' || TABLE_NAME || '\" CASCADE CONSTRAINTS' AS \"query\" FROM \"USER_TABLES\"`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(dropTablesQuery);\n            await Promise.all(dropTableQueries.map(query => this.query(query[\"query\"])));\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const viewNamesString = viewNames.map(name => \"'\" + name + \"'\").join(\", \");\n        let query = `SELECT \"T\".* FROM \"${this.getTypeormMetadataTableName()}\" \"T\" ` +\n            `INNER JOIN \"USER_OBJECTS\" \"O\" ON \"O\".\"OBJECT_NAME\" = \"T\".\"name\" AND \"O\".\"OBJECT_TYPE\" IN ( 'MATERIALIZED VIEW', 'VIEW' ) ` +\n            `WHERE \"T\".\"type\" IN ( 'MATERIALIZED_VIEW', 'VIEW' )`;\n        if (viewNamesString.length > 0)\n            query += ` AND \"T\".\"name\" IN (${viewNamesString})`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            view.name = dbView[\"name\"];\n            view.expression = dbView[\"value\"];\n            view.materialized = dbView[\"type\"] === \"MATERIALIZED_VIEW\";\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames.map(name => \"'\" + name + \"'\").join(\", \");\n        const tablesSql = `SELECT * FROM \"USER_TABLES\" WHERE \"TABLE_NAME\" IN (${tableNamesString})`;\n        const columnsSql = `SELECT * FROM \"USER_TAB_COLS\" WHERE \"TABLE_NAME\" IN (${tableNamesString})`;\n\n        const indicesSql = `SELECT \"IND\".\"INDEX_NAME\", \"IND\".\"TABLE_NAME\", \"IND\".\"UNIQUENESS\", ` +\n            `LISTAGG (\"COL\".\"COLUMN_NAME\", ',') WITHIN GROUP (ORDER BY \"COL\".\"COLUMN_NAME\") AS \"COLUMN_NAMES\" ` +\n            `FROM \"USER_INDEXES\" \"IND\" ` +\n            `INNER JOIN \"USER_IND_COLUMNS\" \"COL\" ON \"COL\".\"INDEX_NAME\" = \"IND\".\"INDEX_NAME\" ` +\n            `LEFT JOIN \"USER_CONSTRAINTS\" \"CON\" ON \"CON\".\"CONSTRAINT_NAME\" = \"IND\".\"INDEX_NAME\" ` +\n            `WHERE \"IND\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"CON\".\"CONSTRAINT_NAME\" IS NULL ` +\n            `GROUP BY \"IND\".\"INDEX_NAME\", \"IND\".\"TABLE_NAME\", \"IND\".\"UNIQUENESS\"`;\n\n        const foreignKeysSql = `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"REF_COL\".\"TABLE_NAME\" AS \"REFERENCED_TABLE_NAME\", ` +\n            `\"REF_COL\".\"COLUMN_NAME\" AS \"REFERENCED_COLUMN_NAME\", \"C\".\"DELETE_RULE\" AS \"ON_DELETE\" ` +\n            `FROM \"USER_CONSTRAINTS\" \"C\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"REF_COL\" ON \"REF_COL\".\"OWNER\" = \"C\".\"R_OWNER\" AND \"REF_COL\".\"CONSTRAINT_NAME\" = \"C\".\"R_CONSTRAINT_NAME\" AND \"REF_COL\".\"POSITION\" = \"COL\".\"POSITION\" ` +\n            `WHERE \"C\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"C\".\"CONSTRAINT_TYPE\" = 'R'`;\n\n        const constraintsSql = `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"CONSTRAINT_TYPE\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"C\".\"SEARCH_CONDITION\" ` +\n            `FROM \"USER_CONSTRAINTS\" \"C\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `WHERE \"C\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"C\".\"CONSTRAINT_TYPE\" IN ('C', 'U', 'P') AND \"C\".\"GENERATED\" = 'USER NAME'`;\n\n        const [dbTables, dbColumns, dbIndices, dbForeignKeys, dbConstraints]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n            this.query(constraintsSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create tables for loaded tables\n        return dbTables.map(dbTable => {\n            const table = new Table();\n            table.name = dbTable[\"TABLE_NAME\"];\n\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter(dbColumn => dbColumn[\"TABLE_NAME\"] === table.name)\n                .map(dbColumn => {\n                    const columnConstraints = dbConstraints.filter(dbConstraint => dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"]);\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"U\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\"\n                            && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\n                            && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n                    const isUnique = !!uniqueConstraint && !isConstraintComposite;\n\n                    const isPrimary = !!columnConstraints.find(constraint =>  constraint[\"CONSTRAINT_TYPE\"] === \"P\");\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                    if (tableColumn.type.indexOf(\"(\") !== -1)\n                        tableColumn.type = tableColumn.type.replace(/\\([0-9]*\\)/, \"\");\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1) {\n                        const length = tableColumn.type === \"raw\" ? dbColumn[\"DATA_LENGTH\"] : dbColumn[\"CHAR_COL_DECL_LENGTH\"];\n                        tableColumn.length = length && !this.isDefaultColumnLength(table, tableColumn, length) ? length.toString() : \"\";\n                    }\n\n                    if (tableColumn.type === \"number\" || tableColumn.type === \"float\") {\n                        if (dbColumn[\"DATA_PRECISION\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATA_PRECISION\"]))\n                            tableColumn.precision = dbColumn[\"DATA_PRECISION\"];\n                        if (dbColumn[\"DATA_SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"DATA_SCALE\"]))\n                            tableColumn.scale = dbColumn[\"DATA_SCALE\"];\n\n                    } else if ((tableColumn.type === \"timestamp\"\n                        || tableColumn.type === \"timestamp with time zone\"\n                        || tableColumn.type === \"timestamp with local time zone\") && dbColumn[\"DATA_SCALE\"] !== null) {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATA_SCALE\"]) ? dbColumn[\"DATA_SCALE\"] : undefined;\n                    }\n\n                    tableColumn.default = dbColumn[\"DATA_DEFAULT\"] !== null\n                        && dbColumn[\"DATA_DEFAULT\"] !== undefined\n                        && dbColumn[\"DATA_DEFAULT\"].trim() !== \"NULL\" ? tableColumn.default = dbColumn[\"DATA_DEFAULT\"].trim() : undefined;\n\n                    tableColumn.isNullable = dbColumn[\"NULLABLE\"] === \"Y\";\n                    tableColumn.isUnique = isUnique;\n                    tableColumn.isPrimary = isPrimary;\n                    tableColumn.isGenerated = dbColumn[\"IDENTITY_COLUMN\"] === \"YES\";\n                    if (tableColumn.isGenerated) {\n                        tableColumn.generationStrategy = \"increment\";\n                        tableColumn.default = undefined;\n                    }\n                    tableColumn.comment = \"\"; // todo\n                    return tableColumn;\n                });\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableUnique({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: uniques.map(u => u[\"COLUMN_NAME\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return dbConstraint[\"TABLE_NAME\"] === table.name && dbConstraint[\"CONSTRAINT_TYPE\"] === \"C\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"SEARCH_CONDITION\"]\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return dbForeignKey[\"TABLE_NAME\"] === table.name;\n            }), dbForeignKey => dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: dbForeignKey[\"REFERENCED_TABLE_NAME\"],\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"ON_DELETE\"],\n                    onUpdate: \"NO ACTION\", // Oracle does not have onUpdate option in FK's, but we need it for proper synchronization\n                });\n            });\n\n            // create TableIndex objects from the loaded indices\n            table.indices = dbIndices\n                .filter(dbIndex => dbIndex[\"TABLE_NAME\"] === table.name)\n                .map(dbIndex => {\n                    return new TableIndex({\n                        name: dbIndex[\"INDEX_NAME\"],\n                        columnNames: dbIndex[\"COLUMN_NAMES\"].split(\",\"),\n                        isUnique: dbIndex[\"UNIQUENESS\"] === \"UNIQUE\"\n                    });\n                });\n\n            return table;\n        });\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES \"${fk.referencedTableName}\" (${referencedColumnNames})`;\n                if (fk.onDelete && fk.onDelete !== \"NO ACTION\") // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const query = ifExist ? `DROP TABLE IF EXISTS \"${tableName}\"` : `DROP TABLE \"${tableName}\"`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE ${materializedClause}VIEW \"${view.name}\" AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE ${materializedClause}VIEW \"${view.name}\" AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected insertViewDefinitionSql(view: View): Query {\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const type = view.materialized ? \"MATERIALIZED_VIEW\" : \"VIEW\"\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: type, name: view.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        return new Query(`DROP ${materializedClause}VIEW \"${view.name}\"`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected deleteViewDefinitionSql(view: View): Query {\n        const qb = this.connection.createQueryBuilder();\n        const type = view.materialized ? \"MATERIALIZED_VIEW\" : \"VIEW\"\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = :type`, { type })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: view.name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON \"${table.name}\" (${columns})`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\"`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\" (${referencedColumnNames})`;\n        // Oracle does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n        if (foreignKey.onDelete && foreignKey.onDelete !== \"NO ACTION\")\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c = `\"${column.name}\" ` + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \" + column.charset;\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL\n            c += \" DEFAULT \" + column.default;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\")\n            c += \" GENERATED BY DEFAULT AS IDENTITY\";\n\n        return c;\n    }\n\n\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}