{"ast":null,"code":"/**\n * Unique metadata contains all information about table's unique constraints.\n */\nvar UniqueMetadata =\n/** @class */\nfunction () {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  function UniqueMetadata(options) {\n    /**\n     * Unique columns.\n     */\n    this.columns = [];\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n\n    this.columnNamesWithOrderingMap = {};\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    if (options.columns) this.columns = options.columns;\n\n    if (options.args) {\n      this.target = options.args.target;\n      this.givenName = options.args.name;\n      this.givenColumnNames = options.args.columns;\n    }\n  } // ---------------------------------------------------------------------\n  // Public Build Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Builds some depend unique constraint properties.\n   * Must be called after all entity metadata's properties map, columns and relations are built.\n   */\n\n\n  UniqueMetadata.prototype.build = function (namingStrategy) {\n    var _this = this;\n\n    var map = {}; // if columns already an array of string then simply return it\n\n    if (this.givenColumnNames) {\n      var columnPropertyPaths = [];\n\n      if (Array.isArray(this.givenColumnNames)) {\n        columnPropertyPaths = this.givenColumnNames.map(function (columnName) {\n          if (_this.embeddedMetadata) return _this.embeddedMetadata.propertyPath + \".\" + columnName;\n          return columnName.trim();\n        });\n        columnPropertyPaths.forEach(function (propertyPath) {\n          return map[propertyPath] = 1;\n        });\n      } else {\n        // if columns is a function that returns array of field names then execute it and get columns names from it\n        var columnsFnResult_1 = this.givenColumnNames(this.entityMetadata.propertiesMap);\n\n        if (Array.isArray(columnsFnResult_1)) {\n          columnPropertyPaths = columnsFnResult_1.map(function (i) {\n            return String(i);\n          });\n          columnPropertyPaths.forEach(function (name) {\n            return map[name] = 1;\n          });\n        } else {\n          columnPropertyPaths = Object.keys(columnsFnResult_1).map(function (i) {\n            return String(i);\n          });\n          Object.keys(columnsFnResult_1).forEach(function (columnName) {\n            return map[columnName] = columnsFnResult_1[columnName];\n          });\n        }\n      }\n\n      this.columns = columnPropertyPaths.map(function (propertyName) {\n        var columnWithSameName = _this.entityMetadata.columns.find(function (column) {\n          return column.propertyPath === propertyName;\n        });\n\n        if (columnWithSameName) {\n          return [columnWithSameName];\n        }\n\n        var relationWithSameName = _this.entityMetadata.relations.find(function (relation) {\n          return relation.isWithJoinColumn && relation.propertyName === propertyName;\n        });\n\n        if (relationWithSameName) {\n          return relationWithSameName.joinColumns;\n        }\n\n        var indexName = _this.givenName ? \"\\\"\" + _this.givenName + \"\\\" \" : \"\";\n        var entityName = _this.entityMetadata.targetName;\n        throw new Error(\"Unique constraint \" + indexName + \"contains column that is missing in the entity (\" + entityName + \"): \" + propertyName);\n      }).reduce(function (a, b) {\n        return a.concat(b);\n      });\n    }\n\n    this.columnNamesWithOrderingMap = Object.keys(map).reduce(function (updatedMap, key) {\n      var column = _this.entityMetadata.columns.find(function (column) {\n        return column.propertyPath === key;\n      });\n\n      if (column) updatedMap[column.databasePath] = map[key];\n      return updatedMap;\n    }, {});\n    this.name = this.givenName ? this.givenName : namingStrategy.uniqueConstraintName(this.entityMetadata.tablePath, this.columns.map(function (column) {\n      return column.databaseName;\n    }));\n    return this;\n  };\n\n  return UniqueMetadata;\n}();\n\nexport { UniqueMetadata };","map":{"version":3,"sources":["../browser/src/metadata/UniqueMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import {EmbeddedMetadata} from \"./EmbeddedMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {ColumnMetadata} from \"./ColumnMetadata\";\nimport {UniqueMetadataArgs} from \"../metadata-args/UniqueMetadataArgs\";\n\n/**\n * Unique metadata contains all information about table's unique constraints.\n */\nexport class UniqueMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the class to which this unique constraint is applied.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata if this unique was applied on embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     */\n    target?: Function|string;\n\n    /**\n     * Unique columns.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * User specified unique constraint name.\n     */\n    givenName?: string;\n\n    /**\n     * User specified column names.\n     */\n    givenColumnNames?: ((object?: any) => (any[]|{ [key: string]: number }))|string[];\n\n    /**\n     * Final unique constraint name.\n     * If unique constraint name was given by a user then it stores normalized (by naming strategy) givenName.\n     * If unique constraint name was not given then its generated.\n     */\n    name: string;\n\n    /**\n     * Map of column names with order set.\n     * Used only by MongoDB driver.\n     */\n    columnNamesWithOrderingMap: { [key: string]: number } = {};\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        embeddedMetadata?: EmbeddedMetadata,\n        columns?: ColumnMetadata[],\n        args?: UniqueMetadataArgs\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        if (options.columns)\n            this.columns = options.columns;\n\n        if (options.args) {\n            this.target = options.args.target;\n            this.givenName = options.args.name;\n            this.givenColumnNames = options.args.columns;\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Build Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend unique constraint properties.\n     * Must be called after all entity metadata's properties map, columns and relations are built.\n     */\n    build(namingStrategy: NamingStrategyInterface): this {\n\n        const map: { [key: string]: number } = {};\n\n        // if columns already an array of string then simply return it\n        if (this.givenColumnNames) {\n            let columnPropertyPaths: string[] = [];\n            if (Array.isArray(this.givenColumnNames)) {\n                columnPropertyPaths = this.givenColumnNames.map(columnName => {\n                    if (this.embeddedMetadata)\n                        return this.embeddedMetadata.propertyPath + \".\" + columnName;\n\n                    return columnName.trim();\n                });\n                columnPropertyPaths.forEach(propertyPath => map[propertyPath] = 1);\n            } else {\n                // if columns is a function that returns array of field names then execute it and get columns names from it\n                const columnsFnResult = this.givenColumnNames(this.entityMetadata.propertiesMap);\n                if (Array.isArray(columnsFnResult)) {\n                    columnPropertyPaths = columnsFnResult.map((i: any) => String(i));\n                    columnPropertyPaths.forEach(name => map[name] = 1);\n                } else {\n                    columnPropertyPaths = Object.keys(columnsFnResult).map((i: any) => String(i));\n                    Object.keys(columnsFnResult).forEach(columnName => map[columnName] = columnsFnResult[columnName]);\n                }\n            }\n\n            this.columns = columnPropertyPaths.map(propertyName => {\n                const columnWithSameName = this.entityMetadata.columns.find(column => column.propertyPath === propertyName);\n                if (columnWithSameName) {\n                    return [columnWithSameName];\n                }\n                const relationWithSameName = this.entityMetadata.relations.find(relation => relation.isWithJoinColumn && relation.propertyName === propertyName);\n                if (relationWithSameName) {\n                    return relationWithSameName.joinColumns;\n                }\n                const indexName = this.givenName ? \"\\\"\" + this.givenName + \"\\\" \" : \"\";\n                const entityName = this.entityMetadata.targetName;\n                throw new Error(`Unique constraint ${indexName}contains column that is missing in the entity (${entityName}): ` + propertyName);\n            })\n            .reduce((a, b) => a.concat(b));\n        }\n\n        this.columnNamesWithOrderingMap = Object.keys(map).reduce((updatedMap, key) => {\n            const column = this.entityMetadata.columns.find(column => column.propertyPath === key);\n            if (column)\n                updatedMap[column.databasePath] = map[key];\n\n            return updatedMap;\n        }, {} as { [key: string]: number });\n\n        this.name = this.givenName ? this.givenName : namingStrategy.uniqueConstraintName(this.entityMetadata.tablePath, this.columns.map(column => column.databaseName));\n        return this;\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}