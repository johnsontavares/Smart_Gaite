{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\n/**\n * Database's table unique constraint stored in this class.\n */\n\nvar TableUnique =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function TableUnique(options) {\n    /**\n     * Columns that contains this constraint.\n     */\n    this.columnNames = [];\n    this.name = options.name;\n    this.columnNames = options.columnNames;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new copy of this constraint with exactly same properties.\n   */\n\n\n  TableUnique.prototype.clone = function () {\n    return new TableUnique({\n      name: this.name,\n      columnNames: __spreadArray([], __read(this.columnNames))\n    });\n  }; // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates unique from the unique metadata object.\n   */\n\n\n  TableUnique.create = function (uniqueMetadata) {\n    return new TableUnique({\n      name: uniqueMetadata.name,\n      columnNames: uniqueMetadata.columns.map(function (column) {\n        return column.databaseName;\n      })\n    });\n  };\n\n  return TableUnique;\n}();\n\nexport { TableUnique };","map":{"version":3,"sources":["../browser/src/schema-builder/table/TableUnique.ts"],"names":[],"mappings":";AAGA;;AAEG;;AACH,IAAA,WAAA;AAAA;AAAA,YAAA;AAgBI;AACA;AACA;AAEA,WAAA,WAAA,CAAY,OAAZ,EAAuC;AATvC;;AAEG;AACH,SAAA,WAAA,GAAwB,EAAxB;AAOI,SAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,SAAK,WAAL,GAAmB,OAAO,CAAC,WAA3B;AACH,GAvBL,CAyBI;AACA;AACA;;AAEA;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACI,WAAO,IAAI,WAAJ,CAAoC;AACvC,MAAA,IAAI,EAAE,KAAK,IAD4B;AAEvC,MAAA,WAAW,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAM,KAAK,WAAX,CAAA;AAF4B,KAApC,CAAP;AAIH,GALD,CAhCJ,CAuCI;AACA;AACA;;AAEA;;AAEG;;;AACI,EAAA,WAAA,CAAA,MAAA,GAAP,UAAc,cAAd,EAA4C;AACxC,WAAO,IAAI,WAAJ,CAAoC;AACvC,MAAA,IAAI,EAAE,cAAc,CAAC,IADkB;AAEvC,MAAA,WAAW,EAAE,cAAc,CAAC,OAAf,CAAuB,GAAvB,CAA2B,UAAA,MAAA,EAAM;AAAI,eAAA,MAAM,CAAN,YAAA;AAAmB,OAAxD;AAF0B,KAApC,CAAP;AAIH,GALM;;AAOX,SAAA,WAAA;AAAC,CArDD,EAAA","sourcesContent":["import {TableUniqueOptions} from \"../options/TableUniqueOptions\";\nimport {UniqueMetadata} from \"../../metadata/UniqueMetadata\";\n\n/**\n * Database's table unique constraint stored in this class.\n */\nexport class TableUnique {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Constraint name.\n     */\n    name?: string;\n\n    /**\n     * Columns that contains this constraint.\n     */\n    columnNames: string[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableUniqueOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this constraint with exactly same properties.\n     */\n    clone(): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames]\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates unique from the unique metadata object.\n     */\n    static create(uniqueMetadata: UniqueMetadata): TableUnique {\n        return new TableUnique(<TableUniqueOptions>{\n            name: uniqueMetadata.name,\n            columnNames: uniqueMetadata.columns.map(column => column.databaseName)\n        });\n    }\n\n}"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}