{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CordovaQueryRunner } from \"./CordovaQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\n\nvar CordovaDriver =\n/** @class */\nfunction (_super) {\n  __extends(CordovaDriver, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function CordovaDriver(connection) {\n    var _this = _super.call(this, connection) || this; // this.connection = connection;\n    // this.options = connection.options as CordovaConnectionOptions;\n\n\n    _this.database = _this.options.database; // validate options to make sure everything is set\n\n    if (!_this.options.database) throw new DriverOptionNotSetError(\"database\");\n    if (!_this.options.location) throw new DriverOptionNotSetError(\"location\"); // load sqlite package\n\n    _this.loadDependencies();\n\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Closes connection with database.\n   */\n\n\n  CordovaDriver.prototype.disconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (ok, fail) {\n          _this.queryRunner = undefined;\n\n          _this.databaseConnection.close(ok, fail);\n        })];\n      });\n    });\n  };\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  CordovaDriver.prototype.createQueryRunner = function (mode) {\n    if (!this.queryRunner) this.queryRunner = new CordovaQueryRunner(this);\n    return this.queryRunner;\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   */\n\n\n  CordovaDriver.prototype.createDatabaseConnection = function () {\n    var _this = this;\n\n    return new Promise(function (ok, fail) {\n      var options = Object.assign({}, {\n        name: _this.options.database,\n        location: _this.options.location\n      }, _this.options.extra || {});\n\n      _this.sqlite.openDatabase(options, function (db) {\n        var databaseConnection = db; // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n\n        databaseConnection.executeSql(\"PRAGMA foreign_keys = ON;\", [], function (result) {\n          ok(databaseConnection);\n        }, function (error) {\n          fail(error);\n        });\n      }, function (error) {\n        fail(error);\n      });\n    });\n  };\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n\n\n  CordovaDriver.prototype.loadDependencies = function () {\n    try {\n      this.sqlite = window.sqlitePlugin;\n    } catch (e) {\n      throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n    }\n  };\n\n  return CordovaDriver;\n}(AbstractSqliteDriver);\n\nexport { CordovaDriver };","map":{"version":3,"sources":["../browser/src/driver/cordova/CordovaDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {CordovaConnectionOptions} from \"./CordovaConnectionOptions\";\nimport {CordovaQueryRunner} from \"./CordovaQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n// needed for typescript compiler\ninterface Window {\n    sqlitePlugin: any;\n}\n\ndeclare var window: Window;\n\nexport class CordovaDriver extends AbstractSqliteDriver {\n    options: CordovaConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        // this.connection = connection;\n        // this.options = connection.options as CordovaConnectionOptions;\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        if (!this.options.location)\n            throw new DriverOptionNotSetError(\"location\");\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close(ok, fail);\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new CordovaQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign({}, {\n                name: this.options.database,\n                location: this.options.location,\n            }, this.options.extra || {});\n\n            this.sqlite.openDatabase(options, (db: any) => {\n                const databaseConnection = db;\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete to work with sqlite.\n                databaseConnection.executeSql(`PRAGMA foreign_keys = ON;`, [], (result: any) => {\n                    ok(databaseConnection);\n                }, (error: any) => {\n                    fail(error);\n                });\n            }, (error: any) => {\n                fail(error);\n            });\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.sqlite = window.sqlitePlugin;\n\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"Cordova-SQLite\", \"cordova-sqlite-storage\");\n        }\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}