{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { importClassesFromDirectories } from \"../util/DirectoryExportedClassesLoader\";\nimport { OrmUtils } from \"../util/OrmUtils\";\nimport { getFromContainer } from \"../container\";\nimport { getMetadataArgsStorage } from \"../index\";\nimport { EntityMetadataBuilder } from \"../metadata-builder/EntityMetadataBuilder\";\nimport { EntitySchemaTransformer } from \"../entity-schema/EntitySchemaTransformer\";\nimport { EntitySchema } from \"../entity-schema/EntitySchema\";\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\n\nvar ConnectionMetadataBuilder =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function ConnectionMetadataBuilder(connection) {\n    this.connection = connection;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Builds migration instances for the given classes or directories.\n   */\n\n\n  ConnectionMetadataBuilder.prototype.buildMigrations = function (migrations) {\n    var _a = __read(OrmUtils.splitClassesAndStrings(migrations), 2),\n        migrationClasses = _a[0],\n        migrationDirectories = _a[1];\n\n    var allMigrationClasses = __spreadArray(__spreadArray([], __read(migrationClasses)), __read(importClassesFromDirectories(this.connection.logger, migrationDirectories)));\n\n    return allMigrationClasses.map(function (migrationClass) {\n      return getFromContainer(migrationClass);\n    });\n  };\n  /**\n   * Builds subscriber instances for the given classes or directories.\n   */\n\n\n  ConnectionMetadataBuilder.prototype.buildSubscribers = function (subscribers) {\n    var _a = __read(OrmUtils.splitClassesAndStrings(subscribers || []), 2),\n        subscriberClasses = _a[0],\n        subscriberDirectories = _a[1];\n\n    var allSubscriberClasses = __spreadArray(__spreadArray([], __read(subscriberClasses)), __read(importClassesFromDirectories(this.connection.logger, subscriberDirectories)));\n\n    return getMetadataArgsStorage().filterSubscribers(allSubscriberClasses).map(function (metadata) {\n      return getFromContainer(metadata.target);\n    });\n  };\n  /**\n   * Builds entity metadatas for the given classes or directories.\n   */\n\n\n  ConnectionMetadataBuilder.prototype.buildEntityMetadatas = function (entities) {\n    // todo: instead we need to merge multiple metadata args storages\n    var _a = __read(OrmUtils.splitClassesAndStrings(entities || []), 2),\n        entityClassesOrSchemas = _a[0],\n        entityDirectories = _a[1];\n\n    var entityClasses = entityClassesOrSchemas.filter(function (entityClass) {\n      return entityClass instanceof EntitySchema === false;\n    });\n    var entitySchemas = entityClassesOrSchemas.filter(function (entityClass) {\n      return entityClass instanceof EntitySchema;\n    });\n\n    var allEntityClasses = __spreadArray(__spreadArray([], __read(entityClasses)), __read(importClassesFromDirectories(this.connection.logger, entityDirectories)));\n\n    allEntityClasses.forEach(function (entityClass) {\n      if (entityClass instanceof EntitySchema) {\n        entitySchemas.push(entityClass);\n      }\n    });\n    var decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n    var metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\n    var schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n    return __spreadArray(__spreadArray([], __read(decoratorEntityMetadatas)), __read(schemaEntityMetadatas));\n  };\n\n  return ConnectionMetadataBuilder;\n}();\n\nexport { ConnectionMetadataBuilder };","map":{"version":3,"sources":["../browser/src/connection/ConnectionMetadataBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {importClassesFromDirectories} from \"../util/DirectoryExportedClassesLoader\";\nimport {OrmUtils} from \"../util/OrmUtils\";\nimport {getFromContainer} from \"../container\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {getMetadataArgsStorage} from \"../index\";\nimport {EntityMetadataBuilder} from \"../metadata-builder/EntityMetadataBuilder\";\nimport {EntitySchemaTransformer} from \"../entity-schema/EntitySchemaTransformer\";\nimport {Connection} from \"./Connection\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\n\n/**\n * Builds migration instances, subscriber instances and entity metadatas for the given classes.\n */\nexport class ConnectionMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds migration instances for the given classes or directories.\n     */\n    buildMigrations(migrations: (Function|string)[]): MigrationInterface[] {\n        const [migrationClasses, migrationDirectories] = OrmUtils.splitClassesAndStrings(migrations);\n        const allMigrationClasses = [...migrationClasses, ...importClassesFromDirectories(this.connection.logger, migrationDirectories)];\n        return allMigrationClasses.map(migrationClass => getFromContainer<MigrationInterface>(migrationClass));\n    }\n\n    /**\n     * Builds subscriber instances for the given classes or directories.\n     */\n    buildSubscribers(subscribers: (Function|string)[]): EntitySubscriberInterface<any>[] {\n        const [subscriberClasses, subscriberDirectories] = OrmUtils.splitClassesAndStrings(subscribers || []);\n        const allSubscriberClasses = [...subscriberClasses, ...importClassesFromDirectories(this.connection.logger, subscriberDirectories)];\n        return getMetadataArgsStorage()\n            .filterSubscribers(allSubscriberClasses)\n            .map(metadata => getFromContainer<EntitySubscriberInterface<any>>(metadata.target));\n    }\n\n    /**\n     * Builds entity metadatas for the given classes or directories.\n     */\n    buildEntityMetadatas(entities: (Function|EntitySchema<any>|string)[]): EntityMetadata[] {\n        // todo: instead we need to merge multiple metadata args storages\n\n        const [entityClassesOrSchemas, entityDirectories] = OrmUtils.splitClassesAndStrings(entities || []);\n        const entityClasses: Function[] = entityClassesOrSchemas.filter(entityClass => (entityClass instanceof EntitySchema) === false) as any;\n        const entitySchemas: EntitySchema<any>[] = entityClassesOrSchemas.filter(entityClass => entityClass instanceof EntitySchema) as any;\n\n        const allEntityClasses = [...entityClasses, ...importClassesFromDirectories(this.connection.logger, entityDirectories)];\n        allEntityClasses.forEach(entityClass => { // if we have entity schemas loaded from directories\n            if (entityClass instanceof EntitySchema) {\n                entitySchemas.push(entityClass);\n            }\n        });\n        const decoratorEntityMetadatas = new EntityMetadataBuilder(this.connection, getMetadataArgsStorage()).build(allEntityClasses);\n\n        const metadataArgsStorageFromSchema = new EntitySchemaTransformer().transform(entitySchemas);\n        const schemaEntityMetadatas = new EntityMetadataBuilder(this.connection, metadataArgsStorageFromSchema).build();\n\n        return [...decoratorEntityMetadatas, ...schemaEntityMetadatas];\n    }\n\n}"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}