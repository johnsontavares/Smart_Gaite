{"ast":null,"code":"import { __awaiter, __extends, __generator, __read } from \"tslib\";\nimport { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { DeleteResult } from \"./result/DeleteResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { EntitySchema } from \"../index\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport { BetterSqlite3Driver } from \"../driver/better-sqlite3/BetterSqlite3Driver\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\n\nvar DeleteQueryBuilder =\n/** @class */\nfunction (_super) {\n  __extends(DeleteQueryBuilder, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function DeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {\n    var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;\n\n    _this.expressionMap.aliasNamePrefixingEnabled = false;\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Gets generated sql query without parameters being replaced.\n   */\n\n\n  DeleteQueryBuilder.prototype.getQuery = function () {\n    var sql = this.createComment();\n    sql += this.createDeleteExpression();\n    return sql.trim();\n  };\n  /**\n   * Executes sql generated by query builder and returns raw database results.\n   */\n\n\n  DeleteQueryBuilder.prototype.execute = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, sql, parameters, queryRunner, transactionStartedByUs, broadcastResult, deleteResult, result, driver, broadcastResult, error_1, rollbackError_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = __read(this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];\n            queryRunner = this.obtainQueryRunner();\n            transactionStartedByUs = false;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 11, 16, 21]);\n\n            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , queryRunner.startTransaction()];\n\n          case 2:\n            _b.sent();\n\n            transactionStartedByUs = true;\n            _b.label = 3;\n\n          case 3:\n            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3\n            /*break*/\n            , 5];\n            broadcastResult = new BroadcasterResult();\n            queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);\n            if (!(broadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(broadcastResult.promises)];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            deleteResult = new DeleteResult();\n            return [4\n            /*yield*/\n            , queryRunner.query(sql, parameters)];\n\n          case 6:\n            result = _b.sent();\n            driver = queryRunner.connection.driver;\n\n            if (driver instanceof MysqlDriver) {\n              deleteResult.raw = result;\n              deleteResult.affected = result.affectedRows;\n            } else if (driver instanceof AuroraDataApiDriver) {\n              deleteResult.raw = result;\n              deleteResult.affected = result.numberOfRecordsUpdated;\n            } else if (driver instanceof SqlServerDriver || driver instanceof PostgresDriver || driver instanceof CockroachDriver) {\n              deleteResult.raw = result[0] ? result[0] : null; // don't return 0 because it could confuse. null means that we did not receive this value\n\n              deleteResult.affected = typeof result[1] === \"number\" ? result[1] : null;\n            } else if (driver instanceof OracleDriver) {\n              deleteResult.affected = result;\n            } else if (driver instanceof BetterSqlite3Driver) {\n              // only works for better-sqlite3\n              deleteResult.raw = result;\n              deleteResult.affected = result.changes;\n            } else {\n              deleteResult.raw = result;\n            }\n\n            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3\n            /*break*/\n            , 8];\n            broadcastResult = new BroadcasterResult();\n            queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias.metadata);\n            if (!(broadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 8];\n            return [4\n            /*yield*/\n            , Promise.all(broadcastResult.promises)];\n\n          case 7:\n            _b.sent();\n\n            _b.label = 8;\n\n          case 8:\n            if (!transactionStartedByUs) return [3\n            /*break*/\n            , 10];\n            return [4\n            /*yield*/\n            , queryRunner.commitTransaction()];\n\n          case 9:\n            _b.sent();\n\n            _b.label = 10;\n\n          case 10:\n            return [2\n            /*return*/\n            , deleteResult];\n\n          case 11:\n            error_1 = _b.sent();\n            if (!transactionStartedByUs) return [3\n            /*break*/\n            , 15];\n            _b.label = 12;\n\n          case 12:\n            _b.trys.push([12, 14,, 15]);\n\n            return [4\n            /*yield*/\n            , queryRunner.rollbackTransaction()];\n\n          case 13:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            rollbackError_1 = _b.sent();\n            return [3\n            /*break*/\n            , 15];\n\n          case 15:\n            throw error_1;\n\n          case 16:\n            if (!(queryRunner !== this.queryRunner)) return [3\n            /*break*/\n            , 18];\n            return [4\n            /*yield*/\n            , queryRunner.release()];\n\n          case 17:\n            _b.sent();\n\n            _b.label = 18;\n\n          case 18:\n            if (!(this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive)) return [3\n            /*break*/\n            , 20];\n            return [4\n            /*yield*/\n            , this.connection.driver.autoSave()];\n\n          case 19:\n            _b.sent();\n\n            _b.label = 20;\n\n          case 20:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 21:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Specifies FROM which entity's table select/update/delete will be executed.\n   * Also sets a main string alias of the selection data.\n   */\n\n\n  DeleteQueryBuilder.prototype.from = function (entityTarget, aliasName) {\n    entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n    var mainAlias = this.createFromAlias(entityTarget, aliasName);\n    this.expressionMap.setMainAlias(mainAlias);\n    return this;\n  };\n  /**\n   * Sets WHERE condition in the query builder.\n   * If you had previously WHERE expression defined,\n   * calling this function will override previously set WHERE conditions.\n   * Additionally you can add parameters used in where expression.\n   */\n\n\n  DeleteQueryBuilder.prototype.where = function (where, parameters) {\n    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n\n    var condition = this.computeWhereParameter(where);\n    if (condition) this.expressionMap.wheres = [{\n      type: \"simple\",\n      condition: condition\n    }];\n    if (parameters) this.setParameters(parameters);\n    return this;\n  };\n  /**\n   * Adds new AND WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n\n\n  DeleteQueryBuilder.prototype.andWhere = function (where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"and\",\n      condition: this.computeWhereParameter(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  };\n  /**\n   * Adds new OR WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n\n\n  DeleteQueryBuilder.prototype.orWhere = function (where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"or\",\n      condition: this.computeWhereParameter(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  };\n  /**\n   * Adds new AND WHERE with conditions for the given ids.\n   */\n\n\n  DeleteQueryBuilder.prototype.whereInIds = function (ids) {\n    return this.where(this.createWhereIdsExpression(ids));\n  };\n  /**\n   * Adds new AND WHERE with conditions for the given ids.\n   */\n\n\n  DeleteQueryBuilder.prototype.andWhereInIds = function (ids) {\n    return this.andWhere(this.createWhereIdsExpression(ids));\n  };\n  /**\n   * Adds new OR WHERE with conditions for the given ids.\n   */\n\n\n  DeleteQueryBuilder.prototype.orWhereInIds = function (ids) {\n    return this.orWhere(this.createWhereIdsExpression(ids));\n  };\n  /**\n   * Optional returning/output clause.\n   */\n\n\n  DeleteQueryBuilder.prototype.output = function (output) {\n    return this.returning(output);\n  };\n  /**\n   * Optional returning/output clause.\n   */\n\n\n  DeleteQueryBuilder.prototype.returning = function (returning) {\n    // not all databases support returning/output cause\n    if (!this.connection.driver.isReturningSqlSupported()) throw new ReturningStatementNotSupportedError();\n    this.expressionMap.returning = returning;\n    return this;\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates DELETE express used to perform query.\n   */\n\n\n  DeleteQueryBuilder.prototype.createDeleteExpression = function () {\n    var tableName = this.getTableName(this.getMainTableName());\n    var whereExpression = this.createWhereExpression();\n    var returningExpression = this.createReturningExpression();\n\n    if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof CockroachDriver)) {\n      return \"DELETE FROM \" + tableName + whereExpression + \" RETURNING \" + returningExpression;\n    } else if (returningExpression !== \"\" && this.connection.driver instanceof SqlServerDriver) {\n      return \"DELETE FROM \" + tableName + \" OUTPUT \" + returningExpression + whereExpression;\n    } else {\n      return \"DELETE FROM \" + tableName + whereExpression;\n    }\n  };\n\n  return DeleteQueryBuilder;\n}(QueryBuilder);\n\nexport { DeleteQueryBuilder };","map":{"version":3,"sources":["../browser/src/query-builder/DeleteQueryBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\nimport {DeleteResult} from \"./result/DeleteResult\";\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {EntitySchema} from \"../index\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport {BetterSqlite3Driver} from \"../driver/better-sqlite3/BetterSqlite3Driver\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class DeleteQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        super(connectionOrQueryBuilder as any, queryRunner);\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createComment();\n        sql += this.createDeleteExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<DeleteResult> {\n        const [sql, parameters] = this.getQueryAndParameters();\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // call before deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastBeforeRemoveEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // execute query\n            const deleteResult = new DeleteResult();\n            const result = await queryRunner.query(sql, parameters);\n\n            const driver = queryRunner.connection.driver;\n            if (driver instanceof MysqlDriver) {\n                deleteResult.raw = result;\n                deleteResult.affected = result.affectedRows;\n\n            } else if (driver instanceof AuroraDataApiDriver) {\n                deleteResult.raw = result;\n                deleteResult.affected = result.numberOfRecordsUpdated;\n\n            } else if (driver instanceof SqlServerDriver || driver instanceof PostgresDriver || driver instanceof CockroachDriver) {\n                deleteResult.raw = result[0] ? result[0] : null;\n                // don't return 0 because it could confuse. null means that we did not receive this value\n                deleteResult.affected = typeof result[1] === \"number\" ? result[1] : null;\n\n            } else if (driver instanceof OracleDriver) {\n                deleteResult.affected = result;\n\n            } else if (driver instanceof BetterSqlite3Driver) { // only works for better-sqlite3\n                deleteResult.raw = result;\n                deleteResult.affected = result.changes;\n\n            } else {\n                deleteResult.raw = result;\n            }\n\n            // call after deletion methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastAfterRemoveEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n            return deleteResult;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies FROM which entity's table select/update/delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from<T>(entityTarget: EntityTarget<T>, aliasName?: string): DeleteQueryBuilder<T> {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return (this as any) as DeleteQueryBuilder<T>;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: Brackets|string|((qb: this) => string)|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: Brackets|string|((qb: this) => string), parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any|any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any|any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any|any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this {\n\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates DELETE express used to perform query.\n     */\n    protected createDeleteExpression() {\n        const tableName = this.getTableName(this.getMainTableName());\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression();\n\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof CockroachDriver)) {\n            return `DELETE FROM ${tableName}${whereExpression} RETURNING ${returningExpression}`;\n\n        } else if (returningExpression !== \"\" && this.connection.driver instanceof SqlServerDriver) {\n            return `DELETE FROM ${tableName} OUTPUT ${returningExpression}${whereExpression}`;\n\n        } else {\n            return `DELETE FROM ${tableName}${whereExpression}`;\n        }\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}