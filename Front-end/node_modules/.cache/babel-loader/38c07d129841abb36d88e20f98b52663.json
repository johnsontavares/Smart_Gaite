{"ast":null,"code":"import { TreeRepository } from \"./TreeRepository\";\nimport { Repository } from \"./Repository\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { MongoRepository } from \"./MongoRepository\";\n/**\n * Factory used to create different types of repositories.\n */\n\nvar RepositoryFactory =\n/** @class */\nfunction () {\n  function RepositoryFactory() {} // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a repository.\n   */\n\n\n  RepositoryFactory.prototype.create = function (manager, metadata, queryRunner) {\n    if (metadata.treeType) {\n      // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n      // however we need these properties for internal work of the class\n      var repository = new TreeRepository();\n      Object.assign(repository, {\n        manager: manager,\n        metadata: metadata,\n        queryRunner: queryRunner\n      });\n      return repository;\n    } else {\n      // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n      // however we need these properties for internal work of the class\n      var repository = void 0;\n\n      if (manager.connection.driver instanceof MongoDriver) {\n        repository = new MongoRepository();\n      } else {\n        repository = new Repository();\n      }\n\n      Object.assign(repository, {\n        manager: manager,\n        metadata: metadata,\n        queryRunner: queryRunner\n      });\n      return repository;\n    }\n  };\n\n  return RepositoryFactory;\n}();\n\nexport { RepositoryFactory };","map":{"version":3,"sources":["../browser/src/repository/RepositoryFactory.ts"],"names":[],"mappings":"AAAA,SAAQ,cAAR,QAA6B,kBAA7B;AAEA,SAAQ,UAAR,QAAyB,cAAzB;AACA,SAAQ,WAAR,QAA0B,+BAA1B;AACA,SAAQ,eAAR,QAA8B,mBAA9B;AAIA;;AAEG;;AACH,IAAA,iBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,iBAAA,GAAA,CAyCC,CAzCD,CAEI;AACA;AACA;;AAEA;;AAEG;;;AACH,EAAA,iBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,OAAP,EAA+B,QAA/B,EAAyD,WAAzD,EAAkF;AAE9E,QAAI,QAAQ,CAAC,QAAb,EAAuB;AACnB;AACA;AACA,UAAM,UAAU,GAAG,IAAI,cAAJ,EAAnB;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,UAAd,EAA0B;AACtB,QAAA,OAAO,EAAE,OADa;AAEtB,QAAA,QAAQ,EAAE,QAFY;AAGtB,QAAA,WAAW,EAAE;AAHS,OAA1B;AAKA,aAAO,UAAP;AAEH,KAXD,MAWO;AACH;AACA;AACA,UAAI,UAAU,GAAA,KAAA,CAAd;;AACA,UAAI,OAAO,CAAC,UAAR,CAAmB,MAAnB,YAAqC,WAAzC,EAAsD;AAClD,QAAA,UAAU,GAAG,IAAI,eAAJ,EAAb;AACH,OAFD,MAEO;AACH,QAAA,UAAU,GAAG,IAAI,UAAJ,EAAb;AACH;;AACD,MAAA,MAAM,CAAC,MAAP,CAAc,UAAd,EAA0B;AACtB,QAAA,OAAO,EAAE,OADa;AAEtB,QAAA,QAAQ,EAAE,QAFY;AAGtB,QAAA,WAAW,EAAE;AAHS,OAA1B;AAMA,aAAO,UAAP;AACH;AACJ,GA9BD;;AAgCJ,SAAA,iBAAA;AAAC,CAzCD,EAAA","sourcesContent":["import {TreeRepository} from \"./TreeRepository\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Repository} from \"./Repository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoRepository} from \"./MongoRepository\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\n\n/**\n * Factory used to create different types of repositories.\n */\nexport class RepositoryFactory {\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a repository.\n     */\n    create(manager: EntityManager, metadata: EntityMetadata, queryRunner?: QueryRunner): Repository<any> {\n\n        if (metadata.treeType) {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            const repository = new TreeRepository<any>();\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n            return repository;\n\n        } else {\n            // NOTE: dynamic access to protected properties. We need this to prevent unwanted properties in those classes to be exposed,\n            // however we need these properties for internal work of the class\n            let repository: Repository<any>;\n            if (manager.connection.driver instanceof MongoDriver) {\n                repository = new MongoRepository();\n            } else {\n                repository = new Repository<any>();\n            }\n            Object.assign(repository, {\n                manager: manager,\n                metadata: metadata,\n                queryRunner: queryRunner,\n            });\n\n            return repository;\n        }\n    }\n\n}"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}