{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { EntitySchema } from \"../index\";\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\n\nvar EntityNotFoundError =\n/** @class */\nfunction (_super) {\n  __extends(EntityNotFoundError, _super);\n\n  function EntityNotFoundError(entityClass, criteria) {\n    var _this = _super.call(this) || this;\n\n    _this.name = \"EntityNotFound\";\n    Object.setPrototypeOf(_this, EntityNotFoundError.prototype);\n    var targetName;\n\n    if (entityClass instanceof EntitySchema) {\n      targetName = entityClass.options.name;\n    } else if (typeof entityClass === \"function\") {\n      targetName = entityClass.name;\n    } else if (typeof entityClass === \"object\" && \"name\" in entityClass) {\n      targetName = entityClass.name;\n    } else {\n      targetName = entityClass;\n    }\n\n    var criteriaString = _this.stringifyCriteria(criteria);\n\n    _this.message = \"Could not find any entity of type \\\"\" + targetName + \"\\\" matching: \" + criteriaString;\n    return _this;\n  }\n\n  EntityNotFoundError.prototype.stringifyCriteria = function (criteria) {\n    try {\n      return JSON.stringify(criteria, null, 4);\n    } catch (e) {}\n\n    return \"\" + criteria;\n  };\n\n  return EntityNotFoundError;\n}(Error);\n\nexport { EntityNotFoundError };","map":{"version":3,"sources":["../browser/src/error/EntityNotFoundError.ts"],"names":[],"mappings":";AACA,SAAQ,YAAR,QAA2B,UAA3B;AAEA;;AAEG;;AACH,IAAA,mBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAyC,EAAA,SAAA,CAAA,mBAAA,EAAA,MAAA,CAAA;;AAGrC,WAAA,mBAAA,CAAY,WAAZ,EAA4C,QAA5C,EAAyD;AAAzD,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAFA,IAAA,KAAA,CAAA,IAAA,GAAO,gBAAP;AAII,IAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA4B,mBAAmB,CAAC,SAAhD;AACA,QAAI,UAAJ;;AACA,QAAI,WAAW,YAAY,YAA3B,EAAyC;AACrC,MAAA,UAAU,GAAG,WAAW,CAAC,OAAZ,CAAoB,IAAjC;AACH,KAFD,MAEO,IAAI,OAAO,WAAP,KAAuB,UAA3B,EAAuC;AAC1C,MAAA,UAAU,GAAG,WAAW,CAAC,IAAzB;AACH,KAFM,MAEA,IAAI,OAAO,WAAP,KAAuB,QAAvB,IAAmC,UAAU,WAAjD,EAA8D;AACjE,MAAA,UAAU,GAAG,WAAW,CAAC,IAAzB;AACH,KAFM,MAEA;AACH,MAAA,UAAU,GAAG,WAAb;AACH;;AACD,QAAM,cAAc,GAAG,KAAI,CAAC,iBAAL,CAAuB,QAAvB,CAAvB;;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,yCAAsC,UAAtC,GAAgD,eAAhD,GAA+D,cAA9E;;AACH;;AAEO,EAAA,mBAAA,CAAA,SAAA,CAAA,iBAAA,GAAR,UAA0B,QAA1B,EAAuC;AACnC,QAAI;AACA,aAAO,IAAI,CAAC,SAAL,CAAe,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAP;AACH,KAFD,CAEE,OAAO,CAAP,EAAU,CAAG;;AACf,WAAO,KAAK,QAAZ;AACH,GALO;;AAOZ,SAAA,mBAAA;AAAC,CA3BD,CAAyC,KAAzC,CAAA","sourcesContent":["import {EntityTarget} from \"../common/EntityTarget\";\nimport {EntitySchema} from \"../index\";\n\n/**\n * Thrown when no result could be found in methods which are not allowed to return undefined or an empty set.\n */\nexport class EntityNotFoundError extends Error {\n    name = \"EntityNotFound\";\n\n    constructor(entityClass: EntityTarget<any>, criteria: any) {\n        super();\n        Object.setPrototypeOf(this, EntityNotFoundError.prototype);\n        let targetName: string;\n        if (entityClass instanceof EntitySchema) {\n            targetName = entityClass.options.name;\n        } else if (typeof entityClass === \"function\") {\n            targetName = entityClass.name;\n        } else if (typeof entityClass === \"object\" && \"name\" in entityClass) {\n            targetName = entityClass.name;\n        } else {\n            targetName = entityClass;\n        }\n        const criteriaString = this.stringifyCriteria(criteria);\n        this.message = `Could not find any entity of type \"${targetName}\" matching: ${criteriaString}`;\n    }\n\n    private stringifyCriteria(criteria: any): string {\n        try {\n            return JSON.stringify(criteria, null, 4);\n        } catch (e) { }\n        return \"\" + criteria;\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}