{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\n/**\n * Contains all information about entity's embedded property.\n */\n\nvar EmbeddedMetadata =\n/** @class */\nfunction () {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  function EmbeddedMetadata(options) {\n    /**\n     * Columns inside this embed.\n     */\n    this.columns = [];\n    /**\n     * Relations inside this embed.\n     */\n\n    this.relations = [];\n    /**\n     * Entity listeners inside this embed.\n     */\n\n    this.listeners = [];\n    /**\n     * Indices applied to the embed columns.\n     */\n\n    this.indices = [];\n    /**\n     * Uniques applied to the embed columns.\n     */\n\n    this.uniques = [];\n    /**\n     * Relation ids inside this embed.\n     */\n\n    this.relationIds = [];\n    /**\n     * Relation counts inside this embed.\n     */\n\n    this.relationCounts = [];\n    /**\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n     */\n\n    this.embeddeds = [];\n    /**\n     * Indicates if this embedded is in array mode.\n     *\n     * This option works only in mongodb.\n     */\n\n    this.isArray = false;\n    /**\n     * Returns array of property names of current embed and all its parent embeds.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * we need to get value of \"id\" column from the post real entity object.\n     * this method will return [\"data\", \"information\", \"counters\"]\n     */\n\n    this.parentPropertyNames = [];\n    /**\n     * Returns array of prefixes of current embed and all its parent embeds.\n     */\n\n    this.parentPrefixes = [];\n    /**\n     * Returns embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n\n    this.embeddedMetadataTree = [];\n    /**\n     * Embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n\n    this.columnsFromTree = [];\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n\n    this.relationsFromTree = [];\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n\n    this.listenersFromTree = [];\n    /**\n     * Indices of this embed and all indices from its child embeds.\n     */\n\n    this.indicesFromTree = [];\n    /**\n     * Uniques of this embed and all uniques from its child embeds.\n     */\n\n    this.uniquesFromTree = [];\n    /**\n     * Relation ids of this embed and all relation ids from its child embeds.\n     */\n\n    this.relationIdsFromTree = [];\n    /**\n     * Relation counts of this embed and all relation counts from its child embeds.\n     */\n\n    this.relationCountsFromTree = [];\n    this.entityMetadata = options.entityMetadata;\n    this.type = options.args.type();\n    this.propertyName = options.args.propertyName;\n    this.customPrefix = options.args.prefix;\n    this.isArray = options.args.isArray;\n  } // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Creates a new embedded object.\n   */\n\n\n  EmbeddedMetadata.prototype.create = function () {\n    return new this.type();\n  }; // ---------------------------------------------------------------------\n  // Builder Methods\n  // ---------------------------------------------------------------------\n\n\n  EmbeddedMetadata.prototype.build = function (connection) {\n    this.embeddeds.forEach(function (embedded) {\n      return embedded.build(connection);\n    });\n    this.prefix = this.buildPrefix(connection);\n    this.parentPropertyNames = this.buildParentPropertyNames();\n    this.parentPrefixes = this.buildParentPrefixes();\n    this.propertyPath = this.parentPropertyNames.join(\".\");\n    this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n    this.columnsFromTree = this.buildColumnsFromTree();\n    this.relationsFromTree = this.buildRelationsFromTree();\n    this.listenersFromTree = this.buildListenersFromTree();\n    this.indicesFromTree = this.buildIndicesFromTree();\n    this.uniquesFromTree = this.buildUniquesFromTree();\n    this.relationIdsFromTree = this.buildRelationIdsFromTree();\n    this.relationCountsFromTree = this.buildRelationCountsFromTree();\n    return this;\n  }; // ---------------------------------------------------------------------\n  // Protected Methods\n  // ---------------------------------------------------------------------\n\n\n  EmbeddedMetadata.prototype.buildPartialPrefix = function () {\n    // if prefix option was not set or explicitly set to true - default prefix\n    if (this.customPrefix === undefined || this.customPrefix === true) {\n      return [this.propertyName];\n    } // if prefix option was set to empty string or explicity set to false - disable prefix\n\n\n    if (this.customPrefix === \"\" || this.customPrefix === false) {\n      return [];\n    } // use custom prefix\n\n\n    if (typeof this.customPrefix === \"string\") {\n      return [this.customPrefix];\n    }\n\n    throw new Error(\"Invalid prefix option given for \" + this.entityMetadata.targetName + \"#\" + this.propertyName);\n  };\n\n  EmbeddedMetadata.prototype.buildPrefix = function (connection) {\n    if (connection.driver instanceof MongoDriver) return this.propertyName;\n    var prefixes = [];\n    if (this.parentEmbeddedMetadata) prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n    prefixes.push.apply(prefixes, __spreadArray([], __read(this.buildPartialPrefix())));\n    return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n  };\n\n  EmbeddedMetadata.prototype.buildParentPropertyNames = function () {\n    return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\n  };\n\n  EmbeddedMetadata.prototype.buildParentPrefixes = function () {\n    return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPrefixes().concat(this.buildPartialPrefix()) : this.buildPartialPrefix();\n  };\n\n  EmbeddedMetadata.prototype.buildEmbeddedMetadataTree = function () {\n    return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\n  };\n\n  EmbeddedMetadata.prototype.buildColumnsFromTree = function () {\n    return this.embeddeds.reduce(function (columns, embedded) {\n      return columns.concat(embedded.buildColumnsFromTree());\n    }, this.columns);\n  };\n\n  EmbeddedMetadata.prototype.buildRelationsFromTree = function () {\n    return this.embeddeds.reduce(function (relations, embedded) {\n      return relations.concat(embedded.buildRelationsFromTree());\n    }, this.relations);\n  };\n\n  EmbeddedMetadata.prototype.buildListenersFromTree = function () {\n    return this.embeddeds.reduce(function (relations, embedded) {\n      return relations.concat(embedded.buildListenersFromTree());\n    }, this.listeners);\n  };\n\n  EmbeddedMetadata.prototype.buildIndicesFromTree = function () {\n    return this.embeddeds.reduce(function (relations, embedded) {\n      return relations.concat(embedded.buildIndicesFromTree());\n    }, this.indices);\n  };\n\n  EmbeddedMetadata.prototype.buildUniquesFromTree = function () {\n    return this.embeddeds.reduce(function (relations, embedded) {\n      return relations.concat(embedded.buildUniquesFromTree());\n    }, this.uniques);\n  };\n\n  EmbeddedMetadata.prototype.buildRelationIdsFromTree = function () {\n    return this.embeddeds.reduce(function (relations, embedded) {\n      return relations.concat(embedded.buildRelationIdsFromTree());\n    }, this.relationIds);\n  };\n\n  EmbeddedMetadata.prototype.buildRelationCountsFromTree = function () {\n    return this.embeddeds.reduce(function (relations, embedded) {\n      return relations.concat(embedded.buildRelationCountsFromTree());\n    }, this.relationCounts);\n  };\n\n  return EmbeddedMetadata;\n}();\n\nexport { EmbeddedMetadata };","map":{"version":3,"sources":["../browser/src/metadata/EmbeddedMetadata.ts"],"names":[],"mappings":"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","sourcesContent":["import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {RelationMetadata} from \"./RelationMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadataArgs} from \"../metadata-args/EmbeddedMetadataArgs\";\nimport {RelationIdMetadata} from \"./RelationIdMetadata\";\nimport {RelationCountMetadata} from \"./RelationCountMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {EntityListenerMetadata} from \"./EntityListenerMetadata\";\nimport {IndexMetadata} from \"./IndexMetadata\";\nimport {UniqueMetadata} from \"./UniqueMetadata\";\n\n/**\n * Contains all information about entity's embedded property.\n */\nexport class EmbeddedMetadata {\n\n    // ---------------------------------------------------------------------\n    // Public Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this embedded is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Parent embedded in the case if this embedded inside other embedded.\n     */\n    parentEmbeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Embedded target type.\n     */\n    type: Function;\n\n    /**\n     * Property name on which this embedded is attached.\n     */\n    propertyName: string;\n\n    /**\n     * Gets full path to this embedded property (including embedded property name).\n     * Full path is relevant when embedded is used inside other embeds (one or multiple nested).\n     * For example it will return \"counters.subcounters\".\n     */\n    propertyPath: string;\n\n    /**\n     * Columns inside this embed.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Relations inside this embed.\n     */\n    relations: RelationMetadata[] = [];\n\n    /**\n     * Entity listeners inside this embed.\n     */\n    listeners: EntityListenerMetadata[] = [];\n\n    /**\n     * Indices applied to the embed columns.\n     */\n    indices: IndexMetadata[] = [];\n\n    /**\n     * Uniques applied to the embed columns.\n     */\n    uniques: UniqueMetadata[] = [];\n\n    /**\n     * Relation ids inside this embed.\n     */\n    relationIds: RelationIdMetadata[] = [];\n\n    /**\n     * Relation counts inside this embed.\n     */\n    relationCounts: RelationCountMetadata[] = [];\n\n    /**\n     * Nested embeddable in this embeddable (which has current embedded as parent embedded).\n     */\n    embeddeds: EmbeddedMetadata[] = [];\n\n    /**\n     * Indicates if this embedded is in array mode.\n     *\n     * This option works only in mongodb.\n     */\n    isArray: boolean = false;\n\n    /**\n     * Prefix of the embedded, used instead of propertyName.\n     * If set to empty string or false, then prefix is not set at all.\n     */\n    customPrefix: string|boolean|undefined;\n\n    /**\n     * Gets the prefix of the columns.\n     * By default its a property name of the class where this prefix is.\n     * But if custom prefix is set then it takes its value as a prefix.\n     * However if custom prefix is set to empty string or false, then prefix to column is not applied at all.\n     */\n    prefix: string;\n\n    /**\n     * Returns array of property names of current embed and all its parent embeds.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * we need to get value of \"id\" column from the post real entity object.\n     * this method will return [\"data\", \"information\", \"counters\"]\n     */\n    parentPropertyNames: string[] = [];\n\n    /**\n     * Returns array of prefixes of current embed and all its parent embeds.\n     */\n    parentPrefixes: string[] = [];\n\n    /**\n     * Returns embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    embeddedMetadataTree: EmbeddedMetadata[] = [];\n\n    /**\n     * Embed metadatas from all levels of the parent tree.\n     *\n     * example: post[data][information][counters].id where \"data\", \"information\" and \"counters\" are embeds\n     * this method will return [embed metadata of data, embed metadata of information, embed metadata of counters]\n     */\n    columnsFromTree: ColumnMetadata[] = [];\n\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    relationsFromTree: RelationMetadata[] = [];\n\n    /**\n     * Relations of this embed and all relations from its child embeds.\n     */\n    listenersFromTree: EntityListenerMetadata[] = [];\n\n    /**\n     * Indices of this embed and all indices from its child embeds.\n     */\n    indicesFromTree: IndexMetadata[] = [];\n\n    /**\n     * Uniques of this embed and all uniques from its child embeds.\n     */\n    uniquesFromTree: UniqueMetadata[] = [];\n\n    /**\n     * Relation ids of this embed and all relation ids from its child embeds.\n     */\n    relationIdsFromTree: RelationIdMetadata[] = [];\n\n    /**\n     * Relation counts of this embed and all relation counts from its child embeds.\n     */\n    relationCountsFromTree: RelationCountMetadata[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        args: EmbeddedMetadataArgs,\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.type = options.args.type();\n        this.propertyName = options.args.propertyName;\n        this.customPrefix = options.args.prefix;\n        this.isArray = options.args.isArray;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Creates a new embedded object.\n     */\n    create(): any {\n        return new (this.type as any);\n    }\n\n    // ---------------------------------------------------------------------\n    // Builder Methods\n    // ---------------------------------------------------------------------\n\n    build(connection: Connection): this {\n        this.embeddeds.forEach(embedded => embedded.build(connection));\n        this.prefix = this.buildPrefix(connection);\n        this.parentPropertyNames = this.buildParentPropertyNames();\n        this.parentPrefixes = this.buildParentPrefixes();\n        this.propertyPath = this.parentPropertyNames.join(\".\");\n        this.embeddedMetadataTree = this.buildEmbeddedMetadataTree();\n        this.columnsFromTree = this.buildColumnsFromTree();\n        this.relationsFromTree = this.buildRelationsFromTree();\n        this.listenersFromTree = this.buildListenersFromTree();\n        this.indicesFromTree = this.buildIndicesFromTree();\n        this.uniquesFromTree = this.buildUniquesFromTree();\n        this.relationIdsFromTree = this.buildRelationIdsFromTree();\n        this.relationCountsFromTree = this.buildRelationCountsFromTree();\n        return this;\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    protected buildPartialPrefix(): string[] {\n        // if prefix option was not set or explicitly set to true - default prefix\n        if (this.customPrefix === undefined || this.customPrefix === true) {\n            return [this.propertyName];\n        }\n\n        // if prefix option was set to empty string or explicity set to false - disable prefix\n        if (this.customPrefix === \"\" || this.customPrefix === false) {\n            return [];\n        }\n\n        // use custom prefix\n        if (typeof this.customPrefix === \"string\") {\n            return [this.customPrefix];\n        }\n\n        throw new Error(`Invalid prefix option given for ${this.entityMetadata.targetName}#${this.propertyName}`);\n    }\n\n    protected buildPrefix(connection: Connection): string {\n        if (connection.driver instanceof MongoDriver)\n            return this.propertyName;\n\n        let prefixes: string[] = [];\n        if (this.parentEmbeddedMetadata)\n            prefixes.push(this.parentEmbeddedMetadata.buildPrefix(connection));\n\n        prefixes.push(...this.buildPartialPrefix());\n\n        return prefixes.join(\"_\"); // todo: use naming strategy instead of \"_\"  !!!\n    }\n\n    protected buildParentPropertyNames(): string[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPropertyNames().concat(this.propertyName) : [this.propertyName];\n    }\n\n    protected buildParentPrefixes(): string[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildParentPrefixes().concat(this.buildPartialPrefix()) : this.buildPartialPrefix();\n    }\n\n    protected buildEmbeddedMetadataTree(): EmbeddedMetadata[] {\n        return this.parentEmbeddedMetadata ? this.parentEmbeddedMetadata.buildEmbeddedMetadataTree().concat(this) : [this];\n    }\n\n    protected buildColumnsFromTree(): ColumnMetadata[] {\n        return this.embeddeds.reduce((columns, embedded) => columns.concat(embedded.buildColumnsFromTree()), this.columns);\n    }\n\n    protected buildRelationsFromTree(): RelationMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationsFromTree()), this.relations);\n    }\n\n    protected buildListenersFromTree(): EntityListenerMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildListenersFromTree()), this.listeners);\n    }\n\n    protected buildIndicesFromTree(): IndexMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildIndicesFromTree()), this.indices);\n    }\n\n    protected buildUniquesFromTree(): UniqueMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildUniquesFromTree()), this.uniques);\n    }\n\n    protected buildRelationIdsFromTree(): RelationIdMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationIdsFromTree()), this.relationIds);\n    }\n\n    protected buildRelationCountsFromTree(): RelationCountMetadata[] {\n        return this.embeddeds.reduce((relations, embedded) => relations.concat(embedded.buildRelationCountsFromTree()), this.relationCounts);\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}