{"ast":null,"code":"import { FindOperator } from \"../FindOperator\";\nexport function Raw(valueOrSqlGenerator, sqlGeneratorParameters) {\n  if (typeof valueOrSqlGenerator !== 'function') {\n    return new FindOperator(\"raw\", valueOrSqlGenerator, false);\n  }\n\n  return new FindOperator(\"raw\", [], true, true, valueOrSqlGenerator, sqlGeneratorParameters);\n}","map":{"version":3,"sources":["../browser/src/find-options/operator/Raw.ts"],"names":[],"mappings":"AAAA,SAAQ,YAAR,QAA2B,iBAA3B;AAsBA,OAAM,SAAU,GAAV,CACF,mBADE,EAEF,sBAFE,EAEoC;AAEtC,MAAI,OAAO,mBAAP,KAA+B,UAAnC,EAA+C;AAC3C,WAAO,IAAI,YAAJ,CAAiB,KAAjB,EAAwB,mBAAxB,EAA6C,KAA7C,CAAP;AACH;;AAED,SAAO,IAAI,YAAJ,CAAiB,KAAjB,EAAwB,EAAxB,EAA4B,IAA5B,EAAkC,IAAlC,EAAwC,mBAAxC,EAA6D,sBAA7D,CAAP;AACH","sourcesContent":["import {FindOperator} from \"../FindOperator\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Find Options Operator.\n * Example: { someField: Raw(\"12\") }\n */\nexport function Raw<T>(value: string): FindOperator<any>;\n\n/**\n * Find Options Operator.\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = 5`) }\n */\nexport function Raw<T>(sqlGenerator: ((columnAlias: string) => string)): FindOperator<any>;\n\n/**\n * Find Options Operator.\n * For escaping parameters use next syntax:\n * Example: { someField: Raw((columnAlias) => `${columnAlias} = :value`, { value: 5 }) }\n */\nexport function Raw<T>(sqlGenerator: ((columnAlias: string) => string), parameters: ObjectLiteral): FindOperator<any>;\n\nexport function Raw<T>(\n    valueOrSqlGenerator: string | ((columnAlias: string) => string),\n    sqlGeneratorParameters?: ObjectLiteral,\n): FindOperator<any> {\n    if (typeof valueOrSqlGenerator !== 'function') {\n        return new FindOperator(\"raw\", valueOrSqlGenerator, false);\n    }\n\n    return new FindOperator(\"raw\", [], true, true, valueOrSqlGenerator, sqlGeneratorParameters);\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}