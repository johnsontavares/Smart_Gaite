{"ast":null,"code":"import { __read } from \"tslib\";\nimport { QueryBuilderUtils } from \"../QueryBuilderUtils\";\nimport { ObjectUtils } from \"../../util/ObjectUtils\";\n/**\n * Stores all join relation id attributes which will be used to build a JOIN query.\n */\n\nvar RelationIdAttribute =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function RelationIdAttribute(queryExpressionMap, relationIdAttribute) {\n    this.queryExpressionMap = queryExpressionMap;\n    /**\n     * Indicates if relation id should NOT be loaded as id map.\n     */\n\n    this.disableMixedMap = false;\n    ObjectUtils.assign(this, relationIdAttribute || {});\n  }\n\n  Object.defineProperty(RelationIdAttribute.prototype, \"joinInverseSideMetadata\", {\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n    get: function () {\n      return this.relation.inverseEntityMetadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RelationIdAttribute.prototype, \"parentAlias\", {\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get: function () {\n      if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new Error(\"Given value must be a string representation of alias property\");\n      return this.relationName.substr(0, this.relationName.indexOf(\".\"));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RelationIdAttribute.prototype, \"relationPropertyPath\", {\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get: function () {\n      if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new Error(\"Given value must be a string representation of alias property\");\n      return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RelationIdAttribute.prototype, \"relation\", {\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get: function () {\n      if (!QueryBuilderUtils.isAliasProperty(this.relationName)) throw new Error(\"Given value must be a string representation of alias property\");\n      var relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias);\n      var relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath);\n      if (!relation) throw new Error(\"Relation with property path \" + this.relationPropertyPath + \" in entity was not found.\");\n      return relation;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RelationIdAttribute.prototype, \"junctionAlias\", {\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get: function () {\n      var _a = __read(this.relationName.split(\".\"), 2),\n          parentAlias = _a[0],\n          relationProperty = _a[1];\n\n      return parentAlias + \"_\" + relationProperty + \"_rid\";\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RelationIdAttribute.prototype, \"junctionMetadata\", {\n    /**\n     * Metadata of the joined entity.\n     * If extra condition without entity was joined, then it will return undefined.\n     */\n    get: function () {\n      return this.relation.junctionEntityMetadata;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RelationIdAttribute.prototype, \"mapToPropertyParentAlias\", {\n    get: function () {\n      return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RelationIdAttribute.prototype, \"mapToPropertyPropertyPath\", {\n    get: function () {\n      return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return RelationIdAttribute;\n}();\n\nexport { RelationIdAttribute };","map":{"version":3,"sources":["../browser/src/query-builder/relation-id/RelationIdAttribute.ts"],"names":[],"mappings":"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","sourcesContent":["import {RelationMetadata} from \"../../metadata/RelationMetadata\";\nimport {QueryBuilderUtils} from \"../QueryBuilderUtils\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {QueryExpressionMap} from \"../QueryExpressionMap\";\nimport {SelectQueryBuilder} from \"../SelectQueryBuilder\";\nimport {ObjectUtils} from \"../../util/ObjectUtils\";\n\n/**\n * Stores all join relation id attributes which will be used to build a JOIN query.\n */\nexport class RelationIdAttribute {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Alias of the joined (destination) table.\n     */\n    alias?: string;\n\n    /**\n     * Name of relation.\n     */\n    relationName: string;\n\n    /**\n     * Property + alias of the object where to joined data should be mapped.\n     */\n    mapToProperty: string;\n\n    /**\n     * Extra condition applied to \"ON\" section of join.\n     */\n    queryBuilderFactory?: (qb: SelectQueryBuilder<any>) => SelectQueryBuilder<any>;\n\n    /**\n     * Indicates if relation id should NOT be loaded as id map.\n     */\n    disableMixedMap = false;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private queryExpressionMap: QueryExpressionMap,\n                        relationIdAttribute?: Partial<RelationIdAttribute>) {\n        ObjectUtils.assign(this, relationIdAttribute || {});\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    get joinInverseSideMetadata(): EntityMetadata {\n        return this.relation.inverseEntityMetadata;\n    }\n\n    /**\n     * Alias of the parent of this join.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"post\" is a parent alias.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get parentAlias(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.substr(0, this.relationName.indexOf(\".\"));\n    }\n\n    /**\n     * Relation property name of the parent.\n     * This is used to understand what is joined.\n     * For example, if we join (\"post.category\", \"categoryAlias\") then \"category\" is a relation property.\n     * This value is extracted from entityOrProperty value.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relationPropertyPath(): string {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        return this.relationName.substr(this.relationName.indexOf(\".\") + 1);\n    }\n\n    /**\n     * Relation of the parent.\n     * This is used to understand what is joined.\n     * This is available when join was made using \"post.category\" syntax.\n     */\n    get relation(): RelationMetadata {\n        if (!QueryBuilderUtils.isAliasProperty(this.relationName))\n            throw new Error(`Given value must be a string representation of alias property`);\n\n        const relationOwnerSelection = this.queryExpressionMap.findAliasByName(this.parentAlias!);\n        const relation = relationOwnerSelection.metadata.findRelationWithPropertyPath(this.relationPropertyPath!);\n        if (!relation)\n            throw new Error(`Relation with property path ${this.relationPropertyPath} in entity was not found.`);\n        return relation;\n    }\n\n    /**\n     * Generates alias of junction table, whose ids we get.\n     */\n    get junctionAlias(): string {\n        const [parentAlias, relationProperty] = this.relationName.split(\".\");\n        return parentAlias + \"_\" + relationProperty + \"_rid\";\n    }\n\n    /**\n     * Metadata of the joined entity.\n     * If extra condition without entity was joined, then it will return undefined.\n     */\n    get junctionMetadata(): EntityMetadata {\n        return this.relation.junctionEntityMetadata!;\n    }\n\n    get mapToPropertyParentAlias(): string {\n        return this.mapToProperty.substr(0, this.mapToProperty.indexOf(\".\"));\n    }\n\n    get mapToPropertyPropertyPath(): string {\n        return this.mapToProperty.substr(this.mapToProperty.indexOf(\".\") + 1);\n    }\n\n}"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}