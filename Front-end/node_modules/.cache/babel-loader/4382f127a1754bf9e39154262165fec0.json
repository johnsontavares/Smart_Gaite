{"ast":null,"code":"import { __awaiter, __extends, __generator, __read } from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { PostgresQueryRunner } from \"../postgres/PostgresQueryRunner\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n\nvar PostgresQueryRunnerWrapper =\n/** @class */\nfunction (_super) {\n  __extends(PostgresQueryRunnerWrapper, _super);\n\n  function PostgresQueryRunnerWrapper(driver, mode) {\n    return _super.call(this, driver, mode) || this;\n  }\n\n  return PostgresQueryRunnerWrapper;\n}(PostgresQueryRunner);\n/**\n * Runs queries on a single postgres database connection.\n */\n\n\nvar AuroraDataApiPostgresQueryRunner =\n/** @class */\nfunction (_super) {\n  __extends(AuroraDataApiPostgresQueryRunner, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function AuroraDataApiPostgresQueryRunner(driver, client, mode) {\n    var _this = _super.call(this, driver, mode) || this;\n\n    _this.client = client;\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates/uses database connection from the connection pool to perform further operations.\n   * Returns obtained database connection.\n   */\n\n\n  AuroraDataApiPostgresQueryRunner.prototype.connect = function () {\n    var _this = this;\n\n    if (this.databaseConnection) return Promise.resolve(this.databaseConnection);\n    if (this.databaseConnectionPromise) return this.databaseConnectionPromise;\n\n    if (this.mode === \"slave\" && this.driver.isReplicated) {\n      this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(function (_a) {\n        var _b = __read(_a, 2),\n            connection = _b[0],\n            release = _b[1];\n\n        _this.driver.connectedQueryRunners.push(_this);\n\n        _this.databaseConnection = connection;\n        _this.releaseCallback = release;\n        return _this.databaseConnection;\n      });\n    } else {\n      // master\n      this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(function (_a) {\n        var _b = __read(_a, 2),\n            connection = _b[0],\n            release = _b[1];\n\n        _this.driver.connectedQueryRunners.push(_this);\n\n        _this.databaseConnection = connection;\n        _this.releaseCallback = release;\n        return _this.databaseConnection;\n      });\n    }\n\n    return this.databaseConnectionPromise;\n  };\n  /**\n   * Starts transaction on the current connection.\n   */\n\n\n  AuroraDataApiPostgresQueryRunner.prototype.startTransaction = function (isolationLevel) {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isTransactionActive) throw new TransactionAlreadyStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            this.isTransactionActive = true;\n            return [4\n            /*yield*/\n            , this.client.startTransaction()];\n\n          case 3:\n            _a.sent();\n\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  AuroraDataApiPostgresQueryRunner.prototype.commitTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.client.commitTransaction()];\n\n          case 3:\n            _a.sent();\n\n            this.isTransactionActive = false;\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Rollbacks transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  AuroraDataApiPostgresQueryRunner.prototype.rollbackTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.client.rollbackTransaction()];\n\n          case 3:\n            _a.sent();\n\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Executes a given SQL query.\n   */\n\n\n  AuroraDataApiPostgresQueryRunner.prototype.query = function (query, parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            return [4\n            /*yield*/\n            , this.client.query(query, parameters)];\n\n          case 1:\n            result = _a.sent();\n\n            if (result.records) {\n              return [2\n              /*return*/\n              , result.records];\n            }\n\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  return AuroraDataApiPostgresQueryRunner;\n}(PostgresQueryRunnerWrapper);\n\nexport { AuroraDataApiPostgresQueryRunner };","map":{"version":3,"sources":["../browser/src/driver/aurora-data-api-pg/AuroraDataApiPostgresQueryRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {AuroraDataApiPostgresDriver} from \"./AuroraDataApiPostgresDriver\";\nimport {PostgresQueryRunner} from \"../postgres/PostgresQueryRunner\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\nclass PostgresQueryRunnerWrapper extends PostgresQueryRunner {\n    driver: any;\n\n    constructor(driver: any, mode: ReplicationMode) {\n        super(driver, mode);\n    }\n}\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class AuroraDataApiPostgresQueryRunner extends PostgresQueryRunnerWrapper implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: AuroraDataApiPostgresDriver;\n\n    protected client: any;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Special callback provided by a driver used to release a created connection.\n     */\n    protected releaseCallback: Function;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: AuroraDataApiPostgresDriver, client: any, mode: ReplicationMode) {\n        super(driver, mode);\n\n        this.client = client\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated)  {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([ connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n                this.releaseCallback = release;\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Starts transaction on the current connection.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n      \n        await this.client.startTransaction();\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n      \n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.client.commitTransaction();\n\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.client.rollbackTransaction();\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const result = await this.client.query(query, parameters);\n\n        if (result.records) {\n            return result.records;\n        }\n\n        return result;\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}