{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { SqljsQueryRunner } from \"./SqljsQueryRunner\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n\nvar SqljsDriver =\n/** @class */\nfunction (_super) {\n  __extends(SqljsDriver, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function SqljsDriver(connection) {\n    var _this = _super.call(this, connection) || this; // If autoSave is enabled by user, location or autoSaveCallback have to be set\n    // because either autoSave saves to location or calls autoSaveCallback.\n\n\n    if (_this.options.autoSave && !_this.options.location && !_this.options.autoSaveCallback) {\n      throw new DriverOptionNotSetError(\"location or autoSaveCallback\");\n    } // load sql.js package\n\n\n    _this.loadDependencies();\n\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs connection to the database.\n   */\n\n\n  SqljsDriver.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this.createDatabaseConnection()];\n\n          case 1:\n            _a.databaseConnection = _b.sent();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Closes connection with database.\n   */\n\n\n  SqljsDriver.prototype.disconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (ok, fail) {\n          try {\n            _this.queryRunner = undefined;\n\n            _this.databaseConnection.close();\n\n            ok();\n          } catch (e) {\n            fail(e);\n          }\n        })];\n      });\n    });\n  };\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  SqljsDriver.prototype.createQueryRunner = function (mode) {\n    if (!this.queryRunner) this.queryRunner = new SqljsQueryRunner(this);\n    return this.queryRunner;\n  };\n  /**\n   * Loads a database from a given file (Node.js), local storage key (browser) or array.\n   * This will delete the current database!\n   */\n\n\n  SqljsDriver.prototype.load = function (fileNameOrLocalStorageOrData, checkIfFileOrLocalStorageExists) {\n    if (checkIfFileOrLocalStorageExists === void 0) {\n      checkIfFileOrLocalStorageExists = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var database, localStorageContent;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!(typeof fileNameOrLocalStorageOrData === \"string\")) return [3\n            /*break*/\n            , 8];\n            if (!(PlatformTools.type === \"node\")) return [3\n            /*break*/\n            , 1]; // Node.js\n            // fileNameOrLocalStorageOrData should be a path to the file\n\n            if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n              database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n              return [2\n              /*return*/\n              , this.createDatabaseConnectionWithImport(database)];\n            } else if (checkIfFileOrLocalStorageExists) {\n              throw new Error(\"File \" + fileNameOrLocalStorageOrData + \" does not exist\");\n            } else {\n              // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n              // Therefore open a database without importing an existing file.\n              // File will be written on first write operation.\n              return [2\n              /*return*/\n              , this.createDatabaseConnectionWithImport()];\n            }\n\n            return [3\n            /*break*/\n            , 7];\n\n          case 1:\n            localStorageContent = null;\n            if (!this.options.useLocalForage) return [3\n            /*break*/\n            , 5];\n            if (!window.localforage) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , window.localforage.getItem(fileNameOrLocalStorageOrData)];\n\n          case 2:\n            localStorageContent = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            throw new Error(\"localforage is not defined - please import localforage.js into your site\");\n\n          case 4:\n            return [3\n            /*break*/\n            , 6];\n\n          case 5:\n            localStorageContent = PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n            _a.label = 6;\n\n          case 6:\n            if (localStorageContent != null) {\n              // localStorage value exists.\n              return [2\n              /*return*/\n              , this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent))];\n            } else if (checkIfFileOrLocalStorageExists) {\n              throw new Error(\"File \" + fileNameOrLocalStorageOrData + \" does not exist\");\n            } else {\n              // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n              // Therefore open a database without importing anything.\n              // localStorage value will be written on first write operation.\n              return [2\n              /*return*/\n              , this.createDatabaseConnectionWithImport()];\n            }\n\n            _a.label = 7;\n\n          case 7:\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            return [2\n            /*return*/\n            , this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData)];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Saved the current database to the given file (Node.js), local storage key (browser) or\n   * indexedDB key (browser with enabled useLocalForage option).\n   * If no location path is given, the location path in the options (if specified) will be used.\n   */\n\n\n  SqljsDriver.prototype.save = function (location) {\n    return __awaiter(this, void 0, void 0, function () {\n      var path, content, e_1, database, databaseArray;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!location && !this.options.location) {\n              throw new Error(\"No location is set, specify a location parameter or add the location option to your configuration\");\n            }\n\n            path = \"\";\n\n            if (location) {\n              path = location;\n            } else if (this.options.location) {\n              path = this.options.location;\n            }\n\n            if (!(PlatformTools.type === \"node\")) return [3\n            /*break*/\n            , 5];\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            content = Buffer.from(this.databaseConnection.export());\n            return [4\n            /*yield*/\n            , PlatformTools.writeFile(path, content)];\n\n          case 2:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            throw new Error(\"Could not save database, error: \" + e_1);\n\n          case 4:\n            return [3\n            /*break*/\n            , 10];\n\n          case 5:\n            database = this.databaseConnection.export();\n            databaseArray = [].slice.call(database);\n            if (!this.options.useLocalForage) return [3\n            /*break*/\n            , 9];\n            if (!window.localforage) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , window.localforage.setItem(path, JSON.stringify(databaseArray))];\n\n          case 6:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            throw new Error(\"localforage is not defined - please import localforage.js into your site\");\n\n          case 8:\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n            _a.label = 10;\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * This gets called by the QueryRunner when a change to the database is made.\n   * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n   * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n   * or indexedDB (browser with enabled useLocalForage option).\n   */\n\n\n  SqljsDriver.prototype.autoSave = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.options.autoSave) return [3\n            /*break*/\n            , 4];\n            if (!this.options.autoSaveCallback) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.options.autoSaveCallback(this.export())];\n\n          case 1:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 4];\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.save()];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current database as Uint8Array.\n   */\n\n\n  SqljsDriver.prototype.export = function () {\n    return this.databaseConnection.export();\n  };\n  /**\n   * Creates generated map of values generated or returned by database after INSERT query.\n   */\n\n\n  SqljsDriver.prototype.createGeneratedMap = function (metadata, insertResult) {\n    var _this = this;\n\n    var generatedMap = metadata.generatedColumns.reduce(function (map, generatedColumn) {\n      // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n      if (generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\") {\n        var query = \"SELECT last_insert_rowid()\";\n\n        try {\n          var result = _this.databaseConnection.exec(query);\n\n          _this.connection.logger.logQuery(query);\n\n          return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n        } catch (e) {\n          _this.connection.logger.logQueryError(e, query, []);\n        }\n      }\n\n      return map;\n    }, {});\n    return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   * If the location option is set, the database is loaded first.\n   */\n\n\n  SqljsDriver.prototype.createDatabaseConnection = function () {\n    if (this.options.location) {\n      return this.load(this.options.location, false);\n    }\n\n    return this.createDatabaseConnectionWithImport(this.options.database);\n  };\n  /**\n   * Creates connection with an optional database.\n   * If database is specified it is loaded, otherwise a new empty database is created.\n   */\n\n\n  SqljsDriver.prototype.createDatabaseConnectionWithImport = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isLegacyVersion, sqlite, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            isLegacyVersion = typeof this.sqlite.Database === \"function\";\n            if (!isLegacyVersion) return [3\n            /*break*/\n            , 1];\n            _a = this.sqlite;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.sqlite(this.options.sqlJsConfig)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            sqlite = _a;\n\n            if (database && database.length > 0) {\n              this.databaseConnection = new sqlite.Database(database);\n            } else {\n              this.databaseConnection = new sqlite.Database();\n            } // Enable foreign keys for database\n\n\n            return [2\n            /*return*/\n            , new Promise(function (ok, fail) {\n              try {\n                _this.databaseConnection.exec(\"PRAGMA foreign_keys = ON;\");\n\n                ok(_this.databaseConnection);\n              } catch (e) {\n                fail(e);\n              }\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n\n\n  SqljsDriver.prototype.loadDependencies = function () {\n    if (PlatformTools.type === \"browser\") {\n      this.sqlite = window.SQL;\n    } else {\n      try {\n        this.sqlite = PlatformTools.load(\"sql.js\");\n      } catch (e) {\n        throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n      }\n    }\n  };\n\n  return SqljsDriver;\n}(AbstractSqliteDriver);\n\nexport { SqljsDriver };","map":{"version":3,"sources":["../browser/src/driver/sqljs/SqljsDriver.ts"],"names":[],"mappings":";AAAA,SAAQ,oBAAR,QAAmC,yCAAnC;AAEA,SAAQ,gBAAR,QAA+B,oBAA/B;AAGA,SAAQ,8BAAR,QAA6C,4CAA7C;AACA,SAAQ,uBAAR,QAAsC,qCAAtC;AACA,SAAQ,aAAR,QAA4B,8BAA5B;AAEA,SAAQ,QAAR,QAAuB,qBAAvB;;AAWA,IAAA,WAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAiC,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA,CAAjC,CAII;AACA;AACA;;;AAEA,WAAA,WAAA,CAAY,UAAZ,EAAkC;AAAlC,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAN,KAAiB,IADrB,CAAkC,CAG9B;AACA;;;AACA,QAAI,KAAI,CAAC,OAAL,CAAa,QAAb,IAAyB,CAAC,KAAI,CAAC,OAAL,CAAa,QAAvC,IAAmD,CAAC,KAAI,CAAC,OAAL,CAAa,gBAArE,EAAuF;AACnF,YAAM,IAAI,uBAAJ,CAA4B,8BAA5B,CAAN;AACH,KAP6B,CAS9B;;;AACA,IAAA,KAAI,CAAC,gBAAL;;;AACH,GAnBL,CAsBI;AACA;AACA;;AAEA;;AAEG;;;AACG,EAAA,WAAA,CAAA,SAAA,CAAA,OAAA,GAAN,YAAA;;;;;;;AACI,YAAA,EAAA,GAAA,IAAA;AAA0B,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,wBAAL,EAAN,CAAA;;;AAA1B,YAAA,EAAA,CAAK,kBAAL,GAA0B,EAAA,CAAA,IAAA,EAA1B;;;;;;;AACH,GAFK;AAIN;;AAEG;;;AACG,EAAA,WAAA,CAAA,SAAA,CAAA,UAAA,GAAN,YAAA;;;;;AACI,eAAA,CAAA;AAAA;AAAA,UAAO,IAAI,OAAJ,CAAkB,UAAC,EAAD,EAAK,IAAL,EAAS;AAC9B,cAAI;AACA,YAAA,KAAI,CAAC,WAAL,GAAmB,SAAnB;;AACA,YAAA,KAAI,CAAC,kBAAL,CAAwB,KAAxB;;AACA,YAAA,EAAE;AACL,WAJD,CAKA,OAAO,CAAP,EAAW;AACP,YAAA,IAAI,CAAC,CAAD,CAAJ;AACH;AACJ,SATM,CAAP,CAAA;;;AAUH,GAXK;AAaN;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,IAAlB,EAAuC;AACnC,QAAI,CAAC,KAAK,WAAV,EACI,KAAK,WAAL,GAAmB,IAAI,gBAAJ,CAAqB,IAArB,CAAnB;AAEJ,WAAO,KAAK,WAAZ;AACH,GALD;AAOA;;;AAGG;;;AACG,EAAA,WAAA,CAAA,SAAA,CAAA,IAAA,GAAN,UAAW,4BAAX,EAA8D,+BAA9D,EAA6G;AAA/C,QAAA,+BAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,+BAAA,GAAA,IAAA;AAA+C;;;;;;;gBACrG,EAAA,OAAO,4BAAP,KAAwC,QAAxC,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;gBAEI,EAAA,aAAa,CAAC,IAAd,KAAuB,MAAvB,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA,C,CACA;AACA;;AACA,gBAAI,aAAa,CAAC,SAAd,CAAwB,4BAAxB,CAAJ,EAA2D;AACjD,cAAA,QAAQ,GAAG,aAAa,CAAC,YAAd,CAA2B,4BAA3B,CAAX;AACN,qBAAA,CAAA;AAAA;AAAA,gBAAO,KAAK,kCAAL,CAAwC,QAAxC,CAAP,CAAA;AACH,aAHD,MAIK,IAAI,+BAAJ,EAAqC;AACtC,oBAAM,IAAI,KAAJ,CAAU,UAAQ,4BAAR,GAAoC,iBAA9C,CAAN;AACH,aAFI,MAGA;AACD;AACA;AACA;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAO,KAAK,kCAAL,EAAP,CAAA;AACH;;;;;;;AAKG,YAAA,mBAAmB,GAAG,IAAtB;iBACA,KAAK,OAAL,CAAa,c,EAAb,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;iBACI,MAAM,CAAC,W,EAAP,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACsB,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,WAAP,CAAmB,OAAnB,CAA2B,4BAA3B,CAAN,CAAA;;;AAAtB,YAAA,mBAAmB,GAAG,EAAA,CAAA,IAAA,EAAtB;;;;;;AAEA,kBAAM,IAAI,KAAJ,CAAU,0EAAV,CAAN;;;;;;;;AAGJ,YAAA,mBAAmB,GAAG,aAAa,CAAC,iBAAd,GAAkC,YAAlC,CAA+C,OAA/C,CAAuD,4BAAvD,CAAtB;;;;AAGJ,gBAAI,mBAAmB,IAAI,IAA3B,EAAiC;AAC7B;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAO,KAAK,kCAAL,CAAwC,IAAI,CAAC,KAAL,CAAW,mBAAX,CAAxC,CAAP,CAAA;AACH,aAHD,MAIK,IAAI,+BAAJ,EAAqC;AACtC,oBAAM,IAAI,KAAJ,CAAU,UAAQ,4BAAR,GAAoC,iBAA9C,CAAN;AACH,aAFI,MAGA;AACD;AACA;AACA;AACA,qBAAA,CAAA;AAAA;AAAA,gBAAO,KAAK,kCAAL,EAAP,CAAA;AACH;;;;;;;;;;AAIL,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAK,kCAAL,CAAwC,4BAAxC,CAAP,CAAA;;;;;;;;;AAEP,GApDK;AAsDN;;;;AAIG;;;AACG,EAAA,WAAA,CAAA,SAAA,CAAA,IAAA,GAAN,UAAW,QAAX,EAA4B;;;;;;AACxB,gBAAI,CAAC,QAAD,IAAa,CAAC,KAAK,OAAL,CAAa,QAA/B,EAAyC;AACrC,oBAAM,IAAI,KAAJ,CAAU,mGAAV,CAAN;AACH;;AAEG,YAAA,IAAI,GAAG,EAAP;;AACJ,gBAAI,QAAJ,EAAc;AACV,cAAA,IAAI,GAAG,QAAP;AACH,aAFD,MAGK,IAAI,KAAK,OAAL,CAAa,QAAjB,EAA2B;AAC5B,cAAA,IAAI,GAAG,KAAK,OAAL,CAAa,QAApB;AACH;;gBAEG,EAAA,aAAa,CAAC,IAAd,KAAuB,MAAvB,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;;;;AAEU,YAAA,OAAO,GAAG,MAAM,CAAC,IAAP,CAAY,KAAK,kBAAL,CAAwB,MAAxB,EAAZ,CAAV;AACN,mBAAA,CAAA;AAAA;AAAA,cAAM,aAAa,CAAC,SAAd,CAAwB,IAAxB,EAA8B,OAA9B,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AAGA,kBAAM,IAAI,KAAJ,CAAU,qCAAmC,GAA7C,CAAN;;;;;;;;AAIE,YAAA,QAAQ,GAAe,KAAK,kBAAL,CAAwB,MAAxB,EAAvB;AAEA,YAAA,aAAa,GAAG,GAAG,KAAH,CAAS,IAAT,CAAc,QAAd,CAAhB;iBACF,KAAK,OAAL,CAAa,c,EAAb,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;iBACI,MAAM,CAAC,W,EAAP,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,MAAM,CAAC,WAAP,CAAmB,OAAnB,CAA2B,IAA3B,EAAiC,IAAI,CAAC,SAAL,CAAe,aAAf,CAAjC,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;AAEA,kBAAM,IAAI,KAAJ,CAAU,0EAAV,CAAN;;;;;;;;AAGJ,YAAA,aAAa,CAAC,iBAAd,GAAkC,YAAlC,CAA+C,OAA/C,CAAuD,IAAvD,EAA6D,IAAI,CAAC,SAAL,CAAe,aAAf,CAA7D;;;;;;;;;;AAGX,GApCK;AAsCN;;;;;AAKG;;;AACG,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAN,YAAA;;;;;iBACQ,KAAK,OAAL,CAAa,Q,EAAb,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;iBACI,KAAK,OAAL,CAAa,gB,EAAb,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,OAAL,CAAa,gBAAb,CAA8B,KAAK,MAAL,EAA9B,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;AAGA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,IAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;;AAGX,GATK;AAWN;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACI,WAAO,KAAK,kBAAL,CAAwB,MAAxB,EAAP;AACH,GAFD;AAIA;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,kBAAA,GAAA,UAAmB,QAAnB,EAA6C,YAA7C,EAA8D;AAA9D,QAAA,KAAA,GAAA,IAAA;;AACI,QAAM,YAAY,GAAG,QAAQ,CAAC,gBAAT,CAA0B,MAA1B,CAAiC,UAAC,GAAD,EAAM,eAAN,EAAqB;AACvE;AACA,UAAI,eAAe,CAAC,SAAhB,IAA6B,eAAe,CAAC,kBAAhB,KAAuC,WAAxE,EAAqF;AACjF,YAAM,KAAK,GAAG,4BAAd;;AACA,YAAI;AACA,cAAI,MAAM,GAAG,KAAI,CAAC,kBAAL,CAAwB,IAAxB,CAA6B,KAA7B,CAAb;;AACA,UAAA,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,QAAvB,CAAgC,KAAhC;;AACA,iBAAO,QAAQ,CAAC,SAAT,CAAmB,GAAnB,EAAwB,eAAe,CAAC,cAAhB,CAA+B,MAAM,CAAC,CAAD,CAAN,CAAU,MAAV,CAAiB,CAAjB,EAAoB,CAApB,CAA/B,CAAxB,CAAP;AACH,SAJD,CAKA,OAAO,CAAP,EAAU;AACN,UAAA,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,aAAvB,CAAqC,CAArC,EAAwC,KAAxC,EAA+C,EAA/C;AACH;AACJ;;AAED,aAAO,GAAP;AACH,KAfoB,EAelB,EAfkB,CAArB;AAiBA,WAAO,MAAM,CAAC,IAAP,CAAY,YAAZ,EAA0B,MAA1B,GAAmC,CAAnC,GAAuC,YAAvC,GAAsD,SAA7D;AACH,GAnBD,CA3LJ,CAgNI;AACA;AACA;;AAEA;;;AAGG;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,wBAAA,GAAV,YAAA;AACI,QAAI,KAAK,OAAL,CAAa,QAAjB,EAA2B;AACvB,aAAO,KAAK,IAAL,CAAU,KAAK,OAAL,CAAa,QAAvB,EAAiC,KAAjC,CAAP;AACH;;AAED,WAAO,KAAK,kCAAL,CAAwC,KAAK,OAAL,CAAa,QAArD,CAAP;AACH,GANS;AAQV;;;AAGG;;;AACa,EAAA,WAAA,CAAA,SAAA,CAAA,kCAAA,GAAhB,UAAmD,QAAnD,EAAwE;;;;;;;;;AAE9D,YAAA,eAAe,GAAG,OAAO,KAAK,MAAL,CAAY,QAAnB,KAAgC,UAAlD;iBACS,e,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AAAkB,YAAA,EAAA,GAAA,KAAK,MAAL;;;;;;AAAc,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,MAAL,CAAY,KAAK,OAAL,CAAa,WAAzB,CAAN,CAAA;;;AAAA,YAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EAAA;;;;AAAzC,YAAA,MAAM,GAAA,EAAN;;AACN,gBAAI,QAAQ,IAAI,QAAQ,CAAC,MAAT,GAAkB,CAAlC,EAAqC;AACjC,mBAAK,kBAAL,GAA0B,IAAI,MAAM,CAAC,QAAX,CAAoB,QAApB,CAA1B;AACH,aAFD,MAGK;AACD,mBAAK,kBAAL,GAA0B,IAAI,MAAM,CAAC,QAAX,EAA1B;AACH,a,CAED;;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAO,IAAI,OAAJ,CAAiB,UAAC,EAAD,EAAK,IAAL,EAAS;AAC7B,kBAAI;AACA,gBAAA,KAAI,CAAC,kBAAL,CAAwB,IAAxB,CAA6B,2BAA7B;;AACA,gBAAA,EAAE,CAAC,KAAI,CAAC,kBAAN,CAAF;AACH,eAHD,CAIA,OAAO,CAAP,EAAU;AACN,gBAAA,IAAI,CAAC,CAAD,CAAJ;AACH;AACJ,aARM,CAAP,CAAA;;;;AASH,GArBe;AAuBhB;;AAEG;;;AACO,EAAA,WAAA,CAAA,SAAA,CAAA,gBAAA,GAAV,YAAA;AACI,QAAI,aAAa,CAAC,IAAd,KAAuB,SAA3B,EAAsC;AAClC,WAAK,MAAL,GAAc,MAAM,CAAC,GAArB;AACH,KAFD,MAGK;AACD,UAAI;AACA,aAAK,MAAL,GAAc,aAAa,CAAC,IAAd,CAAmB,QAAnB,CAAd;AAEH,OAHD,CAGE,OAAO,CAAP,EAAU;AACR,cAAM,IAAI,8BAAJ,CAAmC,QAAnC,EAA6C,QAA7C,CAAN;AACH;AACJ;AACJ,GAZS;;AAad,SAAA,WAAA;AAAC,CA3QD,CAAiC,oBAAjC,CAAA","sourcesContent":["import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {SqljsConnectionOptions} from \"./SqljsConnectionOptions\";\nimport {SqljsQueryRunner} from \"./SqljsQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n// This is needed to satisfy the typescript compiler.\ninterface Window {\n    SQL: any;\n    localforage: any;\n}\ndeclare var window: Window;\n\nexport class SqljsDriver extends AbstractSqliteDriver {\n    // The driver specific options.\n    options: SqljsConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        // If autoSave is enabled by user, location or autoSaveCallback have to be set\n        // because either autoSave saves to location or calls autoSaveCallback.\n        if (this.options.autoSave && !this.options.location && !this.options.autoSaveCallback) {\n            throw new DriverOptionNotSetError(`location or autoSaveCallback`);\n        }\n\n        // load sql.js package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = await this.createDatabaseConnection();\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined;\n                this.databaseConnection.close();\n                ok();\n            }\n            catch (e)  {\n                fail(e);\n            }\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new SqljsQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    /**\n     * Loads a database from a given file (Node.js), local storage key (browser) or array.\n     * This will delete the current database!\n     */\n    async load(fileNameOrLocalStorageOrData: string | Uint8Array, checkIfFileOrLocalStorageExists: boolean = true): Promise<any> {\n        if (typeof fileNameOrLocalStorageOrData === \"string\") {\n            // content has to be loaded\n            if (PlatformTools.type === \"node\") {\n                // Node.js\n                // fileNameOrLocalStorageOrData should be a path to the file\n                if (PlatformTools.fileExist(fileNameOrLocalStorageOrData)) {\n                    const database = PlatformTools.readFileSync(fileNameOrLocalStorageOrData);\n                    return this.createDatabaseConnectionWithImport(database);\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // File doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing an existing file.\n                    // File will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n            else {\n                // browser\n                // fileNameOrLocalStorageOrData should be a local storage / indexedDB key\n                let localStorageContent = null;\n                if (this.options.useLocalForage) {\n                    if (window.localforage) {\n                        localStorageContent = await window.localforage.getItem(fileNameOrLocalStorageOrData);\n                    } else {\n                        throw new Error(`localforage is not defined - please import localforage.js into your site`);\n                    }\n                } else {\n                    localStorageContent = PlatformTools.getGlobalVariable().localStorage.getItem(fileNameOrLocalStorageOrData);\n                }\n\n                if (localStorageContent != null) {\n                    // localStorage value exists.\n                    return this.createDatabaseConnectionWithImport(JSON.parse(localStorageContent));\n                }\n                else if (checkIfFileOrLocalStorageExists) {\n                    throw new Error(`File ${fileNameOrLocalStorageOrData} does not exist`);\n                }\n                else {\n                    // localStorage value doesn't exist and checkIfFileOrLocalStorageExists is set to false.\n                    // Therefore open a database without importing anything.\n                    // localStorage value will be written on first write operation.\n                    return this.createDatabaseConnectionWithImport();\n                }\n            }\n        }\n        else {\n            return this.createDatabaseConnectionWithImport(fileNameOrLocalStorageOrData);\n        }\n    }\n\n    /**\n     * Saved the current database to the given file (Node.js), local storage key (browser) or\n     * indexedDB key (browser with enabled useLocalForage option).\n     * If no location path is given, the location path in the options (if specified) will be used.\n     */\n    async save(location?: string) {\n        if (!location && !this.options.location) {\n            throw new Error(`No location is set, specify a location parameter or add the location option to your configuration`);\n        }\n\n        let path = \"\";\n        if (location) {\n            path = location;\n        }\n        else if (this.options.location) {\n            path = this.options.location;\n        }\n\n        if (PlatformTools.type === \"node\") {\n            try {\n                const content = Buffer.from(this.databaseConnection.export());\n                await PlatformTools.writeFile(path, content);\n            }\n            catch (e) {\n                throw new Error(`Could not save database, error: ${e}`);\n            }\n        }\n        else {\n            const database: Uint8Array = this.databaseConnection.export();\n            // convert Uint8Array to number array to improve local-storage storage\n            const databaseArray = [].slice.call(database);\n            if (this.options.useLocalForage) {\n                if (window.localforage) {\n                    await window.localforage.setItem(path, JSON.stringify(databaseArray));\n                } else {\n                    throw new Error(`localforage is not defined - please import localforage.js into your site`);\n                }\n            } else {\n                PlatformTools.getGlobalVariable().localStorage.setItem(path, JSON.stringify(databaseArray));\n            }\n        }\n    }\n\n    /**\n     * This gets called by the QueryRunner when a change to the database is made.\n     * If a custom autoSaveCallback is specified, it get's called with the database as Uint8Array,\n     * otherwise the save method is called which saves it to file (Node.js), local storage (browser)\n     * or indexedDB (browser with enabled useLocalForage option).\n     */\n    async autoSave() {\n        if (this.options.autoSave) {\n            if (this.options.autoSaveCallback) {\n                await this.options.autoSaveCallback(this.export());\n            }\n            else {\n                await this.save();\n            }\n        }\n    }\n\n    /**\n     * Returns the current database as Uint8Array.\n     */\n    export(): Uint8Array {\n        return this.databaseConnection.export();\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: any) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            // seems to be the only way to get the inserted id, see https://github.com/kripken/sql.js/issues/77\n            if (generatedColumn.isPrimary && generatedColumn.generationStrategy === \"increment\") {\n                const query = \"SELECT last_insert_rowid()\";\n                try {\n                    let result = this.databaseConnection.exec(query);\n                    this.connection.logger.logQuery(query);\n                    return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(result[0].values[0][0]));\n                }\n                catch (e) {\n                    this.connection.logger.logQueryError(e, query, []);\n                }\n            }\n\n            return map;\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     * If the location option is set, the database is loaded first.\n     */\n    protected createDatabaseConnection(): Promise<any> {\n        if (this.options.location) {\n            return this.load(this.options.location, false);\n        }\n\n        return this.createDatabaseConnectionWithImport(this.options.database);\n    }\n\n    /**\n     * Creates connection with an optional database.\n     * If database is specified it is loaded, otherwise a new empty database is created.\n     */\n    protected async createDatabaseConnectionWithImport(database?: Uint8Array): Promise<any> {\n        // sql.js < 1.0 exposes an object with a `Database` method.\n        const isLegacyVersion = typeof this.sqlite.Database === \"function\";\n        const sqlite = isLegacyVersion ? this.sqlite : await this.sqlite(this.options.sqlJsConfig);\n        if (database && database.length > 0) {\n            this.databaseConnection = new sqlite.Database(database);\n        }\n        else {\n            this.databaseConnection = new sqlite.Database();\n        }\n\n        // Enable foreign keys for database\n        return new Promise<any>((ok, fail) => {\n            try {\n                this.databaseConnection.exec(`PRAGMA foreign_keys = ON;`);\n                ok(this.databaseConnection);\n            }\n            catch (e) {\n                fail(e);\n            }\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        if (PlatformTools.type === \"browser\") {\n            this.sqlite = window.SQL;\n        }\n        else {\n            try {\n                this.sqlite = PlatformTools.load(\"sql.js\");\n\n            } catch (e) {\n                throw new DriverPackageNotInstalledError(\"sql.js\", \"sql.js\");\n            }\n        }\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}