{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { EntityManager } from \"./EntityManager\";\n/**\n * A special EntityManager that includes import/export and load/save function\n * that are unique to Sql.js.\n */\n\nvar SqljsEntityManager =\n/** @class */\nfunction (_super) {\n  __extends(SqljsEntityManager, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function SqljsEntityManager(connection, queryRunner) {\n    var _this = _super.call(this, connection, queryRunner) || this;\n\n    _this.driver = connection.driver;\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Loads either the definition from a file (Node.js) or localstorage (browser)\n   * or uses the given definition to open a new database.\n   */\n\n\n  SqljsEntityManager.prototype.loadDatabase = function (fileNameOrLocalStorageOrData) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.driver.load(fileNameOrLocalStorageOrData)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Saves the current database to a file (Node.js) or localstorage (browser)\n   * if fileNameOrLocalStorage is not set options.location is used.\n   */\n\n\n  SqljsEntityManager.prototype.saveDatabase = function (fileNameOrLocalStorage) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.driver.save(fileNameOrLocalStorage)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the current database definition.\n   */\n\n\n  SqljsEntityManager.prototype.exportDatabase = function () {\n    return this.driver.export();\n  };\n\n  return SqljsEntityManager;\n}(EntityManager);\n\nexport { SqljsEntityManager };","map":{"version":3,"sources":["../browser/src/entity-manager/SqljsEntityManager.ts"],"names":[],"mappings":";AAEA,SAAQ,aAAR,QAA4B,iBAA5B;AAGA;;;AAGG;;AACH,IAAA,kBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAwC,EAAA,SAAA,CAAA,kBAAA,EAAA,MAAA,CAAA,CAAxC,CAGI;AACA;AACA;;;AAEA,WAAA,kBAAA,CAAY,UAAZ,EAAoC,WAApC,EAA6D;AAA7D,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAN,EAAkB,WAAlB,KAA8B,IADlC;;AAEI,IAAA,KAAI,CAAC,MAAL,GAAc,UAAU,CAAC,MAAzB;;AACH,GAVL,CAYI;AACA;AACA;;AAEA;;;AAGG;;;AACG,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAN,UAAmB,4BAAnB,EAAoE;;;;;AAChE,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,MAAL,CAAY,IAAZ,CAAiB,4BAAjB,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AACH,GAFK;AAIN;;;AAGG;;;AACG,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAN,UAAmB,sBAAnB,EAAkD;;;;;AAC9C,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,MAAL,CAAY,IAAZ,CAAiB,sBAAjB,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AACH,GAFK;AAIN;;AAEG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACI,WAAO,KAAK,MAAL,CAAY,MAAZ,EAAP;AACH,GAFD;;AAIH,SAAA,kBAAA;AAAC,CAvCF,CAAwC,aAAxC,CAAA","sourcesContent":["import {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityManager} from \"./EntityManager\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\n\n/**\n * A special EntityManager that includes import/export and load/save function\n * that are unique to Sql.js.\n */\nexport class SqljsEntityManager extends EntityManager {\n    private driver: SqljsDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection, queryRunner?: QueryRunner) {\n        super(connection, queryRunner);\n        this.driver = connection.driver as SqljsDriver;\n    }\n    \n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads either the definition from a file (Node.js) or localstorage (browser)\n     * or uses the given definition to open a new database.\n     */\n    async loadDatabase(fileNameOrLocalStorageOrData: string | Uint8Array): Promise<void> {\n        await this.driver.load(fileNameOrLocalStorageOrData);\n    }\n    \n    /**\n     * Saves the current database to a file (Node.js) or localstorage (browser)\n     * if fileNameOrLocalStorage is not set options.location is used.\n     */\n    async saveDatabase(fileNameOrLocalStorage?: string): Promise<void> {\n        await this.driver.save(fileNameOrLocalStorage);\n    }\n\n    /**\n     * Returns the current database definition.\n     */\n    exportDatabase(): Uint8Array {\n        return this.driver.export();\n    }\n\n }"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}