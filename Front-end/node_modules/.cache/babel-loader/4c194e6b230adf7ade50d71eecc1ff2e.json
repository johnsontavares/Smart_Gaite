{"ast":null,"code":"import { getMetadataArgsStorage } from \"../\";\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\n\nexport function Index(nameOrFieldsOrOptions, maybeFieldsOrOptions, maybeOptions) {\n  // normalize parameters\n  var name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\n  var fields = typeof nameOrFieldsOrOptions === \"string\" ? maybeFieldsOrOptions : nameOrFieldsOrOptions;\n  var options = typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions) ? nameOrFieldsOrOptions : maybeOptions;\n  if (!options) options = typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions) ? maybeFieldsOrOptions : maybeOptions;\n  return function (clsOrObject, propertyName) {\n    getMetadataArgsStorage().indices.push({\n      target: propertyName ? clsOrObject.constructor : clsOrObject,\n      name: name,\n      columns: propertyName ? [propertyName] : fields,\n      synchronize: options && options.synchronize === false ? false : true,\n      where: options ? options.where : undefined,\n      unique: options && options.unique ? true : false,\n      spatial: options && options.spatial ? true : false,\n      fulltext: options && options.fulltext ? true : false,\n      parser: options ? options.parser : undefined,\n      sparse: options && options.sparse ? true : false,\n      background: options && options.background ? true : false,\n      expireAfterSeconds: options ? options.expireAfterSeconds : undefined\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/Index.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAR,QAAmD,KAAnD;AAoDA;;;;AAIG;;AACH,OAAM,SAAU,KAAV,CAAgB,qBAAhB,EACgB,oBADhB,EAEgB,YAFhB,EAE2C;AAE7C;AACA,MAAM,IAAI,GAAG,OAAO,qBAAP,KAAiC,QAAjC,GAA4C,qBAA5C,GAAoE,SAAjF;AACA,MAAM,MAAM,GAAG,OAAO,qBAAP,KAAiC,QAAjC,GAA6G,oBAA7G,GAAoI,qBAAnJ;AACA,MAAI,OAAO,GAAI,OAAO,qBAAP,KAAiC,QAAjC,IAA6C,CAAC,KAAK,CAAC,OAAN,CAAc,qBAAd,CAA/C,GAAuF,qBAAvF,GAA+H,YAA7I;AACA,MAAI,CAAC,OAAL,EACI,OAAO,GAAI,OAAO,oBAAP,KAAgC,QAAhC,IAA4C,CAAC,KAAK,CAAC,OAAN,CAAc,oBAAd,CAA9C,GAAqF,oBAArF,GAA4H,YAAtI;AAEJ,SAAO,UAAU,WAAV,EAAwC,YAAxC,EAAsE;AAEzE,IAAA,sBAAsB,GAAG,OAAzB,CAAiC,IAAjC,CAAsC;AAClC,MAAA,MAAM,EAAE,YAAY,GAAG,WAAW,CAAC,WAAf,GAA6B,WADf;AAElC,MAAA,IAAI,EAAE,IAF4B;AAGlC,MAAA,OAAO,EAAE,YAAY,GAAG,CAAC,YAAD,CAAH,GAAoB,MAHP;AAIlC,MAAA,WAAW,EAAE,OAAO,IAAK,OAAkC,CAAC,WAAnC,KAAmD,KAA/D,GAAuE,KAAvE,GAA+E,IAJ1D;AAKlC,MAAA,KAAK,EAAE,OAAO,GAAG,OAAO,CAAC,KAAX,GAAmB,SALC;AAMlC,MAAA,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAnB,GAA4B,IAA5B,GAAmC,KANT;AAOlC,MAAA,OAAO,EAAE,OAAO,IAAI,OAAO,CAAC,OAAnB,GAA6B,IAA7B,GAAoC,KAPX;AAQlC,MAAA,QAAQ,EAAE,OAAO,IAAI,OAAO,CAAC,QAAnB,GAA8B,IAA9B,GAAqC,KARb;AASlC,MAAA,MAAM,EAAE,OAAO,GAAG,OAAO,CAAC,MAAX,GAAoB,SATD;AAUlC,MAAA,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAnB,GAA4B,IAA5B,GAAmC,KAVT;AAWlC,MAAA,UAAU,EAAE,OAAO,IAAI,OAAO,CAAC,UAAnB,GAAgC,IAAhC,GAAuC,KAXjB;AAYlC,MAAA,kBAAkB,EAAE,OAAO,GAAG,OAAO,CAAC,kBAAX,GAAgC;AAZzB,KAAtC;AAcH,GAhBD;AAiBH","sourcesContent":["import {getMetadataArgsStorage, IndexOptions} from \"../\";\nimport {IndexMetadataArgs} from \"../metadata-args/IndexMetadataArgs\";\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, options: { synchronize: false }): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, fields: string[], options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(fields: string[], options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(name: string, fields: (object?: any) => (any[]|{ [key: string]: number }), options?: IndexOptions): ClassDecorator & PropertyDecorator;\n\n/**\n * Creates a database index.\n * Can be used on entity property or on entity.\n * Can create indices with composite columns when used on entity.\n */\nexport function Index(nameOrFieldsOrOptions?: string|string[]|((object: any) => (any[]|{ [key: string]: number }))|IndexOptions,\n                      maybeFieldsOrOptions?: ((object?: any) => (any[]|{ [key: string]: number }))|IndexOptions|string[]|{ synchronize: false },\n                      maybeOptions?: IndexOptions): ClassDecorator & PropertyDecorator {\n\n    // normalize parameters\n    const name = typeof nameOrFieldsOrOptions === \"string\" ? nameOrFieldsOrOptions : undefined;\n    const fields = typeof nameOrFieldsOrOptions === \"string\" ? <((object?: any) => (any[]|{ [key: string]: number }))|string[]> maybeFieldsOrOptions : nameOrFieldsOrOptions as string[];\n    let options = (typeof nameOrFieldsOrOptions === \"object\" && !Array.isArray(nameOrFieldsOrOptions)) ? nameOrFieldsOrOptions as IndexOptions : maybeOptions;\n    if (!options)\n        options = (typeof maybeFieldsOrOptions === \"object\" && !Array.isArray(maybeFieldsOrOptions)) ? maybeFieldsOrOptions as IndexOptions : maybeOptions;\n\n    return function (clsOrObject: Function|Object, propertyName?: string | symbol) {\n\n        getMetadataArgsStorage().indices.push({\n            target: propertyName ? clsOrObject.constructor : clsOrObject as Function,\n            name: name,\n            columns: propertyName ? [propertyName] : fields,\n            synchronize: options && (options as { synchronize: false }).synchronize === false ? false : true,\n            where: options ? options.where : undefined,\n            unique: options && options.unique ? true : false,\n            spatial: options && options.spatial ? true : false,\n            fulltext: options && options.fulltext ? true : false,\n            parser: options ? options.parser : undefined,\n            sparse: options && options.sparse ? true : false,\n            background: options && options.background ? true : false,\n            expireAfterSeconds: options ? options.expireAfterSeconds : undefined\n        } as IndexMetadataArgs);\n    };\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}