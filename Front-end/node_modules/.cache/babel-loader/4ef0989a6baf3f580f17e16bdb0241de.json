{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CapacitorQueryRunner } from \"./CapacitorQueryRunner\";\nimport { DriverOptionNotSetError, DriverPackageNotInstalledError } from \"../../error\";\n\nvar CapacitorDriver =\n/** @class */\nfunction (_super) {\n  __extends(CapacitorDriver, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function CapacitorDriver(connection) {\n    var _this = _super.call(this, connection) || this;\n\n    _this.database = _this.options.database;\n    _this.driver = _this.options.driver; // validate options to make sure everything is set\n\n    if (!_this.options.database) throw new DriverOptionNotSetError(\"database\");\n    if (!_this.options.driver) throw new DriverOptionNotSetError(\"driver\"); // load sqlite package\n\n    _this.sqlite = _this.options.driver;\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs connection to the database.\n   */\n\n\n  CapacitorDriver.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.databaseConnection = this.createDatabaseConnection();\n            return [4\n            /*yield*/\n            , this.databaseConnection];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Closes connection with database.\n   */\n\n\n  CapacitorDriver.prototype.disconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var databaseConnection;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.queryRunner = undefined;\n            return [4\n            /*yield*/\n            , this.databaseConnection];\n\n          case 1:\n            databaseConnection = _a.sent();\n            return [2\n            /*return*/\n            , databaseConnection.close().then(function () {\n              _this.databaseConnection = undefined;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  CapacitorDriver.prototype.createQueryRunner = function (mode) {\n    if (!this.queryRunner) this.queryRunner = new CapacitorQueryRunner(this);\n    return this.queryRunner;\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   */\n\n\n  CapacitorDriver.prototype.createDatabaseConnection = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var connection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.sqlite.createConnection(this.options.database, false, \"no-encryption\", 1)];\n\n          case 1:\n            connection = _a.sent();\n            return [4\n            /*yield*/\n            , connection.open()];\n\n          case 2:\n            _a.sent(); // we need to enable foreign keys in sqlite to make sure all foreign key related features\n            // working properly. this also makes onDelete to work with sqlite.\n\n\n            return [4\n            /*yield*/\n            , connection.execute(\"PRAGMA foreign_keys = ON;\")];\n\n          case 3:\n            // we need to enable foreign keys in sqlite to make sure all foreign key related features\n            // working properly. this also makes onDelete to work with sqlite.\n            _a.sent();\n\n            return [2\n            /*return*/\n            , connection];\n        }\n      });\n    });\n  };\n\n  CapacitorDriver.prototype.loadDependencies = function () {\n    this.sqlite = this.driver;\n\n    if (!this.driver) {\n      throw new DriverPackageNotInstalledError(\"Capacitor\", \"@capacitor-community/sqlite\");\n    }\n  };\n\n  return CapacitorDriver;\n}(AbstractSqliteDriver);\n\nexport { CapacitorDriver };","map":{"version":3,"sources":["../browser/src/driver/capacitor/CapacitorDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { CapacitorConnectionOptions } from \"./CapacitorConnectionOptions\";\nimport { CapacitorQueryRunner } from \"./CapacitorQueryRunner\";\nimport { QueryRunner } from \"../../query-runner/QueryRunner\";\nimport { Connection } from \"../../connection/Connection\";\nimport {\n    DriverOptionNotSetError,\n    DriverPackageNotInstalledError,\n} from \"../../error\";\nimport { ReplicationMode } from \"../types/ReplicationMode\";\n\nexport class CapacitorDriver extends AbstractSqliteDriver {\n    driver: any;\n    options: CapacitorConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.database = this.options.database;\n        this.driver = this.options.driver;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        if (!this.options.driver) throw new DriverOptionNotSetError(\"driver\");\n\n        // load sqlite package\n        this.sqlite = this.options.driver;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     */\n    async connect(): Promise<void> {\n        this.databaseConnection = this.createDatabaseConnection();\n        await this.databaseConnection;\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        this.queryRunner = undefined;\n        const databaseConnection = await this.databaseConnection;\n        return databaseConnection.close().then(() => {\n            this.databaseConnection = undefined;\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new CapacitorQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected async createDatabaseConnection() {\n        const connection = await this.sqlite.createConnection(\n            this.options.database,\n            false,\n            \"no-encryption\",\n            1\n        );\n        await connection.open();\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete to work with sqlite.\n        await connection.execute(`PRAGMA foreign_keys = ON;`);\n        return connection;\n    }\n\n    protected loadDependencies(): void {\n        this.sqlite = this.driver;\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\n                \"Capacitor\",\n                \"@capacitor-community/sqlite\"\n            );\n        }\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}