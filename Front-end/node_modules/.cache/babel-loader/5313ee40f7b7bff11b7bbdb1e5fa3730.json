{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../\";\n/**\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\n * Entity2 on its side of the relation.\n */\n\nexport function ManyToOne(typeFunctionOrTarget, inverseSideOrOptions, options) {\n  // Normalize parameters.\n  var inverseSideProperty;\n\n  if (typeof inverseSideOrOptions === \"object\") {\n    options = inverseSideOrOptions;\n  } else {\n    inverseSideProperty = inverseSideOrOptions;\n  }\n\n  return function (object, propertyName) {\n    if (!options) options = {}; // Now try to determine if it is a lazy relation.\n\n    var isLazy = options && options.lazy === true;\n\n    if (!isLazy && Reflect && Reflect.getMetadata) {\n      // automatic determination\n      var reflectedType = Reflect.getMetadata(\"design:type\", object, propertyName);\n      if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\") isLazy = true;\n    }\n\n    getMetadataArgsStorage().relations.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      // propertyType: reflectedType,\n      relationType: \"many-to-one\",\n      isLazy: isLazy,\n      type: typeFunctionOrTarget,\n      inverseSideProperty: inverseSideProperty,\n      options: options\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/relations/ManyToOne.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAR,QAAkE,QAAlE;AAmBA;;;;AAIG;;AACH,OAAM,SAAU,SAAV,CAAuB,oBAAvB,EACuB,oBADvB,EAEuB,OAFvB,EAEgD;AAElD;AACA,MAAI,mBAAJ;;AACA,MAAI,OAAO,oBAAP,KAAgC,QAApC,EAA8C;AAC1C,IAAA,OAAO,GAAqB,oBAA5B;AACH,GAFD,MAEO;AACH,IAAA,mBAAmB,GAAiC,oBAApD;AACH;;AAED,SAAO,UAAU,MAAV,EAA0B,YAA1B,EAA8C;AACjD,QAAI,CAAC,OAAL,EAAc,OAAO,GAAG,EAAV,CADmC,CAGjD;;AACA,QAAI,MAAM,GAAG,OAAO,IAAI,OAAO,CAAC,IAAR,KAAiB,IAAzC;;AACA,QAAI,CAAC,MAAD,IAAW,OAAX,IAAuB,OAAe,CAAC,WAA3C,EAAwD;AAAE;AACtD,UAAM,aAAa,GAAI,OAAe,CAAC,WAAhB,CAA4B,aAA5B,EAA2C,MAA3C,EAAmD,YAAnD,CAAvB;AACA,UAAI,aAAa,IAAI,OAAO,aAAa,CAAC,IAArB,KAA8B,QAA/C,IAA2D,aAAa,CAAC,IAAd,CAAmB,WAAnB,OAAqC,SAApG,EACI,MAAM,GAAG,IAAT;AACP;;AAED,IAAA,sBAAsB,GAAG,SAAzB,CAAmC,IAAnC,CAAwC;AACpC,MAAA,MAAM,EAAE,MAAM,CAAC,WADqB;AAEpC,MAAA,YAAY,EAAE,YAFsB;AAGpC;AACA,MAAA,YAAY,EAAE,aAJsB;AAKpC,MAAA,MAAM,EAAE,MAL4B;AAMpC,MAAA,IAAI,EAAE,oBAN8B;AAOpC,MAAA,mBAAmB,EAAE,mBAPe;AAQpC,MAAA,OAAO,EAAE;AAR2B,KAAxC;AAUH,GArBD;AAsBH","sourcesContent":["import {getMetadataArgsStorage, ObjectType, RelationOptions} from \"../../\";\nimport {RelationMetadataArgs} from \"../../metadata-args/RelationMetadataArgs\";\n\n/**\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\n * Entity2 on its side of the relation.\n */\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>), options?: RelationOptions): PropertyDecorator;\n\n/**\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\n * Entity2 on its side of the relation.\n */\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                             inverseSide?: string|((object: T) => any),\n                             options?: RelationOptions): PropertyDecorator;\n\n/**\n * A many-to-one relation allows creating the type of relation where Entity1 can have a single instance of Entity2, but\n * Entity2 can have multiple instances of Entity1. Entity1 is the owner of the relationship, and stores the id of\n * Entity2 on its side of the relation.\n */\nexport function ManyToOne<T>(typeFunctionOrTarget: string|((type?: any) => ObjectType<T>),\n                             inverseSideOrOptions?: string|((object: T) => any)|RelationOptions,\n                             options?: RelationOptions): PropertyDecorator {\n\n    // Normalize parameters.\n    let inverseSideProperty: string|((object: T) => any);\n    if (typeof inverseSideOrOptions === \"object\") {\n        options = <RelationOptions> inverseSideOrOptions;\n    } else {\n        inverseSideProperty = <string|((object: T) => any)> inverseSideOrOptions;\n    }\n\n    return function (object: Object, propertyName: string) {\n        if (!options) options = {} as RelationOptions;\n\n        // Now try to determine if it is a lazy relation.\n        let isLazy = options && options.lazy === true;\n        if (!isLazy && Reflect && (Reflect as any).getMetadata) { // automatic determination\n            const reflectedType = (Reflect as any).getMetadata(\"design:type\", object, propertyName);\n            if (reflectedType && typeof reflectedType.name === \"string\" && reflectedType.name.toLowerCase() === \"promise\")\n                isLazy = true;\n        }\n\n        getMetadataArgsStorage().relations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            // propertyType: reflectedType,\n            relationType: \"many-to-one\",\n            isLazy: isLazy,\n            type: typeFunctionOrTarget,\n            inverseSideProperty: inverseSideProperty,\n            options: options\n        } as RelationMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}