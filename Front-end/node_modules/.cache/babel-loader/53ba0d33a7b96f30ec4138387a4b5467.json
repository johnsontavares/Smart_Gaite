{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../\";\nimport { CannotReflectMethodParameterTypeError } from \"../../error/CannotReflectMethodParameterTypeError\";\n/**\n * Injects transaction's repository into the method wrapped with @Transaction decorator.\n */\n\nexport function TransactionRepository(entityType) {\n  return function (object, methodName, index) {\n    // get repository type\n    var repositoryType;\n\n    try {\n      repositoryType = Reflect.getOwnMetadata(\"design:paramtypes\", object, methodName)[index];\n    } catch (err) {\n      throw new CannotReflectMethodParameterTypeError(object.constructor, methodName);\n    }\n\n    getMetadataArgsStorage().transactionRepositories.push({\n      target: object.constructor,\n      methodName: methodName,\n      index: index,\n      repositoryType: repositoryType,\n      entityType: entityType\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/transaction/TransactionRepository.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAR,QAAqC,QAArC;AAEA,SAAQ,qCAAR,QAAoD,mDAApD;AAEA;;AAEG;;AACH,OAAM,SAAU,qBAAV,CAAgC,UAAhC,EAAqD;AACvD,SAAO,UAAC,MAAD,EAAiB,UAAjB,EAAqC,KAArC,EAAkD;AAErD;AACA,QAAI,cAAJ;;AACA,QAAI;AACA,MAAA,cAAc,GAAG,OAAO,CAAC,cAAR,CAAuB,mBAAvB,EAA4C,MAA5C,EAAoD,UAApD,EAAgE,KAAhE,CAAjB;AACH,KAFD,CAEE,OAAO,GAAP,EAAY;AACV,YAAM,IAAI,qCAAJ,CAA0C,MAAM,CAAC,WAAjD,EAA8D,UAA9D,CAAN;AACH;;AAED,IAAA,sBAAsB,GAAG,uBAAzB,CAAiD,IAAjD,CAAsD;AAClD,MAAA,MAAM,EAAE,MAAM,CAAC,WADmC;AAElD,MAAA,UAAU,EAAA,UAFwC;AAGlD,MAAA,KAAK,EAAA,KAH6C;AAIlD,MAAA,cAAc,EAAA,cAJoC;AAKlD,MAAA,UAAU,EAAA;AALwC,KAAtD;AAOH,GAjBD;AAkBH","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\nimport {TransactionRepositoryMetadataArgs} from \"../../metadata-args/TransactionRepositoryMetadataArgs\";\nimport {CannotReflectMethodParameterTypeError} from \"../../error/CannotReflectMethodParameterTypeError\";\n\n/**\n * Injects transaction's repository into the method wrapped with @Transaction decorator.\n */\nexport function TransactionRepository(entityType?: Function): ParameterDecorator {\n    return (object: Object, methodName: string, index: number) => {\n\n        // get repository type\n        let repositoryType: Function;\n        try {\n            repositoryType = Reflect.getOwnMetadata(\"design:paramtypes\", object, methodName)[index];\n        } catch (err) {\n            throw new CannotReflectMethodParameterTypeError(object.constructor, methodName);\n        }\n        \n        getMetadataArgsStorage().transactionRepositories.push({\n            target: object.constructor,\n            methodName,\n            index,\n            repositoryType,\n            entityType,\n        } as TransactionRepositoryMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}