{"ast":null,"code":"import { PlatformTools } from \"../platform/PlatformTools\";\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\n\nvar AdvancedConsoleLogger =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function AdvancedConsoleLogger(options) {\n    this.options = options;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Logs query and parameters used in it.\n   */\n\n\n  AdvancedConsoleLogger.prototype.logQuery = function (query, parameters, queryRunner) {\n    if (this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1) {\n      var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n      PlatformTools.logInfo(\"query:\", PlatformTools.highlightSql(sql));\n    }\n  };\n  /**\n   * Logs query that is failed.\n   */\n\n\n  AdvancedConsoleLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {\n    if (this.options === \"all\" || this.options === true || Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1) {\n      var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n      PlatformTools.logError(\"query failed:\", PlatformTools.highlightSql(sql));\n      PlatformTools.logError(\"error:\", error);\n    }\n  };\n  /**\n   * Logs query that is slow.\n   */\n\n\n  AdvancedConsoleLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {\n    var sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n    PlatformTools.logWarn(\"query is slow:\", PlatformTools.highlightSql(sql));\n    PlatformTools.logWarn(\"execution time:\", time);\n  };\n  /**\n   * Logs events from the schema build process.\n   */\n\n\n  AdvancedConsoleLogger.prototype.logSchemaBuild = function (message, queryRunner) {\n    if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1) {\n      PlatformTools.log(message);\n    }\n  };\n  /**\n   * Logs events from the migration run process.\n   */\n\n\n  AdvancedConsoleLogger.prototype.logMigration = function (message, queryRunner) {\n    PlatformTools.log(message);\n  };\n  /**\n   * Perform logging using given logger, or by default to the console.\n   * Log has its own level and message.\n   */\n\n\n  AdvancedConsoleLogger.prototype.log = function (level, message, queryRunner) {\n    switch (level) {\n      case \"log\":\n        if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1) PlatformTools.log(message);\n        break;\n\n      case \"info\":\n        if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1) PlatformTools.logInfo(\"INFO:\", message);\n        break;\n\n      case \"warn\":\n        if (this.options === \"all\" || Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1) console.warn(PlatformTools.warn(message));\n        break;\n    }\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Converts parameters to a string.\n   * Sometimes parameters can have circular objects and therefor we are handle this case too.\n   */\n\n\n  AdvancedConsoleLogger.prototype.stringifyParams = function (parameters) {\n    try {\n      return JSON.stringify(parameters);\n    } catch (error) {\n      // most probably circular objects in parameters\n      return parameters;\n    }\n  };\n\n  return AdvancedConsoleLogger;\n}();\n\nexport { AdvancedConsoleLogger };","map":{"version":3,"sources":["../browser/src/logger/AdvancedConsoleLogger.ts"],"names":[],"mappings":"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","sourcesContent":["import {LoggerOptions} from \"./LoggerOptions\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {Logger} from \"./Logger\";\n\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger uses console to log events and use syntax highlighting.\n */\nexport class AdvancedConsoleLogger implements Logger {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private options?: LoggerOptions) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"query\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            PlatformTools.logInfo(\"query:\", PlatformTools.highlightSql(sql));\n        }\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError(error: string, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || this.options === true || (Array.isArray(this.options) && this.options.indexOf(\"error\") !== -1)) {\n            const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n            PlatformTools.logError(`query failed:`, PlatformTools.highlightSql(sql));\n            PlatformTools.logError(`error:`, error);\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        const sql = query + (parameters && parameters.length ? \" -- PARAMETERS: \" + this.stringifyParams(parameters) : \"\");\n        PlatformTools.logWarn(`query is slow:`, PlatformTools.highlightSql(sql));\n        PlatformTools.logWarn(`execution time:`, time);\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"schema\") !== -1)) {\n            PlatformTools.log(message);\n        }\n    }\n\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        PlatformTools.log(message);\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log(level: \"log\"|\"info\"|\"warn\", message: any, queryRunner?: QueryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"log\") !== -1))\n                    PlatformTools.log(message);\n                break;\n            case \"info\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"info\") !== -1))\n                    PlatformTools.logInfo(\"INFO:\", message);\n                break;\n            case \"warn\":\n                if (this.options === \"all\" || (Array.isArray(this.options) && this.options.indexOf(\"warn\") !== -1))\n                    console.warn(PlatformTools.warn(message));\n                break;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Converts parameters to a string.\n     * Sometimes parameters can have circular objects and therefor we are handle this case too.\n     */\n    protected stringifyParams(parameters: any[]) {\n        try {\n            return JSON.stringify(parameters);\n\n        } catch (error) { // most probably circular objects in parameters\n            return parameters;\n        }\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}