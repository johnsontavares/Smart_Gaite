{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { PostgresDriver } from \"../postgres/PostgresDriver\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { AuroraDataApiPostgresQueryRunner } from \"../aurora-data-api-pg/AuroraDataApiPostgresQueryRunner\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\n\nvar PostgresWrapper =\n/** @class */\nfunction (_super) {\n  __extends(PostgresWrapper, _super);\n\n  function PostgresWrapper() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return PostgresWrapper;\n}(PostgresDriver);\n\nvar AuroraDataApiPostgresDriver =\n/** @class */\nfunction (_super) {\n  __extends(AuroraDataApiPostgresDriver, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function AuroraDataApiPostgresDriver(connection) {\n    var _this = _super.call(this) || this;\n\n    _this.connection = connection;\n    _this.options = connection.options;\n    _this.isReplicated = false; // load data-api package\n\n    _this.loadDependencies();\n\n    _this.client = new _this.DataApiDriver(_this.options.region, _this.options.secretArn, _this.options.resourceArn, _this.options.database, function (query, parameters) {\n      return _this.connection.logger.logQuery(query, parameters);\n    }, _this.options.serviceConfigOptions, _this.options.formatOptions);\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs connection to the database.\n   * Based on pooling options, it can either create connection immediately,\n   * either create a pool and create connection when needed.\n   */\n\n\n  AuroraDataApiPostgresDriver.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Closes connection with database.\n   */\n\n\n  AuroraDataApiPostgresDriver.prototype.disconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  AuroraDataApiPostgresDriver.prototype.createQueryRunner = function (mode) {\n    var _this = this;\n\n    return new AuroraDataApiPostgresQueryRunner(this, new this.DataApiDriver(this.options.region, this.options.secretArn, this.options.resourceArn, this.options.database, function (query, parameters) {\n      return _this.connection.logger.logQuery(query, parameters);\n    }, this.options.serviceConfigOptions, this.options.formatOptions), mode);\n  };\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n\n\n  AuroraDataApiPostgresDriver.prototype.preparePersistentValue = function (value, columnMetadata) {\n    if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n      return _super.prototype.preparePersistentValue.call(this, value, columnMetadata);\n    }\n\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n    return this.client.preparePersistentValue(value, columnMetadata);\n  };\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n\n\n  AuroraDataApiPostgresDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {\n    if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n      return _super.prototype.prepareHydratedValue.call(this, value, columnMetadata);\n    }\n\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n    return this.client.prepareHydratedValue(value, columnMetadata);\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n\n\n  AuroraDataApiPostgresDriver.prototype.loadDependencies = function () {\n    var pg = PlatformTools.load(\"typeorm-aurora-data-api-driver\").pg;\n    this.DataApiDriver = pg;\n  };\n  /**\n   * Executes given query.\n   */\n\n\n  AuroraDataApiPostgresDriver.prototype.executeQuery = function (connection, query) {\n    return this.connection.query(query);\n  };\n  /**\n   * Makes any action after connection (e.g. create extensions in Postgres driver).\n   */\n\n\n  AuroraDataApiPostgresDriver.prototype.afterConnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var extensionsMetadata;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.checkMetadataForExtensions()];\n\n          case 1:\n            extensionsMetadata = _a.sent();\n            if (!extensionsMetadata.hasExtensions) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.enableExtensions(extensionsMetadata, this.connection)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [2\n            /*return*/\n            , Promise.resolve()];\n        }\n      });\n    });\n  };\n\n  return AuroraDataApiPostgresDriver;\n}(PostgresWrapper);\n\nexport { AuroraDataApiPostgresDriver };","map":{"version":3,"sources":["../browser/src/driver/aurora-data-api-pg/AuroraDataApiPostgresDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import {Driver} from \"../Driver\";\nimport {PostgresDriver} from \"../postgres/PostgresDriver\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {AuroraDataApiPostgresConnectionOptions} from \"../aurora-data-api-pg/AuroraDataApiPostgresConnectionOptions\";\nimport {AuroraDataApiPostgresQueryRunner} from \"../aurora-data-api-pg/AuroraDataApiPostgresQueryRunner\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\n\nabstract class PostgresWrapper extends PostgresDriver {\n    options: any;\n\n    abstract createQueryRunner(mode: ReplicationMode): any;\n}\n\nexport class AuroraDataApiPostgresDriver extends PostgresWrapper implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Aurora Data API underlying library.\n     */\n    DataApiDriver: any;\n\n    client: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: AuroraDataApiPostgresConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super();\n        this.connection = connection;\n        this.options = connection.options as AuroraDataApiPostgresConnectionOptions;\n        this.isReplicated = false;\n\n        // load data-api package\n        this.loadDependencies();\n\n        this.client = new this.DataApiDriver(\n            this.options.region,\n            this.options.secretArn,\n            this.options.resourceArn,\n            this.options.database,\n            (query: string, parameters?: any[]) => this.connection.logger.logQuery(query, parameters),\n            this.options.serviceConfigOptions,\n            this.options.formatOptions,\n        );\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n    }\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new AuroraDataApiPostgresQueryRunner(\n            this,\n            new this.DataApiDriver(\n                this.options.region,\n                this.options.secretArn,\n                this.options.resourceArn,\n                this.options.database,\n                (query: string, parameters?: any[]) => this.connection.logger.logQuery(query, parameters),\n                this.options.serviceConfigOptions,\n                this.options.formatOptions,\n            ),\n            mode\n        );\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n            return super.preparePersistentValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        return this.client.preparePersistentValue(value, columnMetadata)\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (this.options.formatOptions && this.options.formatOptions.castParameters === false) {\n            return super.prepareHydratedValue(value, columnMetadata)\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return this.client.prepareHydratedValue(value, columnMetadata)\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        const { pg } = PlatformTools.load(\"typeorm-aurora-data-api-driver\");\n\n        this.DataApiDriver = pg;\n    }\n\n    /**\n     * Executes given query.\n     */\n    protected executeQuery(connection: any, query: string) {\n        return this.connection.query(query);\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    async afterConnect(): Promise<void> {\n        const extensionsMetadata = await this.checkMetadataForExtensions();\n\n        if (extensionsMetadata.hasExtensions) {\n            await this.enableExtensions(extensionsMetadata, this.connection);\n        }\n\n        return Promise.resolve();\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}