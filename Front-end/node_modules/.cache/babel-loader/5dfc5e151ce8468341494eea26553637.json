{"ast":null,"code":"import { __awaiter, __generator, __read } from \"tslib\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\n/**\n * Executes subject operations for materialized-path tree entities.\n */\n\nvar MaterializedPathSubjectExecutor =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function MaterializedPathSubjectExecutor(queryRunner) {\n    this.queryRunner = queryRunner;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Executes operations when subject is being inserted.\n   */\n\n\n  MaterializedPathSubjectExecutor.prototype.insert = function (subject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parent, parentId, parentPath, insertedEntityId;\n\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            parent = subject.metadata.treeParentRelation.getEntityValue(subject.entity);\n            if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n              parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n            parentId = subject.metadata.getEntityIdMap(parent);\n            parentPath = \"\";\n            if (!parentId) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.getEntityPath(subject, parentId)];\n\n          case 1:\n            parentPath = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            insertedEntityId = subject.metadata.treeParentRelation.joinColumns.map(function (joinColumn) {\n              return joinColumn.referencedColumn.getEntityValue(subject.insertedValueSet);\n            }).join(\"_\");\n            return [4\n            /*yield*/\n            , this.queryRunner.manager.createQueryBuilder().update(subject.metadata.target).set((_a = {}, _a[subject.metadata.materializedPathColumn.propertyPath] = parentPath + insertedEntityId + \".\", _a)).where(subject.identifier).execute()];\n\n          case 3:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Executes operations when subject is being updated.\n   */\n\n\n  MaterializedPathSubjectExecutor.prototype.update = function (subject) {\n    return __awaiter(this, void 0, void 0, function () {\n      var newParent, entity, oldParent, oldParentId, newParentId, newParentPath, oldParentPath, entityPath, propertyPath;\n\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            newParent = subject.metadata.treeParentRelation.getEntityValue(subject.entity);\n            if (!newParent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n              newParent = subject.parentSubject.entity;\n            entity = subject.databaseEntity;\n            if (!entity && newParent) // if entity was attached via children\n              entity = subject.metadata.treeChildrenRelation.getEntityValue(newParent).find(function (child) {\n                return Object.entries(subject.identifier).every(function (_a) {\n                  var _b = __read(_a, 2),\n                      key = _b[0],\n                      value = _b[1];\n\n                  return child[key] === value;\n                });\n              });\n            oldParent = subject.metadata.treeParentRelation.getEntityValue(entity);\n            oldParentId = subject.metadata.getEntityIdMap(oldParent);\n            newParentId = subject.metadata.getEntityIdMap(newParent); // Exit if the new and old parents are the same\n\n            if (OrmUtils.compareIds(oldParentId, newParentId)) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            newParentPath = \"\";\n            if (!newParentId) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.getEntityPath(subject, newParentId)];\n\n          case 1:\n            newParentPath = _b.sent();\n            _b.label = 2;\n\n          case 2:\n            oldParentPath = \"\";\n            if (!oldParentId) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.getEntityPath(subject, oldParentId)];\n\n          case 3:\n            oldParentPath = _b.sent() || \"\";\n            _b.label = 4;\n\n          case 4:\n            entityPath = subject.metadata.treeParentRelation.joinColumns.map(function (joinColumn) {\n              return joinColumn.referencedColumn.getEntityValue(entity);\n            }).join(\"_\");\n            propertyPath = subject.metadata.materializedPathColumn.propertyPath;\n            return [4\n            /*yield*/\n            , this.queryRunner.manager.createQueryBuilder().update(subject.metadata.target).set((_a = {}, _a[propertyPath] = function () {\n              return \"REPLACE(\" + propertyPath + \", '\" + oldParentPath + entityPath + \".', '\" + newParentPath + entityPath + \".')\";\n            }, _a)).where(propertyPath + \" LIKE :path\", {\n              path: \"\" + oldParentPath + entityPath + \".%\"\n            }).execute()];\n\n          case 5:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  MaterializedPathSubjectExecutor.prototype.getEntityPath = function (subject, id) {\n    return this.queryRunner.manager.createQueryBuilder().select(subject.metadata.targetName + \".\" + subject.metadata.materializedPathColumn.propertyPath, \"path\").from(subject.metadata.target, subject.metadata.targetName).whereInIds(id).getRawOne().then(function (result) {\n      return result ? result[\"path\"] : undefined;\n    });\n  };\n\n  return MaterializedPathSubjectExecutor;\n}();\n\nexport { MaterializedPathSubjectExecutor };","map":{"version":3,"sources":["../browser/src/persistence/tree/MaterializedPathSubjectExecutor.ts"],"names":[],"mappings":"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","sourcesContent":["import {Subject} from \"../Subject\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\n\n/**\n * Executes subject operations for materialized-path tree entities.\n */\nexport class MaterializedPathSubjectExecutor {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected queryRunner: QueryRunner) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes operations when subject is being inserted.\n     */\n    async insert(subject: Subject): Promise<void> {\n        let parent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\n        if (!parent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n            parent = subject.parentSubject.insertedValueSet ? subject.parentSubject.insertedValueSet : subject.parentSubject.entity;\n\n        const parentId = subject.metadata.getEntityIdMap(parent);\n\n        let parentPath: string = \"\";\n        if (parentId) {\n            parentPath = await this.getEntityPath(subject, parentId);\n        }\n\n        const insertedEntityId = subject.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\n            return joinColumn.referencedColumn!.getEntityValue(subject.insertedValueSet!);\n        }).join(\"_\");\n\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .update(subject.metadata.target)\n            .set({\n                [subject.metadata.materializedPathColumn!.propertyPath]: parentPath + insertedEntityId + \".\"\n            } as any)\n            .where(subject.identifier!)\n            .execute();\n    }\n\n    /**\n     * Executes operations when subject is being updated.\n     */\n    async update(subject: Subject): Promise<void> {\n        let newParent = subject.metadata.treeParentRelation!.getEntityValue(subject.entity!); // if entity was attached via parent\n        if (!newParent && subject.parentSubject && subject.parentSubject.entity) // if entity was attached via children\n            newParent = subject.parentSubject.entity;\n\n        let entity = subject.databaseEntity; // if entity was attached via parent\n        if (!entity && newParent) // if entity was attached via children\n            entity = subject.metadata.treeChildrenRelation!.getEntityValue(newParent).find((child: any) => {\n                return Object.entries(subject.identifier!).every(([key, value]) => child[key] === value);\n            });\n\n\n        const oldParent = subject.metadata.treeParentRelation!.getEntityValue(entity!);\n        const oldParentId = subject.metadata.getEntityIdMap(oldParent);\n        const newParentId = subject.metadata.getEntityIdMap(newParent);\n\n        // Exit if the new and old parents are the same\n        if (OrmUtils.compareIds(oldParentId, newParentId)) {\n            return;\n        }\n\n        let newParentPath: string = \"\";\n        if (newParentId) {\n            newParentPath = await this.getEntityPath(subject, newParentId);\n        }\n\n        let oldParentPath: string = \"\";\n        if (oldParentId) {\n            oldParentPath = await this.getEntityPath(subject, oldParentId) || \"\";\n        }\n\n        const entityPath = subject.metadata.treeParentRelation!.joinColumns.map(joinColumn => {\n            return joinColumn.referencedColumn!.getEntityValue(entity!);\n        }).join(\"_\");\n\n        const propertyPath = subject.metadata.materializedPathColumn!.propertyPath;\n        await this.queryRunner.manager\n            .createQueryBuilder()\n            .update(subject.metadata.target)\n            .set({\n                [propertyPath]: () => `REPLACE(${propertyPath}, '${oldParentPath}${entityPath}.', '${newParentPath}${entityPath}.')`\n            } as any)\n            .where(`${propertyPath} LIKE :path`, { path: `${oldParentPath}${entityPath}.%` })\n            .execute();\n    }\n\n    private getEntityPath(subject: Subject, id: ObjectLiteral): Promise<any> {\n        return this.queryRunner.manager\n            .createQueryBuilder()\n            .select(subject.metadata.targetName + \".\" + subject.metadata.materializedPathColumn!.propertyPath, \"path\")\n            .from(subject.metadata.target, subject.metadata.targetName)\n            .whereInIds(id)\n            .getRawOne()\n            .then(result => result ? result[\"path\"] : undefined);\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}