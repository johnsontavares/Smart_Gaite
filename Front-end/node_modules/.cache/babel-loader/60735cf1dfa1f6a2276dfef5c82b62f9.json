{"ast":null,"code":"import { __read } from \"tslib\";\n/**\n * Provides utilities to transform hydrated and persisted data.\n */\n\nvar DateUtils =\n/** @class */\nfunction () {\n  function DateUtils() {} // -------------------------------------------------------------------------\n  // Public Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Normalizes date object hydrated from the database.\n   */\n\n\n  DateUtils.normalizeHydratedDate = function (mixedDate) {\n    if (!mixedDate) return mixedDate;\n    return typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate;\n  };\n  /**\n   * Converts given value into date string in a \"YYYY-MM-DD\" format.\n   */\n\n\n  DateUtils.mixedDateToDateString = function (value) {\n    if (value instanceof Date) return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\n    return value;\n  };\n  /**\n   * Converts given value into date object.\n   */\n\n\n  DateUtils.mixedDateToDate = function (mixedDate, toUtc, useMilliseconds) {\n    if (toUtc === void 0) {\n      toUtc = false;\n    }\n\n    if (useMilliseconds === void 0) {\n      useMilliseconds = true;\n    }\n\n    var date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate;\n    if (toUtc) date = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), date.getUTCMilliseconds());\n    if (!useMilliseconds) date.setUTCMilliseconds(0);\n    return date;\n  };\n  /**\n   * Converts given value into time string in a \"HH:mm:ss\" format.\n   */\n\n\n  DateUtils.mixedDateToTimeString = function (value, skipSeconds) {\n    if (skipSeconds === void 0) {\n      skipSeconds = false;\n    }\n\n    if (value instanceof Date) return this.formatZerolessValue(value.getHours()) + \":\" + this.formatZerolessValue(value.getMinutes()) + (!skipSeconds ? \":\" + this.formatZerolessValue(value.getSeconds()) : \"\");\n    return value;\n  };\n  /**\n   * Converts given value into time string in a \"HH:mm:ss\" format.\n   */\n\n\n  DateUtils.mixedTimeToDate = function (value) {\n    if (typeof value === \"string\") {\n      var _a = __read(value.split(\":\"), 3),\n          hours = _a[0],\n          minutes = _a[1],\n          seconds = _a[2];\n\n      var date = new Date();\n      if (hours) date.setHours(parseInt(hours));\n      if (minutes) date.setMinutes(parseInt(minutes));\n      if (seconds) date.setSeconds(parseInt(seconds));\n      return date;\n    }\n\n    return value;\n  };\n  /**\n   * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n   */\n\n\n  DateUtils.mixedTimeToString = function (value, skipSeconds) {\n    if (skipSeconds === void 0) {\n      skipSeconds = false;\n    }\n\n    value = value instanceof Date ? value.getHours() + \":\" + value.getMinutes() + (!skipSeconds ? \":\" + value.getSeconds() : \"\") : value;\n\n    if (typeof value === \"string\") {\n      return value.split(\":\").map(function (v) {\n        return v.length === 1 ? \"0\" + v : v;\n      }) // append zero at beginning if we have a first-zero-less number\n      .join(\":\");\n    }\n\n    return value;\n  };\n  /**\n   * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n   */\n\n\n  DateUtils.mixedDateToDatetimeString = function (value, useMilliseconds) {\n    if (typeof value === \"string\") {\n      value = new Date(value);\n    }\n\n    if (value instanceof Date) {\n      var finalValue = this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate()) + \" \" + this.formatZerolessValue(value.getHours()) + \":\" + this.formatZerolessValue(value.getMinutes()) + \":\" + this.formatZerolessValue(value.getSeconds());\n      if (useMilliseconds) finalValue += \".\" + this.formatMilliseconds(value.getMilliseconds());\n      value = finalValue;\n    }\n\n    return value;\n  };\n  /**\n   * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss.sss\" format.\n   */\n\n\n  DateUtils.mixedDateToUtcDatetimeString = function (value) {\n    if (typeof value === \"string\") {\n      value = new Date(value);\n    }\n\n    if (value instanceof Date) {\n      return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" + this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" + this.formatZerolessValue(value.getUTCDate()) + \" \" + this.formatZerolessValue(value.getUTCHours()) + \":\" + this.formatZerolessValue(value.getUTCMinutes()) + \":\" + this.formatZerolessValue(value.getUTCSeconds()) + \".\" + this.formatMilliseconds(value.getUTCMilliseconds());\n    }\n\n    return value;\n  };\n  /**\n   * Converts each item in the given array to string joined by \",\" separator.\n   */\n\n\n  DateUtils.simpleArrayToString = function (value) {\n    if (Array.isArray(value)) {\n      return value.map(function (i) {\n        return String(i);\n      }).join(\",\");\n    }\n\n    return value;\n  };\n  /**\n   * Converts given string to simple array split by \",\" separator.\n   */\n\n\n  DateUtils.stringToSimpleArray = function (value) {\n    if (value instanceof String || typeof value === \"string\") {\n      if (value.length > 0) {\n        return value.split(\",\");\n      } else {\n        return [];\n      }\n    }\n\n    return value;\n  };\n\n  DateUtils.simpleJsonToString = function (value) {\n    return JSON.stringify(value);\n  };\n\n  DateUtils.stringToSimpleJson = function (value) {\n    return typeof value === \"string\" ? JSON.parse(value) : value;\n  };\n\n  DateUtils.simpleEnumToString = function (value) {\n    return \"\" + value;\n  };\n\n  DateUtils.stringToSimpleEnum = function (value, columnMetadata) {\n    if (columnMetadata.enum && !isNaN(value) && columnMetadata.enum.indexOf(parseInt(value)) >= 0) {\n      // convert to number if that exists in poosible enum options\n      value = parseInt(value);\n    }\n\n    return value;\n  }; // -------------------------------------------------------------------------\n  // Private Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n   */\n\n\n  DateUtils.formatZerolessValue = function (value) {\n    if (value < 10) return \"0\" + value;\n    return String(value);\n  };\n  /**\n   * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n   */\n\n\n  DateUtils.formatMilliseconds = function (value) {\n    if (value < 10) {\n      return \"00\" + value;\n    } else if (value < 100) {\n      return \"0\" + value;\n    } else {\n      return String(value);\n    }\n  };\n\n  return DateUtils;\n}();\n\nexport { DateUtils };","map":{"version":3,"sources":["../browser/src/util/DateUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import { ColumnMetadata } from \"../metadata/ColumnMetadata\";\n\n/**\n * Provides utilities to transform hydrated and persisted data.\n */\nexport class DateUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes date object hydrated from the database.\n     */\n    static normalizeHydratedDate(mixedDate: Date|string|undefined): Date|string|undefined {\n        if (!mixedDate)\n            return mixedDate;\n\n        return typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate as Date;\n    }\n\n    /**\n     * Converts given value into date string in a \"YYYY-MM-DD\" format.\n     */\n    static mixedDateToDateString(value: string|Date): string {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getFullYear()) + \"-\" + this.formatZerolessValue(value.getMonth() + 1) + \"-\" + this.formatZerolessValue(value.getDate());\n\n        return value;\n    }\n\n    /**\n     * Converts given value into date object.\n     */\n    static mixedDateToDate(mixedDate: Date|string, toUtc: boolean = false, useMilliseconds = true): Date {\n        let date = typeof mixedDate === \"string\" ? new Date(mixedDate) : mixedDate;\n\n        if (toUtc)\n            date = new Date(\n                date.getUTCFullYear(),\n                date.getUTCMonth(),\n                date.getUTCDate(),\n                date.getUTCHours(),\n                date.getUTCMinutes(),\n                date.getUTCSeconds(),\n                date.getUTCMilliseconds()\n            );\n\n        if (!useMilliseconds)\n            date.setUTCMilliseconds(0);\n\n        return date;\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedDateToTimeString(value: Date|any, skipSeconds: boolean = false): string|any {\n        if (value instanceof Date)\n            return this.formatZerolessValue(value.getHours()) +\n                \":\" + this.formatZerolessValue(value.getMinutes()) +\n                (!skipSeconds ? \":\" + this.formatZerolessValue(value.getSeconds()) : \"\");\n\n        return value;\n    }\n\n    /**\n     * Converts given value into time string in a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToDate(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            const [hours, minutes, seconds] = value.split(\":\");\n            const date = new Date();\n            if (hours)\n                date.setHours(parseInt(hours));\n            if (minutes)\n                date.setMinutes(parseInt(minutes));\n            if (seconds)\n                date.setSeconds(parseInt(seconds));\n            return date;\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given string value with \"-\" separator into a \"HH:mm:ss\" format.\n     */\n    static mixedTimeToString(value: string|any, skipSeconds: boolean = false): string|any {\n        value = value instanceof Date ? (value.getHours() + \":\" + value.getMinutes() + (!skipSeconds ? \":\" + value.getSeconds() : \"\")) : value;\n        if (typeof value === \"string\") {\n            return value.split(\":\")\n                .map(v => v.length === 1 ? \"0\" + v : v) // append zero at beginning if we have a first-zero-less number\n                .join(\":\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given value into datetime string in a \"YYYY-MM-DD HH-mm-ss\" format.\n     */\n    static mixedDateToDatetimeString(value: Date|any, useMilliseconds?: boolean): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            let finalValue = this.formatZerolessValue(value.getFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getDate()) + \" \" +\n                this.formatZerolessValue(value.getHours()) + \":\" +\n                this.formatZerolessValue(value.getMinutes()) + \":\" +\n                this.formatZerolessValue(value.getSeconds());\n\n            if (useMilliseconds)\n                finalValue += `.${this.formatMilliseconds(value.getMilliseconds())}`;\n\n            value = finalValue;\n        }\n\n\n        return value;\n    }\n\n    /**\n     * Converts given value into utc datetime string in a \"YYYY-MM-DD HH-mm-ss.sss\" format.\n     */\n    static mixedDateToUtcDatetimeString(value: Date|any): string|any {\n        if (typeof value === \"string\") {\n            value = new Date(value);\n        }\n        if (value instanceof Date) {\n            return this.formatZerolessValue(value.getUTCFullYear()) + \"-\" +\n                this.formatZerolessValue(value.getUTCMonth() + 1) + \"-\" +\n                this.formatZerolessValue(value.getUTCDate()) + \" \" +\n                this.formatZerolessValue(value.getUTCHours()) + \":\" +\n                this.formatZerolessValue(value.getUTCMinutes()) + \":\" +\n                this.formatZerolessValue(value.getUTCSeconds()) + \".\" +\n                this.formatMilliseconds(value.getUTCMilliseconds());\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts each item in the given array to string joined by \",\" separator.\n     */\n    static simpleArrayToString(value: any[]|any): string[]|any {\n        if (Array.isArray(value)) {\n            return (value as any[])\n                .map(i => String(i))\n                .join(\",\");\n        }\n\n        return value;\n    }\n\n    /**\n     * Converts given string to simple array split by \",\" separator.\n     */\n    static stringToSimpleArray(value: string|any): string|any {\n        if (value instanceof String || typeof value === \"string\") {\n            if (value.length > 0) {\n                return value.split(\",\");\n            } else {\n                return [];\n            }\n        }\n\n        return value;\n    }\n\n    static simpleJsonToString(value: any): string {\n        return JSON.stringify(value);\n    }\n\n    static stringToSimpleJson(value: any) {\n        return typeof value === \"string\" ? JSON.parse(value) : value;\n    }\n\n    static simpleEnumToString(value: any) {\n        return \"\" + value;\n    }\n\n    static stringToSimpleEnum(value: any, columnMetadata: ColumnMetadata) {\n        if (\n            columnMetadata.enum\n            && !isNaN(value)\n            && columnMetadata.enum.indexOf(parseInt(value)) >= 0\n        ) {\n            // convert to number if that exists in poosible enum options\n            value = parseInt(value);\n        }\n\n        return value;\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatZerolessValue(value: number): string {\n        if (value < 10)\n            return \"0\" + value;\n\n        return String(value);\n    }\n\n    /**\n     * Formats given number to \"0x\" format, e.g. if it is 1 then it will return \"01\".\n     */\n    private static formatMilliseconds(value: number): string {\n        if (value < 10) {\n            return \"00\" + value;\n        } else if (value < 100) {\n            return \"0\" + value;\n        } else {\n            return String(value);\n        }\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}