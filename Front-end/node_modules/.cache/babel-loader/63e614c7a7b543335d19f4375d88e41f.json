{"ast":null,"code":"import { __awaiter, __extends, __generator, __read } from \"tslib\";\nimport { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { QueryBuilder } from \"./QueryBuilder\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { UpdateResult } from \"./result/UpdateResult\";\nimport { ReturningStatementNotSupportedError } from \"../error/ReturningStatementNotSupportedError\";\nimport { ReturningResultsEntityUpdator } from \"./ReturningResultsEntityUpdator\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { BroadcasterResult } from \"../subscriber/BroadcasterResult\";\nimport { AbstractSqliteDriver } from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport { LimitOnUpdateNotSupportedError } from \"../error/LimitOnUpdateNotSupportedError\";\nimport { MissingDeleteDateColumnError } from \"../error/MissingDeleteDateColumnError\";\nimport { OracleDriver } from \"../driver/oracle/OracleDriver\";\nimport { UpdateValuesMissingError } from \"../error/UpdateValuesMissingError\";\nimport { EntitySchema } from \"../entity-schema/EntitySchema\";\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\n\nvar SoftDeleteQueryBuilder =\n/** @class */\nfunction (_super) {\n  __extends(SoftDeleteQueryBuilder, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function SoftDeleteQueryBuilder(connectionOrQueryBuilder, queryRunner) {\n    var _this = _super.call(this, connectionOrQueryBuilder, queryRunner) || this;\n\n    _this.expressionMap.aliasNamePrefixingEnabled = false;\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Gets generated sql query without parameters being replaced.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.getQuery = function () {\n    var sql = this.createUpdateExpression();\n    sql += this.createOrderByExpression();\n    sql += this.createLimitExpression();\n    return sql.trim();\n  };\n  /**\n   * Executes sql generated by query builder and returns raw database results.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.execute = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryRunner, transactionStartedByUs, broadcastResult, returningResultsEntityUpdator, _a, sql, parameters, updateResult, result, driver, broadcastResult, error_1, rollbackError_1;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            queryRunner = this.obtainQueryRunner();\n            transactionStartedByUs = false;\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 13, 18, 23]);\n\n            if (!(this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , queryRunner.startTransaction()];\n\n          case 2:\n            _b.sent();\n\n            transactionStartedByUs = true;\n            _b.label = 3;\n\n          case 3:\n            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3\n            /*break*/\n            , 5];\n            broadcastResult = new BroadcasterResult();\n            queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);\n            if (!(broadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(broadcastResult.promises)];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n\n            if (this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata && this.expressionMap.whereEntities.length > 0) {\n              this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();\n            }\n\n            _a = __read(this.getQueryAndParameters(), 2), sql = _a[0], parameters = _a[1];\n            updateResult = new UpdateResult();\n            return [4\n            /*yield*/\n            , queryRunner.query(sql, parameters)];\n\n          case 6:\n            result = _b.sent();\n            driver = queryRunner.connection.driver;\n\n            if (driver instanceof PostgresDriver) {\n              updateResult.raw = result[0];\n              updateResult.affected = result[1];\n            } else {\n              updateResult.raw = result;\n            }\n\n            if (!(this.expressionMap.updateEntity === true && this.expressionMap.mainAlias.hasMetadata && this.expressionMap.whereEntities.length > 0)) return [3\n            /*break*/\n            , 8];\n            return [4\n            /*yield*/\n            , returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities)];\n\n          case 7:\n            _b.sent();\n\n            _b.label = 8;\n\n          case 8:\n            if (!(this.expressionMap.callListeners === true && this.expressionMap.mainAlias.hasMetadata)) return [3\n            /*break*/\n            , 10];\n            broadcastResult = new BroadcasterResult();\n            queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias.metadata);\n            if (!(broadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 10];\n            return [4\n            /*yield*/\n            , Promise.all(broadcastResult.promises)];\n\n          case 9:\n            _b.sent();\n\n            _b.label = 10;\n\n          case 10:\n            if (!transactionStartedByUs) return [3\n            /*break*/\n            , 12];\n            return [4\n            /*yield*/\n            , queryRunner.commitTransaction()];\n\n          case 11:\n            _b.sent();\n\n            _b.label = 12;\n\n          case 12:\n            return [2\n            /*return*/\n            , updateResult];\n\n          case 13:\n            error_1 = _b.sent();\n            if (!transactionStartedByUs) return [3\n            /*break*/\n            , 17];\n            _b.label = 14;\n\n          case 14:\n            _b.trys.push([14, 16,, 17]);\n\n            return [4\n            /*yield*/\n            , queryRunner.rollbackTransaction()];\n\n          case 15:\n            _b.sent();\n\n            return [3\n            /*break*/\n            , 17];\n\n          case 16:\n            rollbackError_1 = _b.sent();\n            return [3\n            /*break*/\n            , 17];\n\n          case 17:\n            throw error_1;\n\n          case 18:\n            if (!(queryRunner !== this.queryRunner)) return [3\n            /*break*/\n            , 20];\n            return [4\n            /*yield*/\n            , queryRunner.release()];\n\n          case 19:\n            _b.sent();\n\n            _b.label = 20;\n\n          case 20:\n            if (!(this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive)) return [3\n            /*break*/\n            , 22];\n            return [4\n            /*yield*/\n            , this.connection.driver.autoSave()];\n\n          case 21:\n            _b.sent();\n\n            _b.label = 22;\n\n          case 22:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 23:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.\n   * Also sets a main string alias of the selection data.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.from = function (entityTarget, aliasName) {\n    entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n    var mainAlias = this.createFromAlias(entityTarget, aliasName);\n    this.expressionMap.setMainAlias(mainAlias);\n    return this;\n  };\n  /**\n   * Sets WHERE condition in the query builder.\n   * If you had previously WHERE expression defined,\n   * calling this function will override previously set WHERE conditions.\n   * Additionally you can add parameters used in where expression.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.where = function (where, parameters) {\n    this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n\n    var condition = this.computeWhereParameter(where);\n    if (condition) this.expressionMap.wheres = [{\n      type: \"simple\",\n      condition: condition\n    }];\n    if (parameters) this.setParameters(parameters);\n    return this;\n  };\n  /**\n   * Adds new AND WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.andWhere = function (where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"and\",\n      condition: this.computeWhereParameter(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  };\n  /**\n   * Adds new OR WHERE condition in the query builder.\n   * Additionally you can add parameters used in where expression.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.orWhere = function (where, parameters) {\n    this.expressionMap.wheres.push({\n      type: \"or\",\n      condition: this.computeWhereParameter(where)\n    });\n    if (parameters) this.setParameters(parameters);\n    return this;\n  };\n  /**\n   * Adds new AND WHERE with conditions for the given ids.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.whereInIds = function (ids) {\n    return this.where(this.createWhereIdsExpression(ids));\n  };\n  /**\n   * Adds new AND WHERE with conditions for the given ids.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.andWhereInIds = function (ids) {\n    return this.andWhere(this.createWhereIdsExpression(ids));\n  };\n  /**\n   * Adds new OR WHERE with conditions for the given ids.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.orWhereInIds = function (ids) {\n    return this.orWhere(this.createWhereIdsExpression(ids));\n  };\n  /**\n   * Optional returning/output clause.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.output = function (output) {\n    return this.returning(output);\n  };\n  /**\n   * Optional returning/output clause.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.returning = function (returning) {\n    // not all databases support returning/output cause\n    if (!this.connection.driver.isReturningSqlSupported()) throw new ReturningStatementNotSupportedError();\n    this.expressionMap.returning = returning;\n    return this;\n  };\n  /**\n   * Sets ORDER BY condition in the query builder.\n   * If you had previously ORDER BY expression defined,\n   * calling this function will override previously set ORDER BY conditions.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.orderBy = function (sort, order, nulls) {\n    var _a, _b;\n\n    if (order === void 0) {\n      order = \"ASC\";\n    }\n\n    if (sort) {\n      if (sort instanceof Object) {\n        this.expressionMap.orderBys = sort;\n      } else {\n        if (nulls) {\n          this.expressionMap.orderBys = (_a = {}, _a[sort] = {\n            order: order,\n            nulls: nulls\n          }, _a);\n        } else {\n          this.expressionMap.orderBys = (_b = {}, _b[sort] = order, _b);\n        }\n      }\n    } else {\n      this.expressionMap.orderBys = {};\n    }\n\n    return this;\n  };\n  /**\n   * Adds ORDER BY condition in the query builder.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.addOrderBy = function (sort, order, nulls) {\n    if (order === void 0) {\n      order = \"ASC\";\n    }\n\n    if (nulls) {\n      this.expressionMap.orderBys[sort] = {\n        order: order,\n        nulls: nulls\n      };\n    } else {\n      this.expressionMap.orderBys[sort] = order;\n    }\n\n    return this;\n  };\n  /**\n   * Sets LIMIT - maximum number of rows to be selected.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.limit = function (limit) {\n    this.expressionMap.limit = limit;\n    return this;\n  };\n  /**\n   * Indicates if entity must be updated after update operation.\n   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n   * Enabled by default.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.whereEntity = function (entity) {\n    var _this = this;\n\n    if (!this.expressionMap.mainAlias.hasMetadata) throw new Error(\".whereEntity method can only be used on queries which update real entity table.\");\n    this.expressionMap.wheres = [];\n    var entities = Array.isArray(entity) ? entity : [entity];\n    entities.forEach(function (entity) {\n      var entityIdMap = _this.expressionMap.mainAlias.metadata.getEntityIdMap(entity);\n\n      if (!entityIdMap) throw new Error(\"Provided entity does not have ids set, cannot perform operation.\");\n\n      _this.orWhereInIds(entityIdMap);\n    });\n    this.expressionMap.whereEntities = entities;\n    return this;\n  };\n  /**\n   * Indicates if entity must be updated after update operation.\n   * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n   * Enabled by default.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.updateEntity = function (enabled) {\n    this.expressionMap.updateEntity = enabled;\n    return this;\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates UPDATE express used to perform insert query.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.createUpdateExpression = function () {\n    var metadata = this.expressionMap.mainAlias.hasMetadata ? this.expressionMap.mainAlias.metadata : undefined;\n    if (!metadata) throw new Error(\"Cannot get entity metadata for the given alias \\\"\" + this.expressionMap.mainAlias + \"\\\"\");\n\n    if (!metadata.deleteDateColumn) {\n      throw new MissingDeleteDateColumnError(metadata);\n    } // prepare columns and values to be updated\n\n\n    var updateColumnAndValues = [];\n    var newParameters = {};\n\n    switch (this.expressionMap.queryType) {\n      case \"soft-delete\":\n        updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\");\n        break;\n\n      case \"restore\":\n        updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = NULL\");\n        break;\n\n      default:\n        throw new Error(\"The queryType must be \\\"soft-delete\\\" or \\\"restore\\\"\");\n    }\n\n    if (metadata.versionColumn) updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + \" = \" + this.escape(metadata.versionColumn.databaseName) + \" + 1\");\n    if (metadata.updateDateColumn) updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n\n    if (updateColumnAndValues.length <= 0) {\n      throw new UpdateValuesMissingError();\n    } // we re-write parameters this way because we want our \"UPDATE ... SET\" parameters to be first in the list of \"nativeParameters\"\n    // because some drivers like mysql depend on order of parameters\n\n\n    if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof AbstractSqliteDriver) {\n      this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);\n    } // get a table name and all column database names\n\n\n    var whereExpression = this.createWhereExpression();\n    var returningExpression = this.createReturningExpression(); // generate and return sql update query\n\n    if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n      return \"UPDATE \" + this.getTableName(this.getMainTableName()) + \" SET \" + updateColumnAndValues.join(\", \") + whereExpression + \" RETURNING \" + returningExpression;\n    } else if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n      return \"UPDATE \" + this.getTableName(this.getMainTableName()) + \" SET \" + updateColumnAndValues.join(\", \") + \" OUTPUT \" + returningExpression + whereExpression;\n    } else {\n      return \"UPDATE \" + this.getTableName(this.getMainTableName()) + \" SET \" + updateColumnAndValues.join(\", \") + whereExpression; // todo: how do we replace aliases in where to nothing?\n    }\n  };\n  /**\n   * Creates \"ORDER BY\" part of SQL query.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.createOrderByExpression = function () {\n    var _this = this;\n\n    var orderBys = this.expressionMap.orderBys;\n    if (Object.keys(orderBys).length > 0) return \" ORDER BY \" + Object.keys(orderBys).map(function (columnName) {\n      if (typeof orderBys[columnName] === \"string\") {\n        return _this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n      } else {\n        return _this.replacePropertyNames(columnName) + \" \" + orderBys[columnName].order + \" \" + orderBys[columnName].nulls;\n      }\n    }).join(\", \");\n    return \"\";\n  };\n  /**\n   * Creates \"LIMIT\" parts of SQL query.\n   */\n\n\n  SoftDeleteQueryBuilder.prototype.createLimitExpression = function () {\n    var limit = this.expressionMap.limit;\n\n    if (limit) {\n      if (this.connection.driver instanceof MysqlDriver) {\n        return \" LIMIT \" + limit;\n      } else {\n        throw new LimitOnUpdateNotSupportedError();\n      }\n    }\n\n    return \"\";\n  };\n\n  return SoftDeleteQueryBuilder;\n}(QueryBuilder);\n\nexport { SoftDeleteQueryBuilder };","map":{"version":3,"sources":["../browser/src/query-builder/SoftDeleteQueryBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {QueryBuilder} from \"./QueryBuilder\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {Connection} from \"../connection/Connection\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {WhereExpression} from \"./WhereExpression\";\nimport {Brackets} from \"./Brackets\";\nimport {UpdateResult} from \"./result/UpdateResult\";\nimport {ReturningStatementNotSupportedError} from \"../error/ReturningStatementNotSupportedError\";\nimport {ReturningResultsEntityUpdator} from \"./ReturningResultsEntityUpdator\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {BroadcasterResult} from \"../subscriber/BroadcasterResult\";\nimport {AbstractSqliteDriver} from \"../driver/sqlite-abstract/AbstractSqliteDriver\";\nimport {OrderByCondition} from \"../find-options/OrderByCondition\";\nimport {LimitOnUpdateNotSupportedError} from \"../error/LimitOnUpdateNotSupportedError\";\nimport {MissingDeleteDateColumnError} from \"../error/MissingDeleteDateColumnError\";\nimport {OracleDriver} from \"../driver/oracle/OracleDriver\";\nimport {UpdateValuesMissingError} from \"../error/UpdateValuesMissingError\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\n\n/**\n * Allows to build complex sql queries in a fashion way and execute those queries.\n */\nexport class SoftDeleteQueryBuilder<Entity> extends QueryBuilder<Entity> implements WhereExpression {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connectionOrQueryBuilder: Connection|QueryBuilder<any>, queryRunner?: QueryRunner) {\n        super(connectionOrQueryBuilder as any, queryRunner);\n        this.expressionMap.aliasNamePrefixingEnabled = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets generated sql query without parameters being replaced.\n     */\n    getQuery(): string {\n        let sql = this.createUpdateExpression();\n        sql += this.createOrderByExpression();\n        sql += this.createLimitExpression();\n        return sql.trim();\n    }\n\n    /**\n     * Executes sql generated by query builder and returns raw database results.\n     */\n    async execute(): Promise<UpdateResult> {\n        const queryRunner = this.obtainQueryRunner();\n        let transactionStartedByUs: boolean = false;\n\n        try {\n\n            // start transaction if it was enabled\n            if (this.expressionMap.useTransaction === true && queryRunner.isTransactionActive === false) {\n                await queryRunner.startTransaction();\n                transactionStartedByUs = true;\n            }\n\n            // call before updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastBeforeUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // if update entity mode is enabled we may need extra columns for the returning statement\n            const returningResultsEntityUpdator = new ReturningResultsEntityUpdator(queryRunner, this.expressionMap);\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                this.expressionMap.extraReturningColumns = returningResultsEntityUpdator.getUpdationReturningColumns();\n            }\n\n            // execute update query\n            const [sql, parameters] = this.getQueryAndParameters();\n            const updateResult = new UpdateResult();\n            const result = await queryRunner.query(sql, parameters);\n\n            const driver = queryRunner.connection.driver;\n            if (driver instanceof PostgresDriver) {\n                updateResult.raw = result[0];\n                updateResult.affected = result[1];\n            }\n            else {\n                updateResult.raw = result;\n            }\n\n            // if we are updating entities and entity updation is enabled we must update some of entity columns (like version, update date, etc.)\n            if (this.expressionMap.updateEntity === true &&\n                this.expressionMap.mainAlias!.hasMetadata &&\n                this.expressionMap.whereEntities.length > 0) {\n                await returningResultsEntityUpdator.update(updateResult, this.expressionMap.whereEntities);\n            }\n\n            // call after updation methods in listeners and subscribers\n            if (this.expressionMap.callListeners === true && this.expressionMap.mainAlias!.hasMetadata) {\n                const broadcastResult = new BroadcasterResult();\n                queryRunner.broadcaster.broadcastAfterUpdateEvent(broadcastResult, this.expressionMap.mainAlias!.metadata);\n                if (broadcastResult.promises.length > 0) await Promise.all(broadcastResult.promises);\n            }\n\n            // close transaction if we started it\n            if (transactionStartedByUs)\n                await queryRunner.commitTransaction();\n\n            return updateResult;\n\n        } catch (error) {\n\n            // rollback transaction if we started it\n            if (transactionStartedByUs) {\n                try {\n                    await queryRunner.rollbackTransaction();\n                } catch (rollbackError) { }\n            }\n            throw error;\n\n        } finally {\n            if (queryRunner !== this.queryRunner) { // means we created our own query runner\n                await queryRunner.release();\n            }\n            if (this.connection.driver instanceof SqljsDriver && !queryRunner.isTransactionActive) {\n                await this.connection.driver.autoSave();\n            }\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Specifies FROM which entity's table select/update/delete/soft-delete will be executed.\n     * Also sets a main string alias of the selection data.\n     */\n    from<T>(entityTarget: EntityTarget<T>, aliasName?: string): SoftDeleteQueryBuilder<T> {\n        entityTarget = entityTarget instanceof EntitySchema ? entityTarget.options.name : entityTarget;\n        const mainAlias = this.createFromAlias(entityTarget, aliasName);\n        this.expressionMap.setMainAlias(mainAlias);\n        return (this as any) as SoftDeleteQueryBuilder<T>;\n    }\n\n    /**\n     * Sets WHERE condition in the query builder.\n     * If you had previously WHERE expression defined,\n     * calling this function will override previously set WHERE conditions.\n     * Additionally you can add parameters used in where expression.\n     */\n    where(where: string|((qb: this) => string)|Brackets|ObjectLiteral|ObjectLiteral[], parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres = []; // don't move this block below since computeWhereParameter can add where expressions\n        const condition = this.computeWhereParameter(where);\n        if (condition)\n            this.expressionMap.wheres = [{ type: \"simple\", condition: condition }];\n        if (parameters)\n            this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    andWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"and\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new OR WHERE condition in the query builder.\n     * Additionally you can add parameters used in where expression.\n     */\n    orWhere(where: string|((qb: this) => string)|Brackets, parameters?: ObjectLiteral): this {\n        this.expressionMap.wheres.push({ type: \"or\", condition: this.computeWhereParameter(where) });\n        if (parameters) this.setParameters(parameters);\n        return this;\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    whereInIds(ids: any|any[]): this {\n        return this.where(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new AND WHERE with conditions for the given ids.\n     */\n    andWhereInIds(ids: any|any[]): this {\n        return this.andWhere(this.createWhereIdsExpression(ids));\n    }\n\n    /**\n     * Adds new OR WHERE with conditions for the given ids.\n     */\n    orWhereInIds(ids: any|any[]): this {\n        return this.orWhere(this.createWhereIdsExpression(ids));\n    }\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    output(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    output(output: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    output(output: string|string[]): this {\n        return this.returning(output);\n    }\n\n    /**\n     * Optional returning/output clause.\n     * This will return given column values.\n     */\n    returning(columns: string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     * Returning is a SQL string containing returning statement.\n     */\n    returning(returning: string): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this;\n\n    /**\n     * Optional returning/output clause.\n     */\n    returning(returning: string|string[]): this {\n\n        // not all databases support returning/output cause\n        if (!this.connection.driver.isReturningSqlSupported())\n            throw new ReturningStatementNotSupportedError();\n\n        this.expressionMap.returning = returning;\n        return this;\n    }\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     *\n     * Calling order by without order set will remove all previously set order bys.\n     */\n    orderBy(): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort: string, order?: \"ASC\"|\"DESC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(order: OrderByCondition): this;\n\n    /**\n     * Sets ORDER BY condition in the query builder.\n     * If you had previously ORDER BY expression defined,\n     * calling this function will override previously set ORDER BY conditions.\n     */\n    orderBy(sort?: string|OrderByCondition, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (sort) {\n            if (sort instanceof Object) {\n                this.expressionMap.orderBys = sort as OrderByCondition;\n            } else {\n                if (nulls) {\n                    this.expressionMap.orderBys = { [sort as string]: { order, nulls } };\n                } else {\n                    this.expressionMap.orderBys = { [sort as string]: order };\n                }\n            }\n        } else {\n            this.expressionMap.orderBys = {};\n        }\n        return this;\n    }\n\n    /**\n     * Adds ORDER BY condition in the query builder.\n     */\n    addOrderBy(sort: string, order: \"ASC\"|\"DESC\" = \"ASC\", nulls?: \"NULLS FIRST\"|\"NULLS LAST\"): this {\n        if (nulls) {\n            this.expressionMap.orderBys[sort] = { order, nulls };\n        } else {\n            this.expressionMap.orderBys[sort] = order;\n        }\n        return this;\n    }\n\n    /**\n     * Sets LIMIT - maximum number of rows to be selected.\n     */\n    limit(limit?: number): this {\n        this.expressionMap.limit = limit;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    whereEntity(entity: Entity|Entity[]): this {\n        if (!this.expressionMap.mainAlias!.hasMetadata)\n            throw new Error(`.whereEntity method can only be used on queries which update real entity table.`);\n\n        this.expressionMap.wheres = [];\n        const entities: Entity[] = Array.isArray(entity) ? entity : [entity];\n        entities.forEach(entity => {\n\n            const entityIdMap = this.expressionMap.mainAlias!.metadata.getEntityIdMap(entity);\n            if (!entityIdMap)\n                throw new Error(`Provided entity does not have ids set, cannot perform operation.`);\n\n            this.orWhereInIds(entityIdMap);\n        });\n\n        this.expressionMap.whereEntities = entities;\n        return this;\n    }\n\n    /**\n     * Indicates if entity must be updated after update operation.\n     * This may produce extra query or use RETURNING / OUTPUT statement (depend on database).\n     * Enabled by default.\n     */\n    updateEntity(enabled: boolean): this {\n        this.expressionMap.updateEntity = enabled;\n        return this;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates UPDATE express used to perform insert query.\n     */\n    protected createUpdateExpression() {\n        const metadata = this.expressionMap.mainAlias!.hasMetadata ? this.expressionMap.mainAlias!.metadata : undefined;\n        if (!metadata)\n            throw new Error(`Cannot get entity metadata for the given alias \"${this.expressionMap.mainAlias}\"`);\n        if (!metadata.deleteDateColumn) {\n            throw new MissingDeleteDateColumnError(metadata);\n        }\n\n        // prepare columns and values to be updated\n        const updateColumnAndValues: string[] = [];\n        const newParameters: ObjectLiteral = {};\n\n        switch (this.expressionMap.queryType) {\n            case \"soft-delete\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\");\n                break;\n            case \"restore\":\n                updateColumnAndValues.push(this.escape(metadata.deleteDateColumn.databaseName) + \" = NULL\");\n                break;\n            default:\n                throw new Error(`The queryType must be \"soft-delete\" or \"restore\"`);\n        }\n        if (metadata.versionColumn)\n            updateColumnAndValues.push(this.escape(metadata.versionColumn.databaseName) + \" = \" + this.escape(metadata.versionColumn.databaseName) + \" + 1\");\n        if (metadata.updateDateColumn)\n            updateColumnAndValues.push(this.escape(metadata.updateDateColumn.databaseName) + \" = CURRENT_TIMESTAMP\"); // todo: fix issue with CURRENT_TIMESTAMP(6) being used, can \"DEFAULT\" be used?!\n\n        if (updateColumnAndValues.length <= 0) {\n            throw new UpdateValuesMissingError();\n        }\n\n        // we re-write parameters this way because we want our \"UPDATE ... SET\" parameters to be first in the list of \"nativeParameters\"\n        // because some drivers like mysql depend on order of parameters\n        if (this.connection.driver instanceof MysqlDriver ||\n            this.connection.driver instanceof OracleDriver ||\n            this.connection.driver instanceof AbstractSqliteDriver) {\n            this.expressionMap.nativeParameters = Object.assign(newParameters, this.expressionMap.nativeParameters);\n        }\n\n        // get a table name and all column database names\n        const whereExpression = this.createWhereExpression();\n        const returningExpression = this.createReturningExpression();\n\n        // generate and return sql update query\n        if (returningExpression && (this.connection.driver instanceof PostgresDriver || this.connection.driver instanceof OracleDriver || this.connection.driver instanceof CockroachDriver)) {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression} RETURNING ${returningExpression}`;\n\n        } else if (returningExpression && this.connection.driver instanceof SqlServerDriver) {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")} OUTPUT ${returningExpression}${whereExpression}`;\n\n        } else {\n            return `UPDATE ${this.getTableName(this.getMainTableName())} SET ${updateColumnAndValues.join(\", \")}${whereExpression}`; // todo: how do we replace aliases in where to nothing?\n        }\n    }\n\n    /**\n     * Creates \"ORDER BY\" part of SQL query.\n     */\n    protected createOrderByExpression() {\n        const orderBys = this.expressionMap.orderBys;\n        if (Object.keys(orderBys).length > 0)\n            return \" ORDER BY \" + Object.keys(orderBys)\n                    .map(columnName => {\n                        if (typeof orderBys[columnName] === \"string\") {\n                            return this.replacePropertyNames(columnName) + \" \" + orderBys[columnName];\n                        } else {\n                            return this.replacePropertyNames(columnName) + \" \" + (orderBys[columnName] as any).order + \" \" + (orderBys[columnName] as any).nulls;\n                        }\n                    })\n                    .join(\", \");\n\n        return \"\";\n    }\n\n    /**\n     * Creates \"LIMIT\" parts of SQL query.\n     */\n    protected createLimitExpression(): string {\n        let limit: number|undefined = this.expressionMap.limit;\n\n        if (limit) {\n            if (this.connection.driver instanceof MysqlDriver) {\n                return \" LIMIT \" + limit;\n            } else {\n                throw new LimitOnUpdateNotSupportedError();\n            }\n        }\n\n        return \"\";\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}