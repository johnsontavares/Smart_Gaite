{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../\";\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\n\nexport function JoinColumn(optionsOrOptionsArray) {\n  return function (object, propertyName) {\n    var options = Array.isArray(optionsOrOptionsArray) ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\n    options.forEach(function (options) {\n      getMetadataArgsStorage().joinColumns.push({\n        target: object.constructor,\n        propertyName: propertyName,\n        name: options.name,\n        referencedColumnName: options.referencedColumnName\n      });\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/relations/JoinColumn.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAR,QAAwD,QAAxD;AAwBA;;;;AAIG;;AACH,OAAM,SAAU,UAAV,CAAqB,qBAArB,EAAkF;AACpF,SAAO,UAAU,MAAV,EAA0B,YAA1B,EAA8C;AACjD,QAAM,OAAO,GAAG,KAAK,CAAC,OAAN,CAAc,qBAAd,IAAuC,qBAAvC,GAA+D,CAAC,qBAAqB,IAAI,EAA1B,CAA/E;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,UAAA,OAAA,EAAO;AACnB,MAAA,sBAAsB,GAAG,WAAzB,CAAqC,IAArC,CAA0C;AACtC,QAAA,MAAM,EAAE,MAAM,CAAC,WADuB;AAEtC,QAAA,YAAY,EAAE,YAFwB;AAGtC,QAAA,IAAI,EAAE,OAAO,CAAC,IAHwB;AAItC,QAAA,oBAAoB,EAAE,OAAO,CAAC;AAJQ,OAA1C;AAMH,KAPD;AAQH,GAVD;AAWH","sourcesContent":["import {getMetadataArgsStorage, JoinColumnOptions} from \"../../\";\nimport {JoinColumnMetadataArgs} from \"../../metadata-args/JoinColumnMetadataArgs\";\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(): PropertyDecorator;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions): PropertyDecorator;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(options: JoinColumnOptions[]): PropertyDecorator;\n\n/**\n * JoinColumn decorator used on one-to-one relations to specify owner side of relationship.\n * It also can be used on both one-to-one and many-to-one relations to specify custom column name\n * or custom referenced column.\n */\nexport function JoinColumn(optionsOrOptionsArray?: JoinColumnOptions|JoinColumnOptions[]): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        const options = Array.isArray(optionsOrOptionsArray) ? optionsOrOptionsArray : [optionsOrOptionsArray || {}];\n        options.forEach(options => {\n            getMetadataArgsStorage().joinColumns.push({\n                target: object.constructor,\n                propertyName: propertyName,\n                name: options.name,\n                referencedColumnName: options.referencedColumnName\n            } as JoinColumnMetadataArgs);\n        });\n    };\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}