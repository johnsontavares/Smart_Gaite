{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\n */\n\nvar UsingJoinTableOnlyOnOneSideAllowedError =\n/** @class */\nfunction (_super) {\n  __extends(UsingJoinTableOnlyOnOneSideAllowedError, _super);\n\n  function UsingJoinTableOnlyOnOneSideAllowedError(entityMetadata, relation) {\n    var _this = _super.call(this) || this;\n\n    _this.name = \"UsingJoinTableOnlyOnOneSideAllowedError\";\n    Object.setPrototypeOf(_this, UsingJoinTableOnlyOnOneSideAllowedError.prototype);\n    _this.message = \"Using JoinTable is allowed only on one side of the many-to-many relationship. \" + (\"Both \" + entityMetadata.name + \"#\" + relation.propertyName + \" and \" + relation.inverseEntityMetadata.name + \"#\" + relation.inverseRelation.propertyName + \" \") + \"has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.\";\n    return _this;\n  }\n\n  return UsingJoinTableOnlyOnOneSideAllowedError;\n}(Error);\n\nexport { UsingJoinTableOnlyOnOneSideAllowedError };","map":{"version":3,"sources":["../browser/src/error/UsingJoinTableOnlyOnOneSideAllowedError.ts"],"names":[],"mappings":";AAGA;AACG;;AACH,IAAA,uCAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6D,EAAA,SAAA,CAAA,uCAAA,EAAA,MAAA,CAAA;;AAGzD,WAAA,uCAAA,CAAY,cAAZ,EAA4C,QAA5C,EAAsE;AAAtE,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAFA,IAAA,KAAA,CAAA,IAAA,GAAO,yCAAP;AAII,IAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA4B,uCAAuC,CAAC,SAApE;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,oFACX,UAAQ,cAAc,CAAC,IAAvB,GAA2B,GAA3B,GAA+B,QAAQ,CAAC,YAAxC,GAAoD,OAApD,GAA4D,QAAQ,CAAC,qBAAT,CAA+B,IAA3F,GAA+F,GAA/F,GAAmG,QAAQ,CAAC,eAAT,CAA0B,YAA7H,GAAyI,GAD9H,IAEX,wFAFJ;;AAGH;;AAEL,SAAA,uCAAA;AAAC,CAXD,CAA6D,KAA7D,CAAA","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {RelationMetadata} from \"../metadata/RelationMetadata\";\n\n/**\n */\nexport class UsingJoinTableOnlyOnOneSideAllowedError extends Error {\n    name = \"UsingJoinTableOnlyOnOneSideAllowedError\";\n\n    constructor(entityMetadata: EntityMetadata, relation: RelationMetadata) {\n        super();\n        Object.setPrototypeOf(this, UsingJoinTableOnlyOnOneSideAllowedError.prototype);\n        this.message = `Using JoinTable is allowed only on one side of the many-to-many relationship. ` +\n            `Both ${entityMetadata.name}#${relation.propertyName} and ${relation.inverseEntityMetadata.name}#${relation.inverseRelation!.propertyName} ` +\n            `has JoinTable decorators. Choose one of them and left JoinColumn decorator only on it.`;\n    }\n\n}"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}