{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\n\nvar ConnectionOptionsEnvReader =\n/** @class */\nfunction () {\n  function ConnectionOptionsEnvReader() {}\n\n  ConnectionOptionsEnvReader.prototype.read = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Cannot read connection options in a browser context.\");\n      });\n    });\n  };\n\n  return ConnectionOptionsEnvReader;\n}();\n\nexport { ConnectionOptionsEnvReader };\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\n\nvar ConnectionOptionsXmlReader =\n/** @class */\nfunction () {\n  function ConnectionOptionsXmlReader() {}\n\n  ConnectionOptionsXmlReader.prototype.read = function (path) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Cannot read connection options in a browser context.\");\n      });\n    });\n  };\n\n  return ConnectionOptionsXmlReader;\n}();\n\nexport { ConnectionOptionsXmlReader };\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\n\nvar ConnectionOptionsYmlReader =\n/** @class */\nfunction () {\n  function ConnectionOptionsYmlReader() {}\n\n  ConnectionOptionsYmlReader.prototype.read = function (path) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Cannot read connection options in a browser context.\");\n      });\n    });\n  };\n\n  return ConnectionOptionsYmlReader;\n}();\n\nexport { ConnectionOptionsYmlReader };\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\n\nvar ConnectionOptionsReader =\n/** @class */\nfunction () {\n  function ConnectionOptionsReader() {}\n\n  ConnectionOptionsReader.prototype.all = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Cannot read connection options in a browser context.\");\n      });\n    });\n  };\n\n  ConnectionOptionsReader.prototype.get = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Cannot read connection options in a browser context.\");\n      });\n    });\n  };\n\n  ConnectionOptionsReader.prototype.has = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Cannot read connection options in a browser context.\");\n      });\n    });\n  };\n\n  return ConnectionOptionsReader;\n}();\n\nexport { ConnectionOptionsReader };","map":{"version":3,"sources":["../browser/src/platform/BrowserConnectionOptionsReaderDummy.ts"],"names":[],"mappings":";AAAA;;;;;AAKG;;AACH,IAAA,0BAAA;AAAA;AAAA,YAAA;AAAA,WAAA,0BAAA,GAAA,CAIC;;AAHS,EAAA,0BAAA,CAAA,SAAA,CAAA,IAAA,GAAN,YAAA;;;AACI,cAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;;;AACH,GAFK;;AAGV,SAAA,0BAAA;AAAC,CAJD,EAAA;;;AAMA;;;;;AAKG;;AACH,IAAA,0BAAA;AAAA;AAAA,YAAA;AAAA,WAAA,0BAAA,GAAA,CAIC;;AAHS,EAAA,0BAAA,CAAA,SAAA,CAAA,IAAA,GAAN,UAAW,IAAX,EAAuB;;;AACnB,cAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;;;AACH,GAFK;;AAGV,SAAA,0BAAA;AAAC,CAJD,EAAA;;;AAMA;;;;;AAKG;;AACH,IAAA,0BAAA;AAAA;AAAA,YAAA;AAAA,WAAA,0BAAA,GAAA,CAIC;;AAHS,EAAA,0BAAA,CAAA,SAAA,CAAA,IAAA,GAAN,UAAW,IAAX,EAAuB;;;AACnB,cAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;;;AACH,GAFK;;AAGV,SAAA,0BAAA;AAAC,CAJD,EAAA;;;AAMA;;;;;AAKG;;AACH,IAAA,uBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,uBAAA,GAAA,CAYC;;AAXS,EAAA,uBAAA,CAAA,SAAA,CAAA,GAAA,GAAN,YAAA;;;AACI,cAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;;;AACH,GAFK;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,GAAA,GAAN,YAAA;;;AACI,cAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;;;AACH,GAFK;;AAIA,EAAA,uBAAA,CAAA,SAAA,CAAA,GAAA,GAAN,YAAA;;;AACI,cAAM,IAAI,KAAJ,CAAU,sDAAV,CAAN;;;AACH,GAFK;;AAGV,SAAA,uBAAA;AAAC,CAZD,EAAA","sourcesContent":["/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsEnvReader {\n    async read() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsXmlReader {\n    async read(path: string) {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsYmlReader {\n    async read(path: string) {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n\n/**\n * Dummy class for replacement via `package.json` in browser builds.\n *\n * If we don't include these functions typeorm will throw an error on runtime\n * as well as during webpack builds.\n */\nexport class ConnectionOptionsReader {\n    async all() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n\n    async get() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n\n    async has() {\n        throw new Error(`Cannot read connection options in a browser context.`);\n    }\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}