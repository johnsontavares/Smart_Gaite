{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\n * Performs logging of the events in TypeORM.\n * This version of logger logs everything into ormlogs.log file.\n */\n\nvar DummyLogger =\n/** @class */\nfunction () {\n  function DummyLogger() {}\n  /**\n   * Logs query and parameters used in it.\n   */\n\n\n  DummyLogger.prototype.logQuery = function () {\n    throw new Error('This logger is not applicable in a browser context');\n  };\n  /**\n   * Logs query that is failed.\n   */\n\n\n  DummyLogger.prototype.logQueryError = function () {\n    throw new Error('This logger is not applicable in a browser context');\n  };\n  /**\n   * Logs query that is slow.\n   */\n\n\n  DummyLogger.prototype.logQuerySlow = function () {\n    throw new Error('This logger is not applicable in a browser context');\n  };\n  /**\n   * Logs events from the schema build process.\n   */\n\n\n  DummyLogger.prototype.logSchemaBuild = function () {\n    throw new Error('This logger is not applicable in a browser context');\n  };\n  /**\n   * Logs events from the migrations run process.\n   */\n\n\n  DummyLogger.prototype.logMigration = function () {\n    throw new Error('This logger is not applicable in a browser context');\n  };\n  /**\n   * Perform logging using given logger, or by default to the console.\n   * Log has its own level and message.\n   */\n\n\n  DummyLogger.prototype.log = function () {\n    throw new Error('This logger is not applicable in a browser context');\n  };\n\n  return DummyLogger;\n}();\n\nexport { DummyLogger };\n\nvar FileLogger =\n/** @class */\nfunction (_super) {\n  __extends(FileLogger, _super);\n\n  function FileLogger() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return FileLogger;\n}(DummyLogger);\n\nexport { FileLogger };","map":{"version":3,"sources":["../browser/src/platform/BrowserFileLoggerDummy.ts"],"names":[],"mappings":";AAAA;;;AAGG;;AACH,IAAA,WAAA;AAAA;AAAA,YAAA;AAAA,WAAA,WAAA,GAAA,CA2CC;AA1CG;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACI,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACH,GAFD;AAIA;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACI,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACH,GAFD;AAIA;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACI,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACH,GAFD;AAIA;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACI,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACH,GAFD;AAIA;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACI,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACH,GAFD;AAIA;;;AAGG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAA,YAAA;AACI,UAAM,IAAI,KAAJ,CAAU,oDAAV,CAAN;AACH,GAFD;;AAGJ,SAAA,WAAA;AAAC,CA3CD,EAAA;;;;AA6CA,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA;;AAAhC,WAAA,UAAA,GAAA;;AAA8C;;AAAD,SAAA,UAAA;AAAC,CAA9C,CAAgC,WAAhC,CAAA","sourcesContent":["/**\n * Performs logging of the events in TypeORM.\n * This version of logger logs everything into ormlogs.log file.\n */\nexport class DummyLogger {\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Logs query that is failed.\n     */\n    logQueryError() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Logs events from the migrations run process.\n     */\n    logMigration() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n\n    /**\n     * Perform logging using given logger, or by default to the console.\n     * Log has its own level and message.\n     */\n    log() {\n        throw new Error('This logger is not applicable in a browser context');\n    }\n}\n\nexport class FileLogger extends DummyLogger {}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}