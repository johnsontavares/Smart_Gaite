{"ast":null,"code":"import { __awaiter, __extends, __generator, __read, __spreadArray, __values } from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { QueryFailedError } from \"../../index\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { Query } from \"../Query\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single SQL Server database connection.\n */\n\nvar SapQueryRunner =\n/** @class */\nfunction (_super) {\n  __extends(SapQueryRunner, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function SapQueryRunner(driver, mode) {\n    var _this = _super.call(this) || this; // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because we cannot rely on parallel queries because we use second query\n     * to select CURRENT_IDENTITY_VALUE()\n     */\n\n\n    _this.queryResponsibilityChain = [];\n    _this.driver = driver;\n    _this.connection = driver.connection;\n    _this.broadcaster = new Broadcaster(_this);\n    _this.mode = mode;\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates/uses database connection from the connection pool to perform further operations.\n   * Returns obtained database connection.\n   */\n\n\n  SapQueryRunner.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (this.databaseConnection) return [2\n            /*return*/\n            , this.databaseConnection];\n            _a = this;\n            return [4\n            /*yield*/\n            , this.driver.obtainMasterConnection()];\n\n          case 1:\n            _a.databaseConnection = _b.sent();\n            return [2\n            /*return*/\n            , this.databaseConnection];\n        }\n      });\n    });\n  };\n  /**\n   * Releases used database connection.\n   * You cannot use query runner methods once its released.\n   */\n\n\n  SapQueryRunner.prototype.release = function () {\n    this.isReleased = true;\n\n    if (this.databaseConnection) {\n      return this.driver.master.release(this.databaseConnection);\n    }\n\n    return Promise.resolve();\n  };\n  /**\n   * Starts transaction.\n   */\n\n\n  SapQueryRunner.prototype.startTransaction = function (isolationLevel) {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            if (this.isTransactionActive) throw new TransactionAlreadyStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            this.isTransactionActive = true;\n            if (!isolationLevel) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.query(\"SET TRANSACTION ISOLATION LEVEL \" + (isolationLevel || \"\"))];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 5:\n            _a.sent();\n\n            _a.label = 6;\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  SapQueryRunner.prototype.commitTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.query(\"COMMIT\")];\n\n          case 3:\n            _a.sent();\n\n            this.isTransactionActive = false;\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Rollbacks transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  SapQueryRunner.prototype.rollbackTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.query(\"ROLLBACK\")];\n\n          case 3:\n            _a.sent();\n\n            this.isTransactionActive = false;\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Executes a given SQL query.\n   */\n\n\n  SapQueryRunner.prototype.query = function (query, parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var waitingOkay, waitingPromise, otherWaitingPromises, promise;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            waitingPromise = new Promise(function (ok) {\n              return waitingOkay = ok;\n            });\n            if (!this.queryResponsibilityChain.length) return [3\n            /*break*/\n            , 2];\n            otherWaitingPromises = __spreadArray([], __read(this.queryResponsibilityChain));\n            this.queryResponsibilityChain.push(waitingPromise);\n            return [4\n            /*yield*/\n            , Promise.all(otherWaitingPromises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            promise = new Promise(function (ok, fail) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var databaseConnection_1, queryStartTime_1, isInsertQuery_1, statement, err_1;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      return [4\n                      /*yield*/\n                      , this.connect()];\n\n                    case 1:\n                      databaseConnection_1 = _a.sent(); // we disable autocommit because ROLLBACK does not work in autocommit mode\n\n                      databaseConnection_1.setAutoCommit(!this.isTransactionActive);\n                      this.driver.connection.logger.logQuery(query, parameters, this);\n                      queryStartTime_1 = +new Date();\n                      isInsertQuery_1 = query.substr(0, 11) === \"INSERT INTO\";\n                      statement = databaseConnection_1.prepare(query);\n                      statement.exec(parameters, function (err, result) {\n                        // log slow queries if maxQueryExecution time is set\n                        var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;\n                        var queryEndTime = +new Date();\n                        var queryExecutionTime = queryEndTime - queryStartTime_1;\n                        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);\n\n                        var resolveChain = function () {\n                          if (promiseIndex !== -1) _this.queryResponsibilityChain.splice(promiseIndex, 1);\n                          if (waitingPromiseIndex !== -1) _this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                          waitingOkay();\n                        };\n\n                        var promiseIndex = _this.queryResponsibilityChain.indexOf(promise);\n\n                        var waitingPromiseIndex = _this.queryResponsibilityChain.indexOf(waitingPromise);\n\n                        if (err) {\n                          _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n\n                          resolveChain();\n                          return fail(new QueryFailedError(query, parameters, err));\n                        } else {\n                          if (isInsertQuery_1) {\n                            var lastIdQuery_1 = \"SELECT CURRENT_IDENTITY_VALUE() FROM \\\"SYS\\\".\\\"DUMMY\\\"\";\n\n                            _this.driver.connection.logger.logQuery(lastIdQuery_1, [], _this);\n\n                            databaseConnection_1.exec(lastIdQuery_1, function (err, result) {\n                              if (err) {\n                                _this.driver.connection.logger.logQueryError(err, lastIdQuery_1, [], _this);\n\n                                resolveChain();\n                                fail(new QueryFailedError(lastIdQuery_1, [], err));\n                                return;\n                              }\n\n                              ok(result[0][\"CURRENT_IDENTITY_VALUE()\"]);\n                              resolveChain();\n                            });\n                          } else {\n                            ok(result);\n                            resolveChain();\n                          }\n                        }\n                      });\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      err_1 = _a.sent();\n                      fail(err_1);\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 3:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }); // with this condition, Promise.all causes unexpected behavior.\n            // if (this.isTransactionActive)\n\n            this.queryResponsibilityChain.push(promise);\n            return [2\n            /*return*/\n            , promise];\n        }\n      });\n    });\n  };\n  /**\n   * Returns raw data stream.\n   */\n\n\n  SapQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"Stream is not supported by SAP driver.\");\n      });\n    });\n  };\n  /**\n   * Returns all available database names including system databases.\n   */\n\n\n  SapQueryRunner.prototype.getDatabases = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT DATABASE_NAME FROM \\\"SYS\\\".\\\"M_DATABASES\\\"\")];\n\n          case 1:\n            results = _a.sent();\n            return [2\n            /*return*/\n            , results.map(function (result) {\n              return result[\"DATABASE_NAME\"];\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns all available schema names including system schemas.\n   * If database parameter specified, returns schemas of that database.\n   */\n\n\n  SapQueryRunner.prototype.getSchemas = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      var query, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            query = database ? \"SELECT * FROM \\\"\" + database + \"\\\".\\\"SYS\\\".\\\"SCHEMAS\\\"\" : \"SELECT * FROM \\\"SYS\\\".\\\"SCHEMAS\\\"\";\n            return [4\n            /*yield*/\n            , this.query(query)];\n\n          case 1:\n            results = _a.sent();\n            return [2\n            /*return*/\n            , results.map(function (result) {\n              return result[\"SCHEMA_NAME\"];\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if database with the given name exist.\n   */\n\n\n  SapQueryRunner.prototype.hasDatabase = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      var databases;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getDatabases()];\n\n          case 1:\n            databases = _a.sent();\n            return [2\n            /*return*/\n            , databases.indexOf(database) !== -1];\n        }\n      });\n    });\n  };\n  /**\n   * Returns current database.\n   */\n\n\n  SapQueryRunner.prototype.getCurrentDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentDBQuery;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT \\\"VALUE\\\" AS \\\"db_name\\\" FROM \\\"SYS\\\".\\\"M_SYSTEM_OVERVIEW\\\" WHERE \\\"SECTION\\\" = 'System' and \\\"NAME\\\" = 'Instance ID'\")];\n\n          case 1:\n            currentDBQuery = _a.sent();\n            return [2\n            /*return*/\n            , currentDBQuery[0][\"db_name\"]];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if schema with the given name exist.\n   */\n\n\n  SapQueryRunner.prototype.hasSchema = function (schema) {\n    return __awaiter(this, void 0, void 0, function () {\n      var schemas;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getSchemas()];\n\n          case 1:\n            schemas = _a.sent();\n            return [2\n            /*return*/\n            , schemas.indexOf(schema) !== -1];\n        }\n      });\n    });\n  };\n  /**\n   * Returns current schema.\n   */\n\n\n  SapQueryRunner.prototype.getCurrentSchema = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchemaQuery;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT CURRENT_SCHEMA AS \\\"schema_name\\\" FROM \\\"SYS\\\".\\\"DUMMY\\\"\")];\n\n          case 1:\n            currentSchemaQuery = _a.sent();\n            return [2\n            /*return*/\n            , currentSchemaQuery[0][\"schema_name\"]];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if table with the given name exist in the database.\n   */\n\n\n  SapQueryRunner.prototype.hasTable = function (tableOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parsedTableName, sql, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parsedTableName = this.parseTableName(tableOrName);\n            sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName;\n            return [4\n            /*yield*/\n            , this.query(sql)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if column with the given name exist in the given table.\n   */\n\n\n  SapQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parsedTableName, sql, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parsedTableName = this.parseTableName(tableOrName);\n            sql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLE_COLUMNS\\\" WHERE \\\"SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"TABLE_NAME\\\" = \" + parsedTableName.tableName + \" AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"'\";\n            return [4\n            /*yield*/\n            , this.query(sql)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new database.\n   */\n\n\n  SapQueryRunner.prototype.createDatabase = function (database, ifNotExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve()];\n      });\n    });\n  };\n  /**\n   * Drops database.\n   */\n\n\n  SapQueryRunner.prototype.dropDatabase = function (database, ifExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve()];\n      });\n    });\n  };\n  /**\n   * Creates a new table schema.\n   */\n\n\n  SapQueryRunner.prototype.createSchema = function (schema, ifNotExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      var exist, result, up, down;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            exist = false;\n            if (!ifNotExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.query(\"SELECT * FROM \\\"SYS\\\".\\\"SCHEMAS\\\" WHERE \\\"SCHEMA_NAME\\\" = '\" + schema + \"'\")];\n\n          case 1:\n            result = _a.sent();\n            exist = !!result.length;\n            _a.label = 2;\n\n          case 2:\n            if (!(!ifNotExist || ifNotExist && !exist)) return [3\n            /*break*/\n            , 4];\n            up = \"CREATE SCHEMA \\\"\" + schema + \"\\\"\";\n            down = \"DROP SCHEMA \\\"\" + schema + \"\\\" CASCADE\";\n            return [4\n            /*yield*/\n            , this.executeQueries(new Query(up), new Query(down))];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops table schema\n   */\n\n\n  SapQueryRunner.prototype.dropSchema = function (schemaPath, ifExist, isCascade) {\n    return __awaiter(this, void 0, void 0, function () {\n      var schema, exist, result, up, down;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n            exist = false;\n            if (!ifExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.query(\"SELECT * FROM \\\"SYS\\\".\\\"SCHEMAS\\\" WHERE \\\"SCHEMA_NAME\\\" = '\" + schema + \"'\")];\n\n          case 1:\n            result = _a.sent();\n            exist = !!result.length;\n            _a.label = 2;\n\n          case 2:\n            if (!(!ifExist || ifExist && exist)) return [3\n            /*break*/\n            , 4];\n            up = \"DROP SCHEMA \\\"\" + schema + \"\\\" \" + (isCascade ? \"CASCADE\" : \"\");\n            down = \"CREATE SCHEMA \\\"\" + schema + \"\\\"\";\n            return [4\n            /*yield*/\n            , this.executeQueries(new Query(up), new Query(down))];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new table.\n   */\n\n\n  SapQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {\n    if (ifNotExist === void 0) {\n      ifNotExist = false;\n    }\n\n    if (createForeignKeys === void 0) {\n      createForeignKeys = true;\n    }\n\n    if (createIndices === void 0) {\n      createIndices = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isTableExist, upQueries, downQueries;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!ifNotExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasTable(table)];\n\n          case 1:\n            isTableExist = _a.sent();\n            if (isTableExist) return [2\n            /*return*/\n            , Promise.resolve()];\n            _a.label = 2;\n\n          case 2:\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(this.createTableSql(table, createForeignKeys));\n            downQueries.push(this.dropTableSql(table)); // if createForeignKeys is true, we must drop created foreign keys in down query.\n            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n\n            if (createForeignKeys) table.foreignKeys.forEach(function (foreignKey) {\n              return downQueries.push(_this.dropForeignKeySql(table, foreignKey));\n            });\n\n            if (createIndices) {\n              table.indices.forEach(function (index) {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name) index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(_this.createIndexSql(table, index));\n                downQueries.push(_this.dropIndexSql(table, index));\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the table.\n   */\n\n\n  SapQueryRunner.prototype.dropTable = function (tableOrName, ifExist, dropForeignKeys, dropIndices) {\n    if (dropForeignKeys === void 0) {\n      dropForeignKeys = true;\n    }\n\n    if (dropIndices === void 0) {\n      dropIndices = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isTableExist, createForeignKeys, table, _a, upQueries, downQueries;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!ifExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasTable(tableOrName)];\n\n          case 1:\n            isTableExist = _b.sent();\n            if (!isTableExist) return [2\n            /*return*/\n            , Promise.resolve()];\n            _b.label = 2;\n\n          case 2:\n            createForeignKeys = dropForeignKeys;\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 3];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 4:\n            _a = _b.sent();\n            _b.label = 5;\n\n          case 5:\n            table = _a;\n            upQueries = [];\n            downQueries = []; // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n            // to perform drop queries for foreign keys and indices.\n\n            if (dropIndices) {\n              table.indices.forEach(function (index) {\n                upQueries.push(_this.dropIndexSql(table, index));\n                downQueries.push(_this.createIndexSql(table, index));\n              });\n            } // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n\n\n            if (dropForeignKeys) table.foreignKeys.forEach(function (foreignKey) {\n              return upQueries.push(_this.dropForeignKeySql(table, foreignKey));\n            });\n            upQueries.push(this.dropTableSql(table));\n            downQueries.push(this.createTableSql(table, createForeignKeys));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 6:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new view.\n   */\n\n\n  SapQueryRunner.prototype.createView = function (view) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries, _a, _b, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(this.createViewSql(view));\n            _b = (_a = upQueries).push;\n            return [4\n            /*yield*/\n            , this.insertViewDefinitionSql(view)];\n\n          case 1:\n            _b.apply(_a, [_e.sent()]);\n\n            downQueries.push(this.dropViewSql(view));\n            _d = (_c = downQueries).push;\n            return [4\n            /*yield*/\n            , this.deleteViewDefinitionSql(view)];\n\n          case 2:\n            _d.apply(_c, [_e.sent()]);\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 3:\n            _e.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the view.\n   */\n\n\n  SapQueryRunner.prototype.dropView = function (target) {\n    return __awaiter(this, void 0, void 0, function () {\n      var viewName, view, upQueries, downQueries, _a, _b, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            viewName = target instanceof View ? target.name : target;\n            return [4\n            /*yield*/\n            , this.getCachedView(viewName)];\n\n          case 1:\n            view = _e.sent();\n            upQueries = [];\n            downQueries = [];\n            _b = (_a = upQueries).push;\n            return [4\n            /*yield*/\n            , this.deleteViewDefinitionSql(view)];\n\n          case 2:\n            _b.apply(_a, [_e.sent()]);\n\n            upQueries.push(this.dropViewSql(view));\n            _d = (_c = downQueries).push;\n            return [4\n            /*yield*/\n            , this.insertViewDefinitionSql(view)];\n\n          case 3:\n            _d.apply(_c, [_e.sent()]);\n\n            downQueries.push(this.createViewSql(view));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _e.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Renames a table.\n   */\n\n\n  SapQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries, oldTable, _a, newTable, oldTableName, schemaName, referencedForeignKeySql, dbForeignKeys, referencedForeignKeys, referencedForeignKeyTableMapping, columnNames, columnNamesString, oldPkName, newPkName;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            if (!(oldTableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = oldTableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(oldTableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            oldTable = _a;\n            newTable = oldTable.clone();\n            oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n            schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n            newTable.name = schemaName ? schemaName + \".\" + newTableName : newTableName; // rename table\n\n            upQueries.push(new Query(\"RENAME TABLE \" + this.escapePath(oldTable.name) + \" TO \" + this.escapePath(newTableName)));\n            downQueries.push(new Query(\"RENAME TABLE \" + this.escapePath(newTable.name) + \" TO \" + this.escapePath(oldTableName))); // drop old FK's. Foreign keys must be dropped before the primary keys are dropped\n\n            newTable.foreignKeys.forEach(function (foreignKey) {\n              upQueries.push(_this.dropForeignKeySql(newTable, foreignKey));\n              downQueries.push(_this.createForeignKeySql(newTable, foreignKey));\n            });\n            referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = '\" + schemaName + \"' AND \\\"REFERENCED_TABLE_NAME\\\" = '\" + oldTableName + \"'\";\n            return [4\n            /*yield*/\n            , this.query(referencedForeignKeySql)];\n\n          case 4:\n            dbForeignKeys = _b.sent();\n            referencedForeignKeys = [];\n            referencedForeignKeyTableMapping = [];\n\n            if (dbForeignKeys.length > 0) {\n              referencedForeignKeys = dbForeignKeys.map(function (dbForeignKey) {\n                var foreignKeys = dbForeignKeys.filter(function (dbFk) {\n                  return dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"];\n                });\n                referencedForeignKeyTableMapping.push({\n                  tableName: dbForeignKey[\"SCHEMA_NAME\"] + \".\" + dbForeignKey[\"TABLE_NAME\"],\n                  fkName: dbForeignKey[\"CONSTRAINT_NAME\"]\n                });\n                return new TableForeignKey({\n                  name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                  columnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"COLUMN_NAME\"];\n                  }),\n                  referencedTableName: newTable.name,\n                  referencedColumnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"REFERENCED_COLUMN_NAME\"];\n                  }),\n                  onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                  onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"]\n                });\n              }); // drop referenced foreign keys\n\n              referencedForeignKeys.forEach(function (foreignKey) {\n                var mapping = referencedForeignKeyTableMapping.find(function (it) {\n                  return it.fkName === foreignKey.name;\n                });\n                upQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n                downQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              });\n            } // rename primary key constraint\n\n\n            if (newTable.primaryColumns.length > 0) {\n              columnNames = newTable.primaryColumns.map(function (column) {\n                return column.name;\n              });\n              columnNamesString = columnNames.map(function (columnName) {\n                return \"\\\"\" + columnName + \"\\\"\";\n              }).join(\", \");\n              oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n              newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames); // drop old PK\n\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" DROP CONSTRAINT \\\"\" + oldPkName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" ADD CONSTRAINT \\\"\" + oldPkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\")); // create new PK\n\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" ADD CONSTRAINT \\\"\" + newPkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" DROP CONSTRAINT \\\"\" + newPkName + \"\\\"\"));\n            } // recreate foreign keys with new constraint names\n\n\n            newTable.foreignKeys.forEach(function (foreignKey) {\n              // replace constraint name\n              foreignKey.name = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames); // create new FK's\n\n              upQueries.push(_this.createForeignKeySql(newTable, foreignKey));\n              downQueries.push(_this.dropForeignKeySql(newTable, foreignKey));\n            }); // restore referenced foreign keys\n\n            referencedForeignKeys.forEach(function (foreignKey) {\n              var mapping = referencedForeignKeyTableMapping.find(function (it) {\n                return it.fkName === foreignKey.name;\n              });\n              upQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              downQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n            }); // rename index constraints\n\n            newTable.indices.forEach(function (index) {\n              // build new constraint name\n              var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where); // drop old index\n\n\n              upQueries.push(_this.dropIndexSql(newTable, index));\n              downQueries.push(_this.createIndexSql(newTable, index)); // replace constraint name\n\n              index.name = newIndexName; // create new index\n\n              upQueries.push(_this.createIndexSql(newTable, index));\n              downQueries.push(_this.dropIndexSql(newTable, index));\n            });\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 5:\n            _b.sent(); // rename old table and replace it in cached tabled;\n\n\n            oldTable.name = newTable.name;\n            this.replaceCachedTable(oldTable, newTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new column from the column in the table.\n   */\n\n\n  SapQueryRunner.prototype.addColumn = function (tableOrName, column) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, parsedTableName, clonedTable, upQueries, downQueries, primaryColumns, referencedForeignKeySql, dbForeignKeys_1, referencedForeignKeys, referencedForeignKeyTableMapping_1, pkName_1, columnNames_1, pkName, columnNames, columnIndex, uniqueIndex;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            parsedTableName = this.parseTableName(table);\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(new Query(this.addColumnSql(table, column)));\n            downQueries.push(new Query(this.dropColumnSql(table, column)));\n            if (!column.isPrimary) return [3\n            /*break*/\n            , 6];\n            primaryColumns = clonedTable.primaryColumns;\n            if (!(primaryColumns.length > 0)) return [3\n            /*break*/\n            , 5];\n            referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n            return [4\n            /*yield*/\n            , this.query(referencedForeignKeySql)];\n\n          case 4:\n            dbForeignKeys_1 = _b.sent();\n            referencedForeignKeys = [];\n            referencedForeignKeyTableMapping_1 = [];\n\n            if (dbForeignKeys_1.length > 0) {\n              referencedForeignKeys = dbForeignKeys_1.map(function (dbForeignKey) {\n                var foreignKeys = dbForeignKeys_1.filter(function (dbFk) {\n                  return dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"];\n                });\n                referencedForeignKeyTableMapping_1.push({\n                  tableName: dbForeignKey[\"SCHEMA_NAME\"] + \".\" + dbForeignKey[\"TABLE_NAME\"],\n                  fkName: dbForeignKey[\"CONSTRAINT_NAME\"]\n                });\n                return new TableForeignKey({\n                  name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                  columnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"COLUMN_NAME\"];\n                  }),\n                  referencedTableName: table.name,\n                  referencedColumnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"REFERENCED_COLUMN_NAME\"];\n                  }),\n                  onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                  onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"]\n                });\n              }); // drop referenced foreign keys\n\n              referencedForeignKeys.forEach(function (foreignKey) {\n                var mapping = referencedForeignKeyTableMapping_1.find(function (it) {\n                  return it.fkName === foreignKey.name;\n                });\n                upQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n                downQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              });\n            }\n\n            pkName_1 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n              return column.name;\n            }));\n            columnNames_1 = primaryColumns.map(function (column) {\n              return \"\\\"\" + column.name + \"\\\"\";\n            }).join(\", \");\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName_1 + \"\\\"\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName_1 + \"\\\" PRIMARY KEY (\" + columnNames_1 + \")\")); // restore referenced foreign keys\n\n            referencedForeignKeys.forEach(function (foreignKey) {\n              var mapping = referencedForeignKeyTableMapping_1.find(function (it) {\n                return it.fkName === foreignKey.name;\n              });\n              upQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              downQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n            });\n            _b.label = 5;\n\n          case 5:\n            primaryColumns.push(column);\n            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n              return column.name;\n            }));\n            columnNames = primaryColumns.map(function (column) {\n              return \"\\\"\" + column.name + \"\\\"\";\n            }).join(\", \");\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n            _b.label = 6;\n\n          case 6:\n            columnIndex = clonedTable.indices.find(function (index) {\n              return index.columnNames.length === 1 && index.columnNames[0] === column.name;\n            });\n\n            if (columnIndex) {\n              upQueries.push(this.createIndexSql(table, columnIndex));\n              downQueries.push(this.dropIndexSql(table, columnIndex));\n            } else if (column.isUnique) {\n              uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table.name, [column.name]),\n                columnNames: [column.name],\n                isUnique: true\n              });\n              clonedTable.indices.push(uniqueIndex);\n              clonedTable.uniques.push(new TableUnique({\n                name: uniqueIndex.name,\n                columnNames: uniqueIndex.columnNames\n              }));\n              upQueries.push(this.createIndexSql(table, uniqueIndex));\n              downQueries.push(this.dropIndexSql(table, uniqueIndex));\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 7:\n            _b.sent();\n\n            clonedTable.addColumn(column);\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new columns from the column in the table.\n   */\n\n\n  SapQueryRunner.prototype.addColumns = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var columns_1, columns_1_1, column, e_1_1;\n\n      var e_1, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            columns_1 = __values(columns), columns_1_1 = columns_1.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!columns_1_1.done) return [3\n            /*break*/\n            , 4];\n            column = columns_1_1.value;\n            return [4\n            /*yield*/\n            , this.addColumn(tableOrName, column)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            columns_1_1 = columns_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (columns_1_1 && !columns_1_1.done && (_a = columns_1.return)) _a.call(columns_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Renames column in the given table.\n   */\n\n\n  SapQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, oldColumn, newColumn;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (c) {\n              return c.name === oldTableColumnOrName;\n            });\n            if (!oldColumn) throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n            newColumn = undefined;\n\n            if (newTableColumnOrName instanceof TableColumn) {\n              newColumn = newTableColumnOrName;\n            } else {\n              newColumn = oldColumn.clone();\n              newColumn.name = newTableColumnOrName;\n            }\n\n            return [4\n            /*yield*/\n            , this.changeColumn(table, oldColumn, newColumn)];\n\n          case 4:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Changes a column in the table.\n   */\n\n\n  SapQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, upQueries, downQueries, oldColumn, primaryColumns, columnNames, oldPkName, columnNamesString, newPkName, oldTableColumn, primaryColumns, pkName, columnNames, column, pkName, columnNames, primaryColumn, column, pkName, columnNames, uniqueIndex, uniqueIndex_1, tableUnique;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (column) {\n              return column.name === oldTableColumnOrName;\n            });\n            if (!oldColumn) throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n            if (!(newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\" || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length)) return [3\n            /*break*/\n            , 6]; // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n\n            return [4\n            /*yield*/\n            , this.dropColumn(table, oldColumn)];\n\n          case 4:\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.addColumn(table, newColumn)];\n\n          case 5:\n            _b.sent(); // update cloned table\n\n\n            clonedTable = table.clone();\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            if (newColumn.name !== oldColumn.name) {\n              // rename column\n              upQueries.push(new Query(\"RENAME COLUMN \" + this.escapePath(table) + \".\\\"\" + oldColumn.name + \"\\\" TO \\\"\" + newColumn.name + \"\\\"\"));\n              downQueries.push(new Query(\"RENAME COLUMN \" + this.escapePath(table) + \".\\\"\" + newColumn.name + \"\\\" TO \\\"\" + oldColumn.name + \"\\\"\"));\n\n              if (oldColumn.isPrimary === true) {\n                primaryColumns = clonedTable.primaryColumns;\n                columnNames = primaryColumns.map(function (column) {\n                  return column.name;\n                });\n                oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames); // replace old column name with new column name\n\n                columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                columnNames.push(newColumn.name);\n                columnNamesString = columnNames.map(function (columnName) {\n                  return \"\\\"\" + columnName + \"\\\"\";\n                }).join(\", \"); // drop old PK\n\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + oldPkName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + oldPkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\"));\n                newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames); // create new PK\n\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + newPkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + newPkName + \"\\\"\"));\n              } // rename index constraints\n\n\n              clonedTable.findColumnIndices(oldColumn).forEach(function (index) {\n                // build new constraint name\n                index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                index.columnNames.push(newColumn.name);\n\n                var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where); // drop old index\n\n\n                upQueries.push(_this.dropIndexSql(clonedTable, index));\n                downQueries.push(_this.createIndexSql(clonedTable, index)); // replace constraint name\n\n                index.name = newIndexName; // create new index\n\n                upQueries.push(_this.createIndexSql(clonedTable, index));\n                downQueries.push(_this.dropIndexSql(clonedTable, index));\n              }); // rename foreign key constraints\n\n              clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {\n                // build new constraint name\n                foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                foreignKey.columnNames.push(newColumn.name);\n\n                var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                upQueries.push(_this.dropForeignKeySql(clonedTable, foreignKey));\n                downQueries.push(_this.createForeignKeySql(clonedTable, foreignKey)); // replace constraint name\n\n                foreignKey.name = newForeignKeyName; // create new FK's\n\n                upQueries.push(_this.createForeignKeySql(clonedTable, foreignKey));\n                downQueries.push(_this.dropForeignKeySql(clonedTable, foreignKey));\n              }); // rename check constraints\n\n              clonedTable.findColumnChecks(oldColumn).forEach(function (check) {\n                // build new constraint name\n                check.columnNames.splice(check.columnNames.indexOf(oldColumn.name), 1);\n                check.columnNames.push(newColumn.name);\n\n                var newCheckName = _this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression);\n\n                upQueries.push(_this.dropCheckConstraintSql(clonedTable, check));\n                downQueries.push(_this.createCheckConstraintSql(clonedTable, check)); // replace constraint name\n\n                check.name = newCheckName;\n                upQueries.push(_this.createCheckConstraintSql(clonedTable, check));\n                downQueries.push(_this.dropCheckConstraintSql(clonedTable, check));\n              });\n              oldTableColumn = clonedTable.columns.find(function (column) {\n                return column.name === oldColumn.name;\n              });\n              clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n              oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn)) {\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER (\" + this.buildCreateColumnSql(newColumn) + \")\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER (\" + this.buildCreateColumnSql(oldColumn) + \")\"));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n              primaryColumns = clonedTable.primaryColumns; // if primary column state changed, we must always drop existed constraint.\n\n              if (primaryColumns.length > 0) {\n                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              }\n\n              if (newColumn.isPrimary === true) {\n                primaryColumns.push(newColumn);\n                column = clonedTable.columns.find(function (column) {\n                  return column.name === newColumn.name;\n                });\n                column.isPrimary = true;\n                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n              } else {\n                primaryColumn = primaryColumns.find(function (c) {\n                  return c.name === newColumn.name;\n                });\n                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                column = clonedTable.columns.find(function (column) {\n                  return column.name === newColumn.name;\n                });\n                column.isPrimary = false; // if we have another primary keys, we must recreate constraint.\n\n                if (primaryColumns.length > 0) {\n                  pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                    return column.name;\n                  }));\n                  columnNames = primaryColumns.map(function (column) {\n                    return \"\\\"\" + column.name + \"\\\"\";\n                  }).join(\", \");\n                  upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                  downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                }\n              }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n              if (newColumn.isUnique === true) {\n                uniqueIndex = new TableIndex({\n                  name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),\n                  columnNames: [newColumn.name],\n                  isUnique: true\n                });\n                clonedTable.indices.push(uniqueIndex);\n                clonedTable.uniques.push(new TableUnique({\n                  name: uniqueIndex.name,\n                  columnNames: uniqueIndex.columnNames\n                }));\n                upQueries.push(this.createIndexSql(table, uniqueIndex));\n                downQueries.push(this.dropIndexSql(table, uniqueIndex));\n              } else {\n                uniqueIndex_1 = clonedTable.indices.find(function (index) {\n                  return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(function (columnName) {\n                    return columnName === newColumn.name;\n                  });\n                });\n                clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex_1), 1);\n                tableUnique = clonedTable.uniques.find(function (unique) {\n                  return unique.name === uniqueIndex_1.name;\n                });\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique), 1);\n                upQueries.push(this.dropIndexSql(table, uniqueIndex_1));\n                downQueries.push(this.createIndexSql(table, uniqueIndex_1));\n              }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n              if (newColumn.default !== null && newColumn.default !== undefined) {\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER (\\\"\" + newColumn.name + \"\\\" \" + this.connection.driver.createFullType(newColumn) + \" DEFAULT \" + newColumn.default + \")\"));\n\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                  downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER (\\\"\" + oldColumn.name + \"\\\" \" + this.connection.driver.createFullType(oldColumn) + \" DEFAULT \" + oldColumn.default + \")\"));\n                } else {\n                  downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER (\\\"\" + oldColumn.name + \"\\\" \" + this.connection.driver.createFullType(oldColumn) + \" DEFAULT NULL)\"));\n                }\n              } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER (\\\"\" + newColumn.name + \"\\\" \" + this.connection.driver.createFullType(newColumn) + \" DEFAULT NULL)\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER (\\\"\" + oldColumn.name + \"\\\" \" + this.connection.driver.createFullType(oldColumn) + \" DEFAULT \" + oldColumn.default + \")\"));\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 7:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            _b.label = 8;\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Changes a column in the table.\n   */\n\n\n  SapQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var changedColumns_1, changedColumns_1_1, _a, oldColumn, newColumn, e_2_1;\n\n      var e_2, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 5, 6, 7]);\n\n            changedColumns_1 = __values(changedColumns), changedColumns_1_1 = changedColumns_1.next();\n            _c.label = 1;\n\n          case 1:\n            if (!!changedColumns_1_1.done) return [3\n            /*break*/\n            , 4];\n            _a = changedColumns_1_1.value, oldColumn = _a.oldColumn, newColumn = _a.newColumn;\n            return [4\n            /*yield*/\n            , this.changeColumn(tableOrName, oldColumn, newColumn)];\n\n          case 2:\n            _c.sent();\n\n            _c.label = 3;\n\n          case 3:\n            changedColumns_1_1 = changedColumns_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_2_1 = _c.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (changedColumns_1_1 && !changedColumns_1_1.done && (_b = changedColumns_1.return)) _b.call(changedColumns_1);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops column in the table.\n   */\n\n\n  SapQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, parsedTableName, column, clonedTable, upQueries, downQueries, referencedForeignKeySql, dbForeignKeys_2, referencedForeignKeys, referencedForeignKeyTableMapping_2, pkName, columnNames, tableColumn, pkName_2, columnNames_2, columnIndex, uniqueName_1, foundUnique, indexName_1, foundIndex, columnCheck;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            parsedTableName = this.parseTableName(table);\n            column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n            if (!column) throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            if (!column.isPrimary) return [3\n            /*break*/\n            , 5];\n            referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n            return [4\n            /*yield*/\n            , this.query(referencedForeignKeySql)];\n\n          case 4:\n            dbForeignKeys_2 = _b.sent();\n            referencedForeignKeys = [];\n            referencedForeignKeyTableMapping_2 = [];\n\n            if (dbForeignKeys_2.length > 0) {\n              referencedForeignKeys = dbForeignKeys_2.map(function (dbForeignKey) {\n                var foreignKeys = dbForeignKeys_2.filter(function (dbFk) {\n                  return dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"];\n                });\n                referencedForeignKeyTableMapping_2.push({\n                  tableName: dbForeignKey[\"SCHEMA_NAME\"] + \".\" + dbForeignKey[\"TABLE_NAME\"],\n                  fkName: dbForeignKey[\"CONSTRAINT_NAME\"]\n                });\n                return new TableForeignKey({\n                  name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                  columnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"COLUMN_NAME\"];\n                  }),\n                  referencedTableName: table.name,\n                  referencedColumnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"REFERENCED_COLUMN_NAME\"];\n                  }),\n                  onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                  onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"]\n                });\n              }); // drop referenced foreign keys\n\n              referencedForeignKeys.forEach(function (foreignKey) {\n                var mapping = referencedForeignKeyTableMapping_2.find(function (it) {\n                  return it.fkName === foreignKey.name;\n                });\n                upQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n                downQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              });\n            }\n\n            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {\n              return column.name;\n            }));\n            columnNames = clonedTable.primaryColumns.map(function (primaryColumn) {\n              return \"\\\"\" + primaryColumn.name + \"\\\"\";\n            }).join(\", \");\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n            tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn.isPrimary = false; // if primary key have multiple columns, we must recreate it without dropped column\n\n            if (clonedTable.primaryColumns.length > 0) {\n              pkName_2 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNames_2 = clonedTable.primaryColumns.map(function (primaryColumn) {\n                return \"\\\"\" + primaryColumn.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName_2 + \"\\\" PRIMARY KEY (\" + columnNames_2 + \")\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName_2 + \"\\\"\"));\n            } // restore referenced foreign keys\n\n\n            referencedForeignKeys.forEach(function (foreignKey) {\n              var mapping = referencedForeignKeyTableMapping_2.find(function (it) {\n                return it.fkName === foreignKey.name;\n              });\n              upQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              downQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n            });\n            _b.label = 5;\n\n          case 5:\n            columnIndex = clonedTable.indices.find(function (index) {\n              return index.columnNames.length === 1 && index.columnNames[0] === column.name;\n            });\n\n            if (columnIndex) {\n              clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n              upQueries.push(this.dropIndexSql(table, columnIndex));\n              downQueries.push(this.createIndexSql(table, columnIndex));\n            } else if (column.isUnique) {\n              uniqueName_1 = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);\n              foundUnique = clonedTable.uniques.find(function (unique) {\n                return unique.name === uniqueName_1;\n              });\n\n              if (foundUnique) {\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\n                upQueries.push(this.dropIndexSql(table, uniqueName_1));\n                downQueries.push(new Query(\"CREATE UNIQUE INDEX \\\"\" + uniqueName_1 + \"\\\" ON \" + this.escapePath(table) + \" (\\\"\" + column.name + \"\\\")\"));\n              }\n\n              indexName_1 = this.connection.namingStrategy.indexName(table.name, [column.name]);\n              foundIndex = clonedTable.indices.find(function (index) {\n                return index.name === indexName_1;\n              });\n\n              if (foundIndex) {\n                clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\n                upQueries.push(this.dropIndexSql(table, indexName_1));\n                downQueries.push(new Query(\"CREATE UNIQUE INDEX \\\"\" + indexName_1 + \"\\\" ON \" + this.escapePath(table) + \" (\\\"\" + column.name + \"\\\")\"));\n              }\n            }\n\n            columnCheck = clonedTable.checks.find(function (check) {\n              return !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name;\n            });\n\n            if (columnCheck) {\n              clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n              upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n              downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n            }\n\n            upQueries.push(new Query(this.dropColumnSql(table, column)));\n            downQueries.push(new Query(this.addColumnSql(table, column)));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 6:\n            _b.sent();\n\n            clonedTable.removeColumn(column);\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the columns in the table.\n   */\n\n\n  SapQueryRunner.prototype.dropColumns = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var columns_2, columns_2_1, column, e_3_1;\n\n      var e_3, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            columns_2 = __values(columns), columns_2_1 = columns_2.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!columns_2_1.done) return [3\n            /*break*/\n            , 4];\n            column = columns_2_1.value;\n            return [4\n            /*yield*/\n            , this.dropColumn(tableOrName, column)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            columns_2_1 = columns_2.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_3_1 = _b.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (columns_2_1 && !columns_2_1.done && (_a = columns_2.return)) _a.call(columns_2);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new primary key.\n   */\n\n\n  SapQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            up = this.createPrimaryKeySql(table, columnNames); // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n\n            clonedTable.columns.forEach(function (column) {\n              if (columnNames.find(function (columnName) {\n                return columnName === column.name;\n              })) column.isPrimary = true;\n            });\n            down = this.dropPrimaryKeySql(clonedTable);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Updates composite primary keys.\n   */\n\n\n  SapQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, parsedTableName, clonedTable, columnNames, upQueries, downQueries, referencedForeignKeySql, dbForeignKeys, referencedForeignKeys, referencedForeignKeyTableMapping, primaryColumns, pkName_3, columnNamesString_1, pkName, columnNamesString;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            parsedTableName = this.parseTableName(table);\n            clonedTable = table.clone();\n            columnNames = columns.map(function (column) {\n              return column.name;\n            });\n            upQueries = [];\n            downQueries = [];\n            referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n            return [4\n            /*yield*/\n            , this.query(referencedForeignKeySql)];\n\n          case 4:\n            dbForeignKeys = _b.sent();\n            referencedForeignKeys = [];\n            referencedForeignKeyTableMapping = [];\n\n            if (dbForeignKeys.length > 0) {\n              referencedForeignKeys = dbForeignKeys.map(function (dbForeignKey) {\n                var foreignKeys = dbForeignKeys.filter(function (dbFk) {\n                  return dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"];\n                });\n                referencedForeignKeyTableMapping.push({\n                  tableName: dbForeignKey[\"SCHEMA_NAME\"] + \".\" + dbForeignKey[\"TABLE_NAME\"],\n                  fkName: dbForeignKey[\"CONSTRAINT_NAME\"]\n                });\n                return new TableForeignKey({\n                  name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                  columnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"COLUMN_NAME\"];\n                  }),\n                  referencedTableName: table.name,\n                  referencedColumnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"REFERENCED_COLUMN_NAME\"];\n                  }),\n                  onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                  onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"]\n                });\n              }); // drop referenced foreign keys\n\n              referencedForeignKeys.forEach(function (foreignKey) {\n                var mapping = referencedForeignKeyTableMapping.find(function (it) {\n                  return it.fkName === foreignKey.name;\n                });\n                upQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n                downQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              });\n            }\n\n            primaryColumns = clonedTable.primaryColumns;\n\n            if (primaryColumns.length > 0) {\n              pkName_3 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNamesString_1 = primaryColumns.map(function (column) {\n                return \"\\\"\" + column.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName_3 + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName_3 + \"\\\" PRIMARY KEY (\" + columnNamesString_1 + \")\"));\n            } // update columns in table.\n\n\n            clonedTable.columns.filter(function (column) {\n              return columnNames.indexOf(column.name) !== -1;\n            }).forEach(function (column) {\n              return column.isPrimary = true;\n            });\n            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n            columnNamesString = columnNames.map(function (columnName) {\n              return \"\\\"\" + columnName + \"\\\"\";\n            }).join(\", \");\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\")); // restore referenced foreign keys\n\n            referencedForeignKeys.forEach(function (foreignKey) {\n              var mapping = referencedForeignKeyTableMapping.find(function (it) {\n                return it.fkName === foreignKey.name;\n              });\n              upQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              downQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n            });\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 5:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a primary key.\n   */\n\n\n  SapQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, parsedTableName, upQueries, downQueries, referencedForeignKeySql, dbForeignKeys, referencedForeignKeys, referencedForeignKeyTableMapping;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            parsedTableName = this.parseTableName(table);\n            upQueries = [];\n            downQueries = [];\n            referencedForeignKeySql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE \\\"REFERENCED_SCHEMA_NAME\\\" = \" + parsedTableName.schema + \" AND \\\"REFERENCED_TABLE_NAME\\\" = \" + parsedTableName.tableName;\n            return [4\n            /*yield*/\n            , this.query(referencedForeignKeySql)];\n\n          case 4:\n            dbForeignKeys = _b.sent();\n            referencedForeignKeys = [];\n            referencedForeignKeyTableMapping = [];\n\n            if (dbForeignKeys.length > 0) {\n              referencedForeignKeys = dbForeignKeys.map(function (dbForeignKey) {\n                var foreignKeys = dbForeignKeys.filter(function (dbFk) {\n                  return dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"];\n                });\n                referencedForeignKeyTableMapping.push({\n                  tableName: dbForeignKey[\"SCHEMA_NAME\"] + \".\" + dbForeignKey[\"TABLE_NAME\"],\n                  fkName: dbForeignKey[\"CONSTRAINT_NAME\"]\n                });\n                return new TableForeignKey({\n                  name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                  columnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"COLUMN_NAME\"];\n                  }),\n                  referencedTableName: table.name,\n                  referencedColumnNames: foreignKeys.map(function (dbFk) {\n                    return dbFk[\"REFERENCED_COLUMN_NAME\"];\n                  }),\n                  onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                  onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"]\n                });\n              }); // drop referenced foreign keys\n\n              referencedForeignKeys.forEach(function (foreignKey) {\n                var mapping = referencedForeignKeyTableMapping.find(function (it) {\n                  return it.fkName === foreignKey.name;\n                });\n                upQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n                downQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              });\n            }\n\n            upQueries.push(this.dropPrimaryKeySql(table));\n            downQueries.push(this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) {\n              return column.name;\n            }))); // restore referenced foreign keys\n\n            referencedForeignKeys.forEach(function (foreignKey) {\n              var mapping = referencedForeignKeyTableMapping.find(function (it) {\n                return it.fkName === foreignKey.name;\n              });\n              upQueries.push(_this.createForeignKeySql(mapping.tableName, foreignKey));\n              downQueries.push(_this.dropForeignKeySql(mapping.tableName, foreignKey));\n            });\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 5:\n            _b.sent();\n\n            table.primaryColumns.forEach(function (column) {\n              column.isPrimary = false;\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new unique constraint.\n   */\n\n\n  SapQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SAP HANA does not support unique constraints. Use unique index instead.\");\n      });\n    });\n  };\n  /**\n   * Creates a new unique constraints.\n   */\n\n\n  SapQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SAP HANA does not support unique constraints. Use unique index instead.\");\n      });\n    });\n  };\n  /**\n   * Drops unique constraint.\n   */\n\n\n  SapQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SAP HANA does not support unique constraints. Use unique index instead.\");\n      });\n    });\n  };\n  /**\n   * Drops an unique constraints.\n   */\n\n\n  SapQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SAP HANA does not support unique constraints. Use unique index instead.\");\n      });\n    });\n  };\n  /**\n   * Creates a new check constraint.\n   */\n\n\n  SapQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.\n\n            if (!checkConstraint.name) checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);\n            up = this.createCheckConstraintSql(table, checkConstraint);\n            down = this.dropCheckConstraintSql(table, checkConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addCheckConstraint(checkConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new check constraints.\n   */\n\n\n  SapQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = checkConstraints.map(function (checkConstraint) {\n              return _this.createCheckConstraint(tableOrName, checkConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops check constraint.\n   */\n\n\n  SapQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, checkConstraint, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(function (c) {\n              return c.name === checkOrName;\n            });\n            if (!checkConstraint) throw new Error(\"Supplied check constraint was not found in table \" + table.name);\n            up = this.dropCheckConstraintSql(table, checkConstraint);\n            down = this.createCheckConstraintSql(table, checkConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeCheckConstraint(checkConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops check constraints.\n   */\n\n\n  SapQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = checkConstraints.map(function (checkConstraint) {\n              return _this.dropCheckConstraint(tableOrName, checkConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new exclusion constraint.\n   */\n\n\n  SapQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SAP HANA does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Creates a new exclusion constraints.\n   */\n\n\n  SapQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SAP HANA does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Drops exclusion constraint.\n   */\n\n\n  SapQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SAP HANA does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Drops exclusion constraints.\n   */\n\n\n  SapQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SAP HANA does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Creates a new foreign key.\n   */\n\n\n  SapQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new FK may be passed without name. In this case we generate FK name manually.\n\n            if (!foreignKey.name) foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n            up = this.createForeignKeySql(table, foreignKey);\n            down = this.dropForeignKeySql(table, foreignKey);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addForeignKey(foreignKey);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new foreign keys.\n   */\n\n\n  SapQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = foreignKeys.map(function (foreignKey) {\n              return _this.createForeignKey(tableOrName, foreignKey);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a foreign key from the table.\n   */\n\n\n  SapQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, foreignKey, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(function (fk) {\n              return fk.name === foreignKeyOrName;\n            });\n            if (!foreignKey) throw new Error(\"Supplied foreign key was not found in table \" + table.name);\n            up = this.dropForeignKeySql(table, foreignKey);\n            down = this.createForeignKeySql(table, foreignKey);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeForeignKey(foreignKey);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a foreign keys from the table.\n   */\n\n\n  SapQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = foreignKeys.map(function (foreignKey) {\n              return _this.dropForeignKey(tableOrName, foreignKey);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new index.\n   */\n\n\n  SapQueryRunner.prototype.createIndex = function (tableOrName, index) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new index may be passed without name. In this case we generate index name manually.\n\n            if (!index.name) index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n            up = this.createIndexSql(table, index);\n            down = this.dropIndexSql(table, index);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addIndex(index);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new indices\n   */\n\n\n  SapQueryRunner.prototype.createIndices = function (tableOrName, indices) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = indices.map(function (index) {\n              return _this.createIndex(tableOrName, index);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an index.\n   */\n\n\n  SapQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, index, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(function (i) {\n              return i.name === indexOrName;\n            });\n            if (!index) throw new Error(\"Supplied index was not found in table \" + table.name);\n            up = this.dropIndexSql(table, index);\n            down = this.createIndexSql(table, index);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeIndex(index);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an indices from the table.\n   */\n\n\n  SapQueryRunner.prototype.dropIndices = function (tableOrName, indices) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = indices.map(function (index) {\n              return _this.dropIndex(tableOrName, index);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Clears all table contents.\n   * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n   */\n\n\n  SapQueryRunner.prototype.clearTable = function (tablePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"TRUNCATE TABLE \" + this.escapePath(tablePath))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Removes all tables from the currently connected database.\n   */\n\n\n  SapQueryRunner.prototype.clearDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var schemas, schemaNamesString, selectTableDropsQuery, dropTableQueries, error_1, rollbackError_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            schemas = [];\n            this.connection.entityMetadatas.filter(function (metadata) {\n              return metadata.schema;\n            }).forEach(function (metadata) {\n              var isSchemaExist = !!schemas.find(function (schema) {\n                return schema === metadata.schema;\n              });\n              if (!isSchemaExist) schemas.push(metadata.schema);\n            });\n            schemas.push(this.driver.options.schema || \"current_schema\");\n            schemaNamesString = schemas.map(function (name) {\n              return name === \"current_schema\" ? name : \"'\" + name + \"'\";\n            }).join(\", \");\n            return [4\n            /*yield*/\n            , this.startTransaction()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 6,, 11]);\n\n            selectTableDropsQuery = \"SELECT 'DROP TABLE \\\"' || schema_name || '\\\".\\\"' || table_name || '\\\" CASCADE;' as \\\"query\\\" FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \\\"SCHEMA_NAME\\\" IN (\" + schemaNamesString + \") AND \\\"TABLE_NAME\\\" NOT IN ('SYS_AFL_GENERATOR_PARAMETERS') AND \\\"IS_COLUMN_TABLE\\\" = 'TRUE'\";\n            return [4\n            /*yield*/\n            , this.query(selectTableDropsQuery)];\n\n          case 3:\n            dropTableQueries = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(dropTableQueries.map(function (q) {\n              return _this.query(q[\"query\"]);\n            }))];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.commitTransaction()];\n\n          case 5:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 11];\n\n          case 6:\n            error_1 = _a.sent();\n            _a.label = 7;\n\n          case 7:\n            _a.trys.push([7, 9,, 10]);\n\n            return [4\n            /*yield*/\n            , this.rollbackTransaction()];\n\n          case 8:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            rollbackError_1 = _a.sent();\n            return [3\n            /*break*/\n            , 10];\n\n          case 10:\n            throw error_1;\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n\n  SapQueryRunner.prototype.loadViews = function (viewNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hasTable, currentSchema, viewsCondition, query, dbViews;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.hasTable(this.getTypeormMetadataTableName())];\n\n          case 1:\n            hasTable = _a.sent();\n            if (!hasTable) return [2\n            /*return*/\n            , Promise.resolve([])];\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 2:\n            currentSchema = _a.sent();\n            viewsCondition = viewNames.map(function (viewName) {\n              var _a = __read(viewName.split(\".\"), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              if (!name) {\n                name = schema;\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return \"(\\\"t\\\".\\\"schema\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"name\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            query = \"SELECT \\\"t\\\".* FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" WHERE \\\"t\\\".\\\"type\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\");\n            return [4\n            /*yield*/\n            , this.query(query)];\n\n          case 3:\n            dbViews = _a.sent();\n            return [2\n            /*return*/\n            , dbViews.map(function (dbView) {\n              var view = new View();\n              var schema = dbView[\"schema\"] === currentSchema && !_this.driver.options.schema ? undefined : dbView[\"schema\"];\n              view.name = _this.driver.buildTableName(dbView[\"name\"], schema);\n              view.expression = dbView[\"value\"];\n              return view;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Loads all tables (with given names) from the database and creates a Table from them.\n   */\n\n\n  SapQueryRunner.prototype.loadTables = function (tableNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, tablesCondition, tablesSql, columnsSql, constraintsCondition, constraintsSql, indicesCondition, indicesSql, foreignKeysCondition, foreignKeysSql, _a, dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            // if no tables given then no need to proceed\n            if (!tableNames || !tableNames.length) return [2\n            /*return*/\n            , []];\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            tablesCondition = tableNames.map(function (tableName) {\n              var _a = __read(tableName.split(\".\"), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              if (!name) {\n                name = schema;\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            tablesSql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n            columnsSql = \"SELECT * FROM \\\"SYS\\\".\\\"TABLE_COLUMNS\\\" WHERE \" + tablesCondition + \" ORDER BY \\\"POSITION\\\"\";\n            constraintsCondition = tableNames.map(function (tableName) {\n              var _a = __read(tableName.split(\".\"), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              if (!name) {\n                name = schema;\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            constraintsSql = \"SELECT * FROM \\\"SYS\\\".\\\"CONSTRAINTS\\\" WHERE (\" + constraintsCondition + \") ORDER BY \\\"POSITION\\\"\";\n            indicesCondition = tableNames.map(function (tableName) {\n              var _a = __read(tableName.split(\".\"), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              if (!name) {\n                name = schema;\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return \"(\\\"I\\\".\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"I\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            indicesSql = \"SELECT \\\"I\\\".\\\"INDEX_TYPE\\\", \\\"I\\\".\\\"SCHEMA_NAME\\\", \\\"I\\\".\\\"TABLE_NAME\\\", \\\"I\\\".\\\"INDEX_NAME\\\", \\\"IC\\\".\\\"COLUMN_NAME\\\", \\\"I\\\".\\\"CONSTRAINT\\\" \" + \"FROM \\\"SYS\\\".\\\"INDEXES\\\" \\\"I\\\" INNER JOIN \\\"SYS\\\".\\\"INDEX_COLUMNS\\\" \\\"IC\\\" ON \\\"IC\\\".\\\"INDEX_OID\\\" = \\\"I\\\".\\\"INDEX_OID\\\" \" + (\"WHERE (\" + indicesCondition + \") AND (\\\"I\\\".\\\"CONSTRAINT\\\" IS NULL OR \\\"I\\\".\\\"CONSTRAINT\\\" != 'PRIMARY KEY') AND \\\"I\\\".\\\"INDEX_NAME\\\" NOT LIKE '%_SYS_FULLTEXT_%' ORDER BY \\\"IC\\\".\\\"POSITION\\\"\");\n            foreignKeysCondition = tableNames.map(function (tableName) {\n              var _a = __read(tableName.split(\".\"), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              if (!name) {\n                name = schema;\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return \"(\\\"SCHEMA_NAME\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            foreignKeysSql = \"SELECT * FROM \\\"SYS\\\".\\\"REFERENTIAL_CONSTRAINTS\\\" WHERE (\" + foreignKeysCondition + \") ORDER BY \\\"POSITION\\\"\";\n            return [4\n            /*yield*/\n            , Promise.all([this.query(tablesSql), this.query(columnsSql), this.query(constraintsSql), this.query(indicesSql), this.query(foreignKeysSql)])];\n\n          case 2:\n            _a = __read.apply(void 0, [_b.sent(), 5]), dbTables = _a[0], dbColumns = _a[1], dbConstraints = _a[2], dbIndices = _a[3], dbForeignKeys = _a[4]; // if tables were not found in the db, no need to proceed\n\n            if (!dbTables.length) return [2\n            /*return*/\n            , []]; // create tables for loaded tables\n\n            return [2\n            /*return*/\n            , Promise.all(dbTables.map(function (dbTable) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var table, getSchemaFromKey, schema, tableFullName, _a, tableCheckConstraints, tableForeignKeyConstraints, tableIndexConstraints;\n\n                var _this = this;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      table = new Table();\n\n                      getSchemaFromKey = function (dbObject, key) {\n                        return dbObject[key] === currentSchema && (!_this.driver.options.schema || _this.driver.options.schema === currentSchema) ? undefined : dbObject[key];\n                      };\n\n                      schema = getSchemaFromKey(dbTable, \"SCHEMA_NAME\");\n                      table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema);\n                      tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"SCHEMA_NAME\"]); // create columns from the loaded columns\n\n                      _a = table;\n                      return [4\n                      /*yield*/\n                      , Promise.all(dbColumns.filter(function (dbColumn) {\n                        return _this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"SCHEMA_NAME\"]) === tableFullName;\n                      }).map(function (dbColumn) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var columnConstraints, columnUniqueIndex, tableMetadata, hasIgnoredIndex, isConstraintComposite, tableColumn, length_1;\n\n                          var _this = this;\n\n                          return __generator(this, function (_a) {\n                            columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                              return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"SCHEMA_NAME\"]) === tableFullName && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                            });\n                            columnUniqueIndex = dbIndices.find(function (dbIndex) {\n                              var indexTableFullName = _this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"SCHEMA_NAME\"]);\n\n                              if (indexTableFullName !== tableFullName) {\n                                return false;\n                              } // Index is not for this column\n\n\n                              if (dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]) {\n                                return false;\n                              }\n\n                              return dbIndex[\"CONSTRAINT\"] && dbIndex[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1;\n                            });\n                            tableMetadata = this.connection.entityMetadatas.find(function (metadata) {\n                              return metadata.tablePath === table.name;\n                            });\n                            hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices.some(function (index) {\n                              return index.name === columnUniqueIndex[\"INDEX_NAME\"] && index.synchronize === false;\n                            });\n                            isConstraintComposite = columnUniqueIndex ? !!dbIndices.find(function (dbIndex) {\n                              return dbIndex[\"INDEX_NAME\"] === columnUniqueIndex[\"INDEX_NAME\"] && dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"];\n                            }) : false;\n                            tableColumn = new TableColumn();\n                            tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                            tableColumn.type = dbColumn[\"DATA_TYPE_NAME\"].toLowerCase();\n\n                            if (tableColumn.type === \"dec\" || tableColumn.type === \"decimal\") {\n                              // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                              // we set 'undefined' in to unspecified property to avoid changing column on sync\n                              if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                                tableColumn.precision = dbColumn[\"LENGTH\"];\n                              } else if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                                tableColumn.precision = undefined;\n                              }\n\n                              if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                                tableColumn.scale = dbColumn[\"SCALE\"];\n                              } else if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                                tableColumn.scale = undefined;\n                              }\n                            }\n\n                            if (dbColumn[\"DATA_TYPE_NAME\"].toLowerCase() === \"array\") {\n                              tableColumn.isArray = true;\n                              tableColumn.type = dbColumn[\"CS_DATA_TYPE_NAME\"].toLowerCase();\n                            } // check only columns that have length property\n\n\n                            if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"LENGTH\"]) {\n                              length_1 = dbColumn[\"LENGTH\"].toString();\n                              tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1 : \"\";\n                            }\n\n                            tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;\n                            tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"TRUE\";\n                            tableColumn.isPrimary = !!columnConstraints.find(function (constraint) {\n                              return constraint[\"IS_PRIMARY_KEY\"] === \"TRUE\";\n                            });\n                            tableColumn.isGenerated = dbColumn[\"GENERATION_TYPE\"] === \"ALWAYS AS IDENTITY\";\n                            if (tableColumn.isGenerated) tableColumn.generationStrategy = \"increment\";\n\n                            if (dbColumn[\"DEFAULT_VALUE\"] === null || dbColumn[\"DEFAULT_VALUE\"] === undefined) {\n                              tableColumn.default = undefined;\n                            } else {\n                              if (tableColumn.type === \"char\" || tableColumn.type === \"nchar\" || tableColumn.type === \"varchar\" || tableColumn.type === \"nvarchar\" || tableColumn.type === \"alphanum\" || tableColumn.type === \"shorttext\") {\n                                tableColumn.default = \"'\" + dbColumn[\"DEFAULT_VALUE\"] + \"'\";\n                              } else if (tableColumn.type === \"boolean\") {\n                                tableColumn.default = dbColumn[\"DEFAULT_VALUE\"] === \"1\" ? \"true\" : \"false\";\n                              } else {\n                                tableColumn.default = dbColumn[\"DEFAULT_VALUE\"];\n                              }\n                            }\n\n                            tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n\n                            if (dbColumn[\"character_set_name\"]) tableColumn.charset = dbColumn[\"character_set_name\"];\n                            if (dbColumn[\"collation_name\"]) tableColumn.collation = dbColumn[\"collation_name\"];\n                            return [2\n                            /*return*/\n                            , tableColumn];\n                          });\n                        });\n                      }))];\n\n                    case 1:\n                      // create columns from the loaded columns\n                      _a.columns = _b.sent();\n                      tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                        return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"SCHEMA_NAME\"]) === tableFullName && dbConstraint[\"CHECK_CONDITION\"] !== null && dbConstraint[\"CHECK_CONDITION\"] !== undefined;\n                      }), function (dbConstraint) {\n                        return dbConstraint[\"CONSTRAINT_NAME\"];\n                      });\n                      table.checks = tableCheckConstraints.map(function (constraint) {\n                        var checks = dbConstraints.filter(function (dbC) {\n                          return dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"];\n                        });\n                        return new TableCheck({\n                          name: constraint[\"CONSTRAINT_NAME\"],\n                          columnNames: checks.map(function (c) {\n                            return c[\"COLUMN_NAME\"];\n                          }),\n                          expression: constraint[\"CHECK_CONDITION\"]\n                        });\n                      });\n                      tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(function (dbForeignKey) {\n                        return _this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"SCHEMA_NAME\"]) === tableFullName;\n                      }), function (dbForeignKey) {\n                        return dbForeignKey[\"CONSTRAINT_NAME\"];\n                      });\n                      table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {\n                        var foreignKeys = dbForeignKeys.filter(function (dbFk) {\n                          return dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"];\n                        }); // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n\n                        var schema = getSchemaFromKey(dbTable, \"REFERENCED_SCHEMA_NAME\");\n\n                        var referencedTableName = _this.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], schema);\n\n                        return new TableForeignKey({\n                          name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                          columnNames: foreignKeys.map(function (dbFk) {\n                            return dbFk[\"COLUMN_NAME\"];\n                          }),\n                          referencedTableName: referencedTableName,\n                          referencedColumnNames: foreignKeys.map(function (dbFk) {\n                            return dbFk[\"REFERENCED_COLUMN_NAME\"];\n                          }),\n                          onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                          onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"]\n                        });\n                      });\n                      tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(function (dbIndex) {\n                        return _this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"SCHEMA_NAME\"]) === tableFullName;\n                      }), function (dbIndex) {\n                        return dbIndex[\"INDEX_NAME\"];\n                      });\n                      table.indices = tableIndexConstraints.map(function (constraint) {\n                        var indices = dbIndices.filter(function (index) {\n                          return index[\"SCHEMA_NAME\"] === constraint[\"SCHEMA_NAME\"] && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                        });\n                        return new TableIndex({\n                          table: table,\n                          name: constraint[\"INDEX_NAME\"],\n                          columnNames: indices.map(function (i) {\n                            return i[\"COLUMN_NAME\"];\n                          }),\n                          isUnique: constraint[\"CONSTRAINT\"] && constraint[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1,\n                          isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\"\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      , table];\n                  }\n                });\n              });\n            }))];\n        }\n      });\n    });\n  };\n  /**\n   * Builds and returns SQL for create table.\n   */\n\n\n  SapQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {\n    var _this = this;\n\n    var columnDefinitions = table.columns.map(function (column) {\n      return _this.buildCreateColumnSql(column);\n    }).join(\", \");\n    var sql = \"CREATE TABLE \" + this.escapePath(table) + \" (\" + columnDefinitions; // we create unique indexes instead of unique constraints, because SAP HANA does not have unique constraints.\n    // if we mark column as Unique, it means that we create UNIQUE INDEX.\n\n    table.columns.filter(function (column) {\n      return column.isUnique;\n    }).forEach(function (column) {\n      var isUniqueIndexExist = table.indices.some(function (index) {\n        return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;\n      });\n      var isUniqueConstraintExist = table.uniques.some(function (unique) {\n        return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;\n      });\n      if (!isUniqueIndexExist && !isUniqueConstraintExist) table.indices.push(new TableIndex({\n        name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n        columnNames: [column.name],\n        isUnique: true\n      }));\n    }); // as SAP HANA does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n\n    if (table.uniques.length > 0) {\n      table.uniques.forEach(function (unique) {\n        var uniqueExist = table.indices.some(function (index) {\n          return index.name === unique.name;\n        });\n\n        if (!uniqueExist) {\n          table.indices.push(new TableIndex({\n            name: unique.name,\n            columnNames: unique.columnNames,\n            isUnique: true\n          }));\n        }\n      });\n    }\n\n    if (table.checks.length > 0) {\n      var checksSql = table.checks.map(function (check) {\n        var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);\n        return \"CONSTRAINT \\\"\" + checkName + \"\\\" CHECK (\" + check.expression + \")\";\n      }).join(\", \");\n      sql += \", \" + checksSql;\n    }\n\n    if (table.foreignKeys.length > 0 && createForeignKeys) {\n      var foreignKeysSql = table.foreignKeys.map(function (fk) {\n        var columnNames = fk.columnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        if (!fk.name) fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n        var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        var constraint = \"CONSTRAINT \\\"\" + fk.name + \"\\\" FOREIGN KEY (\" + columnNames + \") REFERENCES \" + _this.escapePath(fk.referencedTableName) + \" (\" + referencedColumnNames + \")\"; // SAP HANA does not have \"NO ACTION\" option for FK's\n\n        if (fk.onDelete) {\n          var onDelete = fk.onDelete === \"NO ACTION\" ? \"RESTRICT\" : fk.onDelete;\n          constraint += \" ON DELETE \" + onDelete;\n        }\n\n        if (fk.onUpdate) {\n          var onUpdate = fk.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : fk.onUpdate;\n          constraint += \" ON UPDATE \" + onUpdate;\n        }\n\n        return constraint;\n      }).join(\", \");\n      sql += \", \" + foreignKeysSql;\n    }\n\n    var primaryColumns = table.columns.filter(function (column) {\n      return column.isPrimary;\n    });\n\n    if (primaryColumns.length > 0) {\n      var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(function (column) {\n        return column.name;\n      }));\n      var columnNames = primaryColumns.map(function (column) {\n        return \"\\\"\" + column.name + \"\\\"\";\n      }).join(\", \");\n      sql += \", CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNames + \")\";\n    }\n\n    sql += \")\";\n    return new Query(sql);\n  };\n  /**\n   * Builds drop table sql.\n   */\n\n\n  SapQueryRunner.prototype.dropTableSql = function (tableOrName, ifExist) {\n    var query = ifExist ? \"DROP TABLE IF EXISTS \" + this.escapePath(tableOrName) : \"DROP TABLE \" + this.escapePath(tableOrName);\n    return new Query(query);\n  };\n\n  SapQueryRunner.prototype.createViewSql = function (view) {\n    if (typeof view.expression === \"string\") {\n      return new Query(\"CREATE VIEW \" + this.escapePath(view) + \" AS \" + view.expression);\n    } else {\n      return new Query(\"CREATE VIEW \" + this.escapePath(view) + \" AS \" + view.expression(this.connection).getQuery());\n    }\n  };\n\n  SapQueryRunner.prototype.insertViewDefinitionSql = function (view) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, splittedName, schema, name, expression, _a, query, parameters;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            splittedName = view.name.split(\".\");\n            schema = this.driver.options.schema || currentSchema;\n            name = view.name;\n\n            if (splittedName.length === 2) {\n              schema = splittedName[0];\n              name = splittedName[1];\n            }\n\n            expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n            _a = __read(this.connection.createQueryBuilder().insert().into(this.getTypeormMetadataTableName()).values({\n              type: \"VIEW\",\n              schema: schema,\n              name: name,\n              value: expression\n            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n            return [2\n            /*return*/\n            , new Query(query, parameters)];\n        }\n      });\n    });\n  };\n  /**\n   * Builds drop view sql.\n   */\n\n\n  SapQueryRunner.prototype.dropViewSql = function (viewOrPath) {\n    return new Query(\"DROP VIEW \" + this.escapePath(viewOrPath));\n  };\n  /**\n   * Builds remove view sql.\n   */\n\n\n  SapQueryRunner.prototype.deleteViewDefinitionSql = function (viewOrPath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, viewName, splittedName, schema, name, qb, _a, query, parameters;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n            splittedName = viewName.split(\".\");\n            schema = this.driver.options.schema || currentSchema;\n            name = viewName;\n\n            if (splittedName.length === 2) {\n              schema = splittedName[0];\n              name = splittedName[1];\n            }\n\n            qb = this.connection.createQueryBuilder();\n            _a = __read(qb.delete().from(this.getTypeormMetadataTableName()).where(qb.escape(\"type\") + \" = 'VIEW'\").andWhere(qb.escape(\"schema\") + \" = :schema\", {\n              schema: schema\n            }).andWhere(qb.escape(\"name\") + \" = :name\", {\n              name: name\n            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n            return [2\n            /*return*/\n            , new Query(query, parameters)];\n        }\n      });\n    });\n  };\n\n  SapQueryRunner.prototype.addColumnSql = function (table, column) {\n    return \"ALTER TABLE \" + this.escapePath(table) + \" ADD (\" + this.buildCreateColumnSql(column) + \")\";\n  };\n\n  SapQueryRunner.prototype.dropColumnSql = function (table, column) {\n    return \"ALTER TABLE \" + this.escapePath(table) + \" DROP (\\\"\" + column.name + \"\\\")\";\n  };\n  /**\n   * Builds create index sql.\n   */\n\n\n  SapQueryRunner.prototype.createIndexSql = function (table, index) {\n    var columns = index.columnNames.map(function (columnName) {\n      return \"\\\"\" + columnName + \"\\\"\";\n    }).join(\", \");\n    var indexType = \"\";\n\n    if (index.isUnique) {\n      indexType += \"UNIQUE \";\n    }\n\n    if (index.isFulltext) {\n      indexType += \"FULLTEXT \";\n    }\n\n    return new Query(\"CREATE \" + indexType + \"INDEX \\\"\" + index.name + \"\\\" ON \" + this.escapePath(table) + \" (\" + columns + \") \" + (index.where ? \"WHERE \" + index.where : \"\"));\n  };\n  /**\n   * Builds drop index sql.\n   */\n\n\n  SapQueryRunner.prototype.dropIndexSql = function (table, indexOrName) {\n    var indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n    var parsedTableName = this.parseTableName(table);\n\n    if (parsedTableName.schema === \"current_schema\") {\n      return new Query(\"DROP INDEX \\\"\" + indexName + \"\\\"\");\n    } else {\n      return new Query(\"DROP INDEX \\\"\" + parsedTableName.schema.replace(/'/g, \"\") + \"\\\".\\\"\" + indexName + \"\\\"\");\n    }\n  };\n  /**\n   * Builds create primary key sql.\n   */\n\n\n  SapQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {\n    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n    var columnNamesString = columnNames.map(function (columnName) {\n      return \"\\\"\" + columnName + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\");\n  };\n  /**\n   * Builds drop primary key sql.\n   */\n\n\n  SapQueryRunner.prototype.dropPrimaryKeySql = function (table) {\n    var columnNames = table.primaryColumns.map(function (column) {\n      return column.name;\n    });\n    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + primaryKeyName + \"\\\"\");\n  };\n  /**\n   * Builds create check constraint sql.\n   */\n\n\n  SapQueryRunner.prototype.createCheckConstraintSql = function (table, checkConstraint) {\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + checkConstraint.name + \"\\\" CHECK (\" + checkConstraint.expression + \")\");\n  };\n  /**\n   * Builds drop check constraint sql.\n   */\n\n\n  SapQueryRunner.prototype.dropCheckConstraintSql = function (table, checkOrName) {\n    var checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + checkName + \"\\\"\");\n  };\n  /**\n   * Builds create foreign key sql.\n   */\n\n\n  SapQueryRunner.prototype.createForeignKeySql = function (tableOrName, foreignKey) {\n    var columnNames = foreignKey.columnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\", \");\n    var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\",\");\n    var sql = \"ALTER TABLE \" + this.escapePath(tableOrName) + \" ADD CONSTRAINT \\\"\" + foreignKey.name + \"\\\" FOREIGN KEY (\" + columnNames + \") \" + (\"REFERENCES \" + this.escapePath(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\"); // SAP HANA does not have \"NO ACTION\" option for FK's\n\n    if (foreignKey.onDelete) {\n      var onDelete = foreignKey.onDelete === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onDelete;\n      sql += \" ON DELETE \" + onDelete;\n    }\n\n    if (foreignKey.onUpdate) {\n      var onUpdate = foreignKey.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onUpdate;\n      sql += \" ON UPDATE \" + onUpdate;\n    }\n\n    return new Query(sql);\n  };\n  /**\n   * Builds drop foreign key sql.\n   */\n\n\n  SapQueryRunner.prototype.dropForeignKeySql = function (tableOrName, foreignKeyOrName) {\n    var foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n    return new Query(\"ALTER TABLE \" + this.escapePath(tableOrName) + \" DROP CONSTRAINT \\\"\" + foreignKeyName + \"\\\"\");\n  };\n  /**\n   * Escapes given table or view path.\n   */\n\n\n  SapQueryRunner.prototype.escapePath = function (target, disableEscape) {\n    var tableName = target instanceof Table || target instanceof View ? target.name : target;\n    tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? this.driver.options.schema + \".\" + tableName : tableName;\n    return tableName.split(\".\").map(function (i) {\n      return disableEscape ? i : \"\\\"\" + i + \"\\\"\";\n    }).join(\".\");\n  };\n  /**\n   * Returns object with table schema and table name.\n   */\n\n\n  SapQueryRunner.prototype.parseTableName = function (target) {\n    var tableName = target instanceof Table ? target.name : target;\n\n    if (tableName.indexOf(\".\") === -1) {\n      return {\n        schema: this.driver.options.schema ? \"'\" + this.driver.options.schema + \"'\" : \"current_schema\",\n        tableName: \"'\" + tableName + \"'\"\n      };\n    } else {\n      return {\n        schema: \"'\" + tableName.split(\".\")[0] + \"'\",\n        tableName: \"'\" + tableName.split(\".\")[1] + \"'\"\n      };\n    }\n  };\n  /**\n   * Concat database name and schema name to the foreign key name.\n   * Needs because FK name is relevant to the schema and database.\n   */\n\n\n  SapQueryRunner.prototype.buildForeignKeyName = function (fkName, schemaName, dbName) {\n    var joinedFkName = fkName;\n    if (schemaName) joinedFkName = schemaName + \".\" + joinedFkName;\n    if (dbName) joinedFkName = dbName + \".\" + joinedFkName;\n    return joinedFkName;\n  };\n  /**\n   * Removes parenthesis around default value.\n   * Sql server returns default value with parenthesis around, e.g.\n   *  ('My text') - for string\n   *  ((1)) - for number\n   *  (newsequentialId()) - for function\n   */\n\n\n  SapQueryRunner.prototype.removeParenthesisFromDefault = function (defaultValue) {\n    if (defaultValue.substr(0, 1) !== \"(\") return defaultValue;\n    var normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n    return this.removeParenthesisFromDefault(normalizedDefault);\n  };\n  /**\n   * Builds a query for create column.\n   */\n\n\n  SapQueryRunner.prototype.buildCreateColumnSql = function (column) {\n    var c = \"\\\"\" + column.name + \"\\\" \" + this.connection.driver.createFullType(column);\n    if (column.charset) c += \" CHARACTER SET \" + column.charset;\n    if (column.collation) c += \" COLLATE \" + column.collation;\n    if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL\n      c += \" DEFAULT \" + column.default;\n    if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n      c += \" NOT NULL\";\n    if (column.isGenerated === true && column.generationStrategy === \"increment\") c += \" GENERATED ALWAYS AS IDENTITY\";\n    return c;\n  };\n\n  return SapQueryRunner;\n}(BaseQueryRunner);\n\nexport { SapQueryRunner };","map":{"version":3,"sources":["../browser/src/driver/sap/SapQueryRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnType, QueryFailedError} from \"../../index\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {SapDriver} from \"./SapDriver\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SapQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SapDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because we cannot rely on parallel queries because we use second query\n     * to select CURRENT_IDENTITY_VALUE()\n     */\n    protected queryResponsibilityChain: Promise<any>[] = [];\n\n    /**\n     * Promise used to obtain a database connection from a pool for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SapDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    async connect(): Promise<any> {\n        if (this.databaseConnection)\n            return this.databaseConnection;\n\n        this.databaseConnection = await this.driver.obtainMasterConnection();\n\n        return this.databaseConnection;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n\n        if (this.databaseConnection) {\n            return this.driver.master.release(this.databaseConnection);\n        }\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n        if (isolationLevel) {\n            await this.query(`SET TRANSACTION ISOLATION LEVEL ${isolationLevel || \"\"}`);\n        }\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise(async (ok, fail) => {\n           try {\n               const databaseConnection = await this.connect();\n               // we disable autocommit because ROLLBACK does not work in autocommit mode\n               databaseConnection.setAutoCommit(!this.isTransactionActive);\n               this.driver.connection.logger.logQuery(query, parameters, this);\n               const queryStartTime = +new Date();\n               const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n\n               const statement = databaseConnection.prepare(query);\n               statement.exec(parameters, (err: any, result: any) => {\n\n                   // log slow queries if maxQueryExecution time is set\n                   const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                   const queryEndTime = +new Date();\n                   const queryExecutionTime = queryEndTime - queryStartTime;\n                   if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                       this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                   const resolveChain = () => {\n                       if (promiseIndex !== -1)\n                           this.queryResponsibilityChain.splice(promiseIndex, 1);\n                       if (waitingPromiseIndex !== -1)\n                           this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                       waitingOkay();\n                   };\n\n                   let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                   let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                   if (err) {\n                       this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                       resolveChain();\n                       return fail(new QueryFailedError(query, parameters, err));\n\n                   } else {\n                       if (isInsertQuery) {\n                           const lastIdQuery = `SELECT CURRENT_IDENTITY_VALUE() FROM \"SYS\".\"DUMMY\"`;\n                           this.driver.connection.logger.logQuery(lastIdQuery, [], this);\n                           databaseConnection.exec(lastIdQuery, (err: any, result: { \"CURRENT_IDENTITY_VALUE()\": number }[]) => {\n                               if (err) {\n                                   this.driver.connection.logger.logQueryError(err, lastIdQuery, [], this);\n                                   resolveChain();\n                                   fail(new QueryFailedError(lastIdQuery, [], err));\n                                   return;\n                               }\n                               ok(result[0][\"CURRENT_IDENTITY_VALUE()\"]);\n                               resolveChain();\n                           });\n                       } else {\n                           ok(result);\n                           resolveChain();\n                       }\n                   }\n               });\n           } catch (err) {\n                fail(err);\n            }\n        });\n\n        // with this condition, Promise.all causes unexpected behavior.\n        // if (this.isTransactionActive)\n        this.queryResponsibilityChain.push(promise);\n        return promise;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        throw new Error(`Stream is not supported by SAP driver.`);\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`SELECT DATABASE_NAME FROM \"SYS\".\"M_DATABASES\"`);\n        return results.map(result => result[\"DATABASE_NAME\"]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database ? `SELECT * FROM \"${database}\".\"SYS\".\"SCHEMAS\"` : `SELECT * FROM \"SYS\".\"SCHEMAS\"`;\n        const results: ObjectLiteral[] = await this.query(query);\n        return results.map(result => result[\"SCHEMA_NAME\"]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const databases = await this.getDatabases();\n        return databases.indexOf(database) !== -1;\n    }\n\n    /**\n     * Returns current database.\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT \"VALUE\" AS \"db_name\" FROM \"SYS\".\"M_SYSTEM_OVERVIEW\" WHERE \"SECTION\" = 'System' and \"NAME\" = 'Instance ID'`);\n        return currentDBQuery[0][\"db_name\"];\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const schemas = await this.getSchemas();\n        return schemas.indexOf(schema) !== -1;\n    }\n\n    /**\n     * Returns current schema.\n     */\n    async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(`SELECT CURRENT_SCHEMA AS \"schema_name\" FROM \"SYS\".\"DUMMY\"`);\n        return currentSchemaQuery[0][\"schema_name\"];\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" = ${parsedTableName.schema} AND \"TABLE_NAME\" = ${parsedTableName.tableName}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE \"SCHEMA_NAME\" = ${parsedTableName.schema} AND \"TABLE_NAME\" = ${parsedTableName.tableName} AND \"COLUMN_NAME\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\n        let exist = false;\n        if (ifNotExist) {\n            const result = await this.query(`SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '${schema}'`);\n            exist = !!result.length;\n        }\n        if (!ifNotExist || (ifNotExist && !exist)) {\n            const up = `CREATE SCHEMA \"${schema}\"`;\n            const down = `DROP SCHEMA \"${schema}\" CASCADE`;\n            await this.executeQueries(new Query(up), new Query(down));\n        }\n    }\n\n    /**\n     * Drops table schema\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void> {\n        const schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n        let exist = false;\n        if (ifExist) {\n            const result = await this.query(`SELECT * FROM \"SYS\".\"SCHEMAS\" WHERE \"SCHEMA_NAME\" = '${schema}'`);\n            exist = !!result.length;\n        }\n        if (!ifExist || (ifExist && exist)) {\n            const up = `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\n            const down = `CREATE SCHEMA \"${schema}\"`;\n            await this.executeQueries(new Query(up), new Query(down));\n        }\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        const oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n        const schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n        newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;\n\n        // rename table\n        upQueries.push(new Query(`RENAME TABLE ${this.escapePath(oldTable.name)} TO ${this.escapePath(newTableName)}`));\n        downQueries.push(new Query(`RENAME TABLE ${this.escapePath(newTable.name)} TO ${this.escapePath(oldTableName)}`));\n\n        // drop old FK's. Foreign keys must be dropped before the primary keys are dropped\n        newTable.foreignKeys.forEach(foreignKey => {\n            upQueries.push(this.dropForeignKeySql(newTable, foreignKey));\n            downQueries.push(this.createForeignKeySql(newTable, foreignKey));\n        });\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = '${schemaName}' AND \"REFERENCED_TABLE_NAME\" = '${oldTableName}'`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: newTable.name, // we use renamed table name\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n            const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // drop old PK\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT \"${oldPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT \"${oldPkName}\" PRIMARY KEY (${columnNamesString})`));\n\n            // create new PK\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} ADD CONSTRAINT \"${newPkName}\" PRIMARY KEY (${columnNamesString})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} DROP CONSTRAINT \"${newPkName}\"`));\n        }\n\n        // recreate foreign keys with new constraint names\n        newTable.foreignKeys.forEach(foreignKey => {\n            // replace constraint name\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // create new FK's\n            upQueries.push(this.createForeignKeySql(newTable, foreignKey));\n            downQueries.push(this.dropForeignKeySql(newTable, foreignKey));\n        });\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // drop old index\n            upQueries.push(this.dropIndexSql(newTable, index));\n            downQueries.push(this.createIndexSql(newTable, index));\n\n            // replace constraint name\n            index.name = newIndexName;\n\n            // create new index\n            upQueries.push(this.createIndexSql(newTable, index));\n            downQueries.push(this.dropIndexSql(newTable, index));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(this.addColumnSql(table, column)));\n        downQueries.push(new Query(this.dropColumnSql(table, column)));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n                // To avoid this, we must drop all referential foreign keys and recreate them later\n                const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n                const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n                let referencedForeignKeys: TableForeignKey[] = [];\n                const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n                if (dbForeignKeys.length > 0) {\n                    referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                        const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                        referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                        return new TableForeignKey({\n                            name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                            columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                            referencedTableName: table.name,\n                            referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                            onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                            onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                        });\n                    });\n\n                    // drop referenced foreign keys\n                    referencedForeignKeys.forEach(foreignKey => {\n                        const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                        upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                        downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                    });\n                }\n\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n                // restore referenced foreign keys\n                referencedForeignKeys.forEach(foreignKey => {\n                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                    upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                    downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                });\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n\n        } else if (column.isUnique) {\n            const uniqueIndex = new TableIndex({\n                name: this.connection.namingStrategy.indexName(table.name, [column.name]),\n                columnNames: [column.name],\n                isUnique: true\n            });\n            clonedTable.indices.push(uniqueIndex);\n            clonedTable.uniques.push(new TableUnique({\n                name: uniqueIndex.name,\n                columnNames: uniqueIndex.columnNames\n            }));\n            upQueries.push(this.createIndexSql(table, uniqueIndex));\n            downQueries.push(this.dropIndexSql(table, uniqueIndex));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n\n                // rename column\n                upQueries.push(new Query(`RENAME COLUMN ${this.escapePath(table)}.\"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`RENAME COLUMN ${this.escapePath(table)}.\"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n                    const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                    // drop old PK\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${oldPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${oldPkName}\" PRIMARY KEY (${columnNamesString})`));\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // create new PK\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${newPkName}\" PRIMARY KEY (${columnNamesString})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${newPkName}\"`));\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // drop old index\n                    upQueries.push(this.dropIndexSql(clonedTable, index));\n                    downQueries.push(this.createIndexSql(clonedTable, index));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n\n                    // create new index\n                    upQueries.push(this.createIndexSql(clonedTable, index));\n                    downQueries.push(this.dropIndexSql(clonedTable, index));\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    upQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));\n                    downQueries.push(this.createForeignKeySql(clonedTable, foreignKey));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n\n                    // create new FK's\n                    upQueries.push(this.createForeignKeySql(clonedTable, foreignKey));\n                    downQueries.push(this.dropForeignKeySql(clonedTable, foreignKey));\n                });\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach(check => {\n                    // build new constraint name\n                    check.columnNames!.splice(check.columnNames!.indexOf(oldColumn.name), 1);\n                    check.columnNames!.push(newColumn.name);\n                    const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression!);\n\n                    upQueries.push(this.dropCheckConstraintSql(clonedTable, check));\n                    downQueries.push(this.createCheckConstraintSql(clonedTable, check));\n\n                    // replace constraint name\n                    check.name = newCheckName;\n\n                    upQueries.push(this.createCheckConstraintSql(clonedTable, check));\n                    downQueries.push(this.dropCheckConstraintSql(clonedTable, check));\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(newColumn)})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (${this.buildCreateColumnSql(oldColumn)})`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueIndex = new TableIndex({\n                        name: this.connection.namingStrategy.indexName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name],\n                        isUnique: true\n                    });\n                    clonedTable.indices.push(uniqueIndex);\n                    clonedTable.uniques.push(new TableUnique({\n                        name: uniqueIndex.name,\n                        columnNames: uniqueIndex.columnNames\n                    }));\n                    upQueries.push(this.createIndexSql(table, uniqueIndex));\n                    downQueries.push(this.dropIndexSql(table, uniqueIndex));\n\n                } else {\n                    const uniqueIndex = clonedTable.indices.find(index => {\n                        return index.columnNames.length === 1 && index.isUnique === true && !!index.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.indices.splice(clonedTable.indices.indexOf(uniqueIndex!), 1);\n\n                    const tableUnique = clonedTable.uniques.find(unique => unique.name === uniqueIndex!.name);\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(tableUnique!), 1);\n\n                    upQueries.push(this.dropIndexSql(table, uniqueIndex!));\n                    downQueries.push(this.createIndexSql(table, uniqueIndex!));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)} DEFAULT ${newColumn.default})`));\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));\n                    } else {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT NULL)`));\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${newColumn.name}\" ${this.connection.driver.createFullType(newColumn)} DEFAULT NULL)`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER (\"${oldColumn.name}\" ${this.connection.driver.createFullType(oldColumn)} DEFAULT ${oldColumn.default})`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn)\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n            // To avoid this, we must drop all referential foreign keys and recreate them later\n            const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n            const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n            let referencedForeignKeys: TableForeignKey[] = [];\n            const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n            if (dbForeignKeys.length > 0) {\n                referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                    const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                    referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                    return new TableForeignKey({\n                        name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                        columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                        referencedTableName: table.name,\n                        referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                        onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                        onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                    });\n                });\n\n                // drop referenced foreign keys\n                referencedForeignKeys.forEach(foreignKey => {\n                    const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                    upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                    downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                });\n            }\n\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n\n            // restore referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n\n        } else if (column.isUnique) {\n            // we splice constraints both from table uniques and indices.\n            const uniqueName = this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]);\n            const foundUnique = clonedTable.uniques.find(unique => unique.name === uniqueName);\n            if (foundUnique) {\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(foundUnique), 1);\n                upQueries.push(this.dropIndexSql(table, uniqueName));\n                downQueries.push(new Query(`CREATE UNIQUE INDEX \"${uniqueName}\" ON ${this.escapePath(table)} (\"${column.name}\")`));\n            }\n\n            const indexName = this.connection.namingStrategy.indexName(table.name, [column.name]);\n            const foundIndex = clonedTable.indices.find(index => index.name === indexName);\n            if (foundIndex) {\n                clonedTable.indices.splice(clonedTable.indices.indexOf(foundIndex), 1);\n                upQueries.push(this.dropIndexSql(table, indexName));\n                downQueries.push(new Query(`CREATE UNIQUE INDEX \"${indexName}\" ON ${this.escapePath(table)} (\"${column.name}\")`));\n            }\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        upQueries.push(new Query(this.dropColumnSql(table, column)));\n        downQueries.push(new Query(this.addColumnSql(table, column)));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: table.name,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const parsedTableName = this.parseTableName(table);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // SAP HANA does not allow to drop PK's which is referenced by foreign keys.\n        // To avoid this, we must drop all referential foreign keys and recreate them later\n        const referencedForeignKeySql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE \"REFERENCED_SCHEMA_NAME\" = ${parsedTableName.schema} AND \"REFERENCED_TABLE_NAME\" = ${parsedTableName.tableName}`;\n        const dbForeignKeys: ObjectLiteral[] = await this.query(referencedForeignKeySql);\n        let referencedForeignKeys: TableForeignKey[] = [];\n        const referencedForeignKeyTableMapping: { tableName: string, fkName: string }[] = [];\n        if (dbForeignKeys.length > 0) {\n            referencedForeignKeys = dbForeignKeys.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                referencedForeignKeyTableMapping.push({ tableName: `${dbForeignKey[\"SCHEMA_NAME\"]}.${dbForeignKey[\"TABLE_NAME\"]}`, fkName: dbForeignKey[\"CONSTRAINT_NAME\"] });\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: table.name,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // drop referenced foreign keys\n            referencedForeignKeys.forEach(foreignKey => {\n                const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n                upQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n                downQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            });\n        }\n\n        upQueries.push(this.dropPrimaryKeySql(table));\n        downQueries.push(this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name)));\n\n        // restore referenced foreign keys\n        referencedForeignKeys.forEach(foreignKey => {\n            const mapping = referencedForeignKeyTableMapping.find(it => it.fkName === foreignKey.name);\n            upQueries.push(this.createForeignKeySql(mapping!.tableName, foreignKey));\n            downQueries.push(this.dropForeignKeySql(mapping!.tableName, foreignKey));\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        throw new Error(`SAP HANA does not support unique constraints. Use unique index instead.`);\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SAP HANA does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        const schemas: string[] = [];\n        this.connection.entityMetadatas\n            .filter(metadata => metadata.schema)\n            .forEach(metadata => {\n                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);\n                if (!isSchemaExist)\n                    schemas.push(metadata.schema!);\n            });\n\n        schemas.push(this.driver.options.schema || \"current_schema\");\n        const schemaNamesString = schemas.map(name => {\n            return name === \"current_schema\" ? name : \"'\" + name + \"'\";\n        }).join(\", \");\n\n        await this.startTransaction();\n        try {\n            // const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\n            //     `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`;\n            // const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\n            // await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\n\n            // ignore spatial_ref_sys; it's a special table supporting PostGIS\n            const selectTableDropsQuery = `SELECT 'DROP TABLE \"' || schema_name || '\".\"' || table_name || '\" CASCADE;' as \"query\" FROM \"SYS\".\"TABLES\" WHERE \"SCHEMA_NAME\" IN (${schemaNamesString}) AND \"TABLE_NAME\" NOT IN ('SYS_AFL_GENERATOR_PARAMETERS') AND \"IS_COLUMN_TABLE\" = 'TRUE'`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map(q => this.query(q[\"query\"])));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchema = await this.getCurrentSchema();\n\n        const viewsCondition = viewNames.map(viewName => {\n            let [schema, name] = viewName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = `SELECT \"t\".* FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" WHERE \"t\".\"type\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const currentSchema = await this.getCurrentSchema();\n        const tablesCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n        const tablesSql = `SELECT * FROM \"SYS\".\"TABLES\" WHERE ` + tablesCondition;\n        const columnsSql = `SELECT * FROM \"SYS\".\"TABLE_COLUMNS\" WHERE ` + tablesCondition + ` ORDER BY \"POSITION\"`;\n\n        const constraintsCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = `SELECT * FROM \"SYS\".\"CONSTRAINTS\" WHERE (${constraintsCondition}) ORDER BY \"POSITION\"`;\n\n        const indicesCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"I\".\"SCHEMA_NAME\" = '${schema}' AND \"I\".\"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n        // excluding primary key and autogenerated fulltext indices\n        const indicesSql = `SELECT \"I\".\"INDEX_TYPE\", \"I\".\"SCHEMA_NAME\", \"I\".\"TABLE_NAME\", \"I\".\"INDEX_NAME\", \"IC\".\"COLUMN_NAME\", \"I\".\"CONSTRAINT\" ` +\n            `FROM \"SYS\".\"INDEXES\" \"I\" INNER JOIN \"SYS\".\"INDEX_COLUMNS\" \"IC\" ON \"IC\".\"INDEX_OID\" = \"I\".\"INDEX_OID\" ` +\n            `WHERE (${indicesCondition}) AND (\"I\".\"CONSTRAINT\" IS NULL OR \"I\".\"CONSTRAINT\" != 'PRIMARY KEY') AND \"I\".\"INDEX_NAME\" NOT LIKE '%_SYS_FULLTEXT_%' ORDER BY \"IC\".\"POSITION\"`;\n\n        const foreignKeysCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"SCHEMA_NAME\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n        const foreignKeysSql = `SELECT * FROM \"SYS\".\"REFERENTIAL_CONSTRAINTS\" WHERE (${foreignKeysCondition}) ORDER BY \"POSITION\"`;\n        const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n            const getSchemaFromKey = (dbObject: any, key: string) => {\n                return dbObject[key] === currentSchema && (!this.driver.options.schema || this.driver.options.schema === currentSchema)\n                    ? undefined\n                    : dbObject[key]\n            };\n\n            // We do not need to join schema name, when database is by default.\n            // In this case we need local variable `tableFullName` for below comparision.\n            const schema = getSchemaFromKey(dbTable, \"SCHEMA_NAME\");\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema);\n            const tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"SCHEMA_NAME\"]);\n\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"SCHEMA_NAME\"]) === tableFullName)\n                .map(async dbColumn => {\n\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"SCHEMA_NAME\"]) === tableFullName && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const columnUniqueIndex = dbIndices.find(dbIndex => {\n                        const indexTableFullName = this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"SCHEMA_NAME\"]);\n                        if (indexTableFullName !== tableFullName) {\n                            return false;\n                        }\n\n                        // Index is not for this column\n                        if (dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"]) {\n                            return false;\n                        }\n\n                        return dbIndex[\"CONSTRAINT\"] && dbIndex[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1;\n                    });\n\n                    const tableMetadata = this.connection.entityMetadatas.find(metadata => metadata.tablePath === table.name);\n                    const hasIgnoredIndex = columnUniqueIndex && tableMetadata && tableMetadata.indices\n                        .some(index => index.name === columnUniqueIndex[\"INDEX_NAME\"] && index.synchronize === false);\n\n                    const isConstraintComposite = columnUniqueIndex\n                        ? !!dbIndices.find(dbIndex => dbIndex[\"INDEX_NAME\"] === columnUniqueIndex[\"INDEX_NAME\"] && dbIndex[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE_NAME\"].toLowerCase();\n\n                    if (tableColumn.type === \"dec\" || tableColumn.type === \"decimal\") {\n                        // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                        // we set 'undefined' in to unspecified property to avoid changing column on sync\n                        if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                            tableColumn.precision = dbColumn[\"LENGTH\"];\n                        } else if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                            tableColumn.precision = undefined;\n                        }\n                        if (dbColumn[\"SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"SCALE\"])) {\n                            tableColumn.scale = dbColumn[\"SCALE\"];\n                        } else if (dbColumn[\"LENGTH\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"LENGTH\"])) {\n                            tableColumn.scale = undefined;\n                        }\n                    }\n\n                    if (dbColumn[\"DATA_TYPE_NAME\"].toLowerCase() === \"array\") {\n                        tableColumn.isArray = true;\n                        tableColumn.type = dbColumn[\"CS_DATA_TYPE_NAME\"].toLowerCase();\n                    }\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"LENGTH\"]) {\n                        const length = dbColumn[\"LENGTH\"].toString();\n                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                    }\n                    tableColumn.isUnique = !!columnUniqueIndex && !hasIgnoredIndex && !isConstraintComposite;\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"TRUE\";\n                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint[\"IS_PRIMARY_KEY\"] === \"TRUE\");\n                    tableColumn.isGenerated = dbColumn[\"GENERATION_TYPE\"] === \"ALWAYS AS IDENTITY\";\n                    if (tableColumn.isGenerated)\n                        tableColumn.generationStrategy = \"increment\";\n\n                    if (dbColumn[\"DEFAULT_VALUE\"] === null\n                        || dbColumn[\"DEFAULT_VALUE\"] === undefined) {\n                        tableColumn.default = undefined;\n\n                    } else {\n                        if (tableColumn.type === \"char\" || tableColumn.type === \"nchar\" || tableColumn.type === \"varchar\" ||\n                            tableColumn.type === \"nvarchar\" || tableColumn.type === \"alphanum\" || tableColumn.type === \"shorttext\") {\n                            tableColumn.default = `'${dbColumn[\"DEFAULT_VALUE\"]}'`;\n                        } else if (tableColumn.type === \"boolean\") {\n                            tableColumn.default = dbColumn[\"DEFAULT_VALUE\"] === \"1\" ? \"true\" : \"false\";\n                        } else {\n                            tableColumn.default = dbColumn[\"DEFAULT_VALUE\"];\n                        }\n                    }\n                    tableColumn.comment = \"\"; // dbColumn[\"COLUMN_COMMENT\"];\n                    if (dbColumn[\"character_set_name\"])\n                        tableColumn.charset = dbColumn[\"character_set_name\"];\n                    if (dbColumn[\"collation_name\"])\n                        tableColumn.collation = dbColumn[\"collation_name\"];\n                    return tableColumn;\n                }));\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"SCHEMA_NAME\"]) === tableFullName\n                    && dbConstraint[\"CHECK_CONDITION\"] !== null && dbConstraint[\"CHECK_CONDITION\"] !== undefined;\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"CHECK_CONDITION\"],\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"SCHEMA_NAME\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"CONSTRAINT_NAME\"] === dbForeignKey[\"CONSTRAINT_NAME\"]);\n\n                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n                const schema = getSchemaFromKey(dbTable, \"REFERENCED_SCHEMA_NAME\");\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REFERENCED_TABLE_NAME\"], schema);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REFERENCED_COLUMN_NAME\"]),\n                    onDelete: dbForeignKey[\"DELETE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"DELETE_RULE\"],\n                    onUpdate: dbForeignKey[\"UPDATE_RULE\"] === \"RESTRICT\" ? \"NO ACTION\" : dbForeignKey[\"UPDATE_RULE\"],\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"SCHEMA_NAME\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"INDEX_NAME\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"SCHEMA_NAME\"] === constraint[\"SCHEMA_NAME\"]\n                        && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\n                        && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\n                    isUnique: constraint[\"CONSTRAINT\"] && constraint[\"CONSTRAINT\"].indexOf(\"UNIQUE\") !== -1,\n                    isFulltext: constraint[\"INDEX_TYPE\"] === \"FULLTEXT\"\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(column)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        // we create unique indexes instead of unique constraints, because SAP HANA does not have unique constraints.\n        // if we mark column as Unique, it means that we create UNIQUE INDEX.\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueIndexExist = table.indices.some(index => {\n                    return index.columnNames.length === 1 && !!index.isUnique && index.columnNames.indexOf(column.name) !== -1;\n                });\n                const isUniqueConstraintExist = table.uniques.some(unique => {\n                    return unique.columnNames.length === 1 && unique.columnNames.indexOf(column.name) !== -1;\n                });\n                if (!isUniqueIndexExist && !isUniqueConstraintExist)\n                    table.indices.push(new TableIndex({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name],\n                        isUnique: true\n                    }));\n            });\n\n        // as SAP HANA does not have unique constraints, we must create table indices from table uniques and mark them as unique.\n        if (table.uniques.length > 0) {\n            table.uniques.forEach(unique => {\n                const uniqueExist = table.indices.some(index => index.name === unique.name);\n                if (!uniqueExist) {\n                    table.indices.push(new TableIndex({\n                        name: unique.name,\n                        columnNames: unique.columnNames,\n                        isUnique: true\n                    }));\n                }\n            });\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                // SAP HANA does not have \"NO ACTION\" option for FK's\n                if (fk.onDelete) {\n                    const onDelete = fk.onDelete === \"NO ACTION\" ? \"RESTRICT\" : fk.onDelete;\n                    constraint += ` ON DELETE ${onDelete}`;\n                }\n                if (fk.onUpdate) {\n                    const onUpdate = fk.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : fk.onUpdate;\n                    constraint += ` ON UPDATE ${onUpdate}`;\n                }\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const splittedName = view.name.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = view.name;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", schema: schema, name: name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const viewName = viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const splittedName = viewName.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = viewName;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    protected addColumnSql(table: Table, column: TableColumn): string {\n        return `ALTER TABLE ${this.escapePath(table)} ADD (${this.buildCreateColumnSql(column)})`;\n    }\n\n    protected dropColumnSql(table: Table, column: TableColumn): string {\n        return `ALTER TABLE ${this.escapePath(table)} DROP (\"${column.name}\")`;\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        let indexType = \"\";\n        if (index.isUnique) {\n            indexType += \"UNIQUE \";\n        }\n        if (index.isFulltext) {\n            indexType += \"FULLTEXT \";\n        }\n\n        return new Query(`CREATE ${indexType}INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        const parsedTableName = this.parseTableName(table);\n        if (parsedTableName.schema === \"current_schema\") {\n            return new Query(`DROP INDEX \"${indexName}\"`);\n        } else {\n            return new Query(`DROP INDEX \"${parsedTableName.schema.replace(/'/g, \"\")}\".\"${indexName}\"`);\n        }\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(tableOrName: Table|string, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(tableOrName)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n\n        // SAP HANA does not have \"NO ACTION\" option for FK's\n        if (foreignKey.onDelete) {\n            const onDelete = foreignKey.onDelete === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onDelete;\n            sql += ` ON DELETE ${onDelete}`;\n        }\n        if (foreignKey.onUpdate) {\n            const onUpdate = foreignKey.onUpdate === \"NO ACTION\" ? \"RESTRICT\" : foreignKey.onUpdate;\n            sql += ` ON UPDATE ${onUpdate}`;\n        }\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(tableOrName)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let tableName = target instanceof Table || target instanceof View ? target.name : target;\n        tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;\n\n        return tableName.split(\".\").map(i => {\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    /**\n     * Returns object with table schema and table name.\n     */\n    protected parseTableName(target: Table|string) {\n        const tableName = target instanceof Table ? target.name : target;\n        if (tableName.indexOf(\".\") === -1) {\n            return {\n                schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : \"current_schema\",\n                tableName: `'${tableName}'`\n            };\n        } else {\n            return {\n                schema: `'${tableName.split(\".\")[0]}'`,\n                tableName: `'${tableName.split(\".\")[1]}'`\n            };\n        }\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(fkName: string, schemaName: string|undefined, dbName: string|undefined): string {\n        let joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n\n        return joinedFkName;\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: any): any {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c = `\"${column.name}\" ` + this.connection.driver.createFullType(column);\n        if (column.charset)\n            c += \" CHARACTER SET \" + column.charset;\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n        if (column.default !== undefined && column.default !== null) // DEFAULT must be placed before NOT NULL\n            c += \" DEFAULT \" + column.default;\n        if (column.isNullable !== true && !column.isGenerated) // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        if (column.isGenerated === true && column.generationStrategy === \"increment\")\n            c += \" GENERATED ALWAYS AS IDENTITY\";\n\n        return c;\n    }\n\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}