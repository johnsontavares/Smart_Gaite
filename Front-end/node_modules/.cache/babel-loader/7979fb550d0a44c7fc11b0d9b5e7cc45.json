{"ast":null,"code":"import { EntityManager } from \"./EntityManager\";\nimport { MongoEntityManager } from \"./MongoEntityManager\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { SqljsEntityManager } from \"./SqljsEntityManager\";\nimport { SqljsDriver } from \"../driver/sqljs/SqljsDriver\";\n/**\n * Helps to create entity managers.\n */\n\nvar EntityManagerFactory =\n/** @class */\nfunction () {\n  function EntityManagerFactory() {}\n  /**\n   * Creates a new entity manager depend on a given connection's driver.\n   */\n\n\n  EntityManagerFactory.prototype.create = function (connection, queryRunner) {\n    if (connection.driver instanceof MongoDriver) return new MongoEntityManager(connection);\n    if (connection.driver instanceof SqljsDriver) return new SqljsEntityManager(connection, queryRunner);\n    return new EntityManager(connection, queryRunner);\n  };\n\n  return EntityManagerFactory;\n}();\n\nexport { EntityManagerFactory };","map":{"version":3,"sources":["../browser/src/entity-manager/EntityManagerFactory.ts"],"names":[],"mappings":"AACA,SAAQ,aAAR,QAA4B,iBAA5B;AACA,SAAQ,kBAAR,QAAiC,sBAAjC;AACA,SAAQ,WAAR,QAA0B,+BAA1B;AACA,SAAQ,kBAAR,QAAiC,sBAAjC;AACA,SAAQ,WAAR,QAA0B,6BAA1B;AAGA;;AAEG;;AACH,IAAA,oBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,oBAAA,GAAA,CAeC;AAbG;;AAEG;;;AACH,EAAA,oBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,UAAP,EAA+B,WAA/B,EAAwD;AACpD,QAAI,UAAU,CAAC,MAAX,YAA6B,WAAjC,EACI,OAAO,IAAI,kBAAJ,CAAuB,UAAvB,CAAP;AAEJ,QAAI,UAAU,CAAC,MAAX,YAA6B,WAAjC,EACI,OAAO,IAAI,kBAAJ,CAAuB,UAAvB,EAAmC,WAAnC,CAAP;AAEJ,WAAO,IAAI,aAAJ,CAAkB,UAAlB,EAA8B,WAA9B,CAAP;AACH,GARD;;AAUJ,SAAA,oBAAA;AAAC,CAfD,EAAA","sourcesContent":["import {Connection} from \"../connection/Connection\";\nimport {EntityManager} from \"./EntityManager\";\nimport {MongoEntityManager} from \"./MongoEntityManager\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {SqljsEntityManager} from \"./SqljsEntityManager\";\nimport {SqljsDriver} from \"../driver/sqljs/SqljsDriver\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\n\n/**\n * Helps to create entity managers.\n */\nexport class EntityManagerFactory {\n\n    /**\n     * Creates a new entity manager depend on a given connection's driver.\n     */\n    create(connection: Connection, queryRunner?: QueryRunner): EntityManager {\n        if (connection.driver instanceof MongoDriver)\n            return new MongoEntityManager(connection);\n\n        if (connection.driver instanceof SqljsDriver)\n            return new SqljsEntityManager(connection, queryRunner);\n\n        return new EntityManager(connection, queryRunner);\n    }\n\n}"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}