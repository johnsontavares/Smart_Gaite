{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\n/**\n * Database's table index stored in this class.\n */\n\nvar TableIndex =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function TableIndex(options) {\n    /**\n     * Columns included in this index.\n     */\n    this.columnNames = [];\n    this.name = options.name;\n    this.columnNames = options.columnNames;\n    this.isUnique = !!options.isUnique;\n    this.isSpatial = !!options.isSpatial;\n    this.isFulltext = !!options.isFulltext;\n    this.parser = options.parser;\n    this.where = options.where ? options.where : \"\";\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new copy of this index with exactly same properties.\n   */\n\n\n  TableIndex.prototype.clone = function () {\n    return new TableIndex({\n      name: this.name,\n      columnNames: __spreadArray([], __read(this.columnNames)),\n      isUnique: this.isUnique,\n      isSpatial: this.isSpatial,\n      isFulltext: this.isFulltext,\n      parser: this.parser,\n      where: this.where\n    });\n  }; // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates index from the index metadata object.\n   */\n\n\n  TableIndex.create = function (indexMetadata) {\n    return new TableIndex({\n      name: indexMetadata.name,\n      columnNames: indexMetadata.columns.map(function (column) {\n        return column.databaseName;\n      }),\n      isUnique: indexMetadata.isUnique,\n      isSpatial: indexMetadata.isSpatial,\n      isFulltext: indexMetadata.isFulltext,\n      parser: indexMetadata.parser,\n      where: indexMetadata.where\n    });\n  };\n\n  return TableIndex;\n}();\n\nexport { TableIndex };","map":{"version":3,"sources":["../browser/src/schema-builder/table/TableIndex.ts"],"names":[],"mappings":";AAGA;;AAEG;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;AA4CI;AACA;AACA;AAEA,WAAA,UAAA,CAAY,OAAZ,EAAsC;AArCtC;;AAEG;AACH,SAAA,WAAA,GAAwB,EAAxB;AAmCI,SAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,SAAK,WAAL,GAAmB,OAAO,CAAC,WAA3B;AACA,SAAK,QAAL,GAAgB,CAAC,CAAC,OAAO,CAAC,QAA1B;AACA,SAAK,SAAL,GAAiB,CAAC,CAAC,OAAO,CAAC,SAA3B;AACA,SAAK,UAAL,GAAkB,CAAC,CAAC,OAAO,CAAC,UAA5B;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,MAAtB;AACA,SAAK,KAAL,GAAa,OAAO,CAAC,KAAR,GAAgB,OAAO,CAAC,KAAxB,GAAgC,EAA7C;AACH,GAxDL,CA0DI;AACA;AACA;;AAEA;;AAEG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACI,WAAO,IAAI,UAAJ,CAAkC;AACrC,MAAA,IAAI,EAAE,KAAK,IAD0B;AAErC,MAAA,WAAW,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAM,KAAK,WAAX,CAAA,CAF0B;AAGrC,MAAA,QAAQ,EAAE,KAAK,QAHsB;AAIrC,MAAA,SAAS,EAAE,KAAK,SAJqB;AAKrC,MAAA,UAAU,EAAE,KAAK,UALoB;AAMrC,MAAA,MAAM,EAAE,KAAK,MANwB;AAOrC,MAAA,KAAK,EAAE,KAAK;AAPyB,KAAlC,CAAP;AASH,GAVD,CAjEJ,CA6EI;AACA;AACA;;AAEA;;AAEG;;;AACI,EAAA,UAAA,CAAA,MAAA,GAAP,UAAc,aAAd,EAA0C;AACtC,WAAO,IAAI,UAAJ,CAAkC;AACrC,MAAA,IAAI,EAAE,aAAa,CAAC,IADiB;AAErC,MAAA,WAAW,EAAE,aAAa,CAAC,OAAd,CAAsB,GAAtB,CAA0B,UAAA,MAAA,EAAM;AAAI,eAAA,MAAM,CAAN,YAAA;AAAmB,OAAvD,CAFwB;AAGrC,MAAA,QAAQ,EAAE,aAAa,CAAC,QAHa;AAIrC,MAAA,SAAS,EAAE,aAAa,CAAC,SAJY;AAKrC,MAAA,UAAU,EAAE,aAAa,CAAC,UALW;AAMrC,MAAA,MAAM,EAAE,aAAa,CAAC,MANe;AAOrC,MAAA,KAAK,EAAE,aAAa,CAAC;AAPgB,KAAlC,CAAP;AASH,GAVM;;AAYX,SAAA,UAAA;AAAC,CAhGD,EAAA","sourcesContent":["import {IndexMetadata} from \"../../metadata/IndexMetadata\";\nimport {TableIndexOptions} from \"../options/TableIndexOptions\";\n\n/**\n * Database's table index stored in this class.\n */\nexport class TableIndex {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Index name.\n     */\n    name?: string;\n\n    /**\n     * Columns included in this index.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Indicates if this index is unique.\n     */\n    isUnique: boolean;\n\n    /**\n     * The SPATIAL modifier indexes the entire column and does not allow indexed columns to contain NULL values.\n     * Works only in MySQL.\n     */\n    isSpatial: boolean;\n\n    /**\n     * The FULLTEXT modifier indexes the entire column and does not allow prefixing.\n     * Works only in MySQL.\n     */\n    isFulltext: boolean;\n\n    /**\n     * Fulltext parser.\n     * Works only in MySQL.\n     */\n    parser?: string;\n\n    /**\n     * Index filter condition.\n     */\n    where: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableIndexOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.isUnique = !!options.isUnique;\n        this.isSpatial = !!options.isSpatial;\n        this.isFulltext = !!options.isFulltext;\n        this.parser = options.parser;\n        this.where = options.where ? options.where : \"\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this index with exactly same properties.\n     */\n    clone(): TableIndex {\n        return new TableIndex(<TableIndexOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            isUnique: this.isUnique,\n            isSpatial: this.isSpatial,\n            isFulltext: this.isFulltext,\n            parser: this.parser,\n            where: this.where\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates index from the index metadata object.\n     */\n    static create(indexMetadata: IndexMetadata): TableIndex {\n        return new TableIndex(<TableIndexOptions>{\n            name: indexMetadata.name,\n            columnNames: indexMetadata.columns.map(column => column.databaseName),\n            isUnique: indexMetadata.isUnique,\n            isSpatial: indexMetadata.isSpatial,\n            isFulltext: indexMetadata.isFulltext,\n            parser: indexMetadata.parser,\n            where: indexMetadata.where\n        });\n    }\n\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}