{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\n\nvar Repository =\n/** @class */\nfunction () {\n  function Repository() {} // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new query builder that can be used to build a sql query.\n   */\n\n\n  Repository.prototype.createQueryBuilder = function (alias, queryRunner) {\n    return this.manager.createQueryBuilder(this.metadata.target, alias || this.metadata.targetName, queryRunner || this.queryRunner);\n  };\n\n  Object.defineProperty(Repository.prototype, \"target\", {\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    get: function () {\n      return this.metadata.target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Checks if entity has an id.\n   * If entity composite compose ids, it will check them all.\n   */\n\n  Repository.prototype.hasId = function (entity) {\n    return this.manager.hasId(this.metadata.target, entity);\n  };\n  /**\n   * Gets entity mixed id.\n   */\n\n\n  Repository.prototype.getId = function (entity) {\n    return this.manager.getId(this.metadata.target, entity);\n  };\n  /**\n   * Creates a new entity instance or instances.\n   * Can copy properties from the given object into new entities.\n   */\n\n\n  Repository.prototype.create = function (plainEntityLikeOrPlainEntityLikes) {\n    return this.manager.create(this.metadata.target, plainEntityLikeOrPlainEntityLikes);\n  };\n  /**\n   * Merges multiple entities (or entity-like objects) into a given entity.\n   */\n\n\n  Repository.prototype.merge = function (mergeIntoEntity) {\n    var _a;\n\n    var entityLikes = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      entityLikes[_i - 1] = arguments[_i];\n    }\n\n    return (_a = this.manager).merge.apply(_a, __spreadArray([this.metadata.target, mergeIntoEntity], __read(entityLikes)));\n  };\n  /**\n   * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n   * it loads it (and everything related to it), replaces all values with the new ones from the given object\n   * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n   * replaced from the new object.\n   *\n   * Note that given entity-like object must have an entity id / primary key to find entity by.\n   * Returns undefined if entity with given id was not found.\n   */\n\n\n  Repository.prototype.preload = function (entityLike) {\n    return this.manager.preload(this.metadata.target, entityLike);\n  };\n  /**\n   * Saves one or many given entities.\n   */\n\n\n  Repository.prototype.save = function (entityOrEntities, options) {\n    return this.manager.save(this.metadata.target, entityOrEntities, options);\n  };\n  /**\n   * Removes one or many given entities.\n   */\n\n\n  Repository.prototype.remove = function (entityOrEntities, options) {\n    return this.manager.remove(this.metadata.target, entityOrEntities, options);\n  };\n  /**\n   * Records the delete date of one or many given entities.\n   */\n\n\n  Repository.prototype.softRemove = function (entityOrEntities, options) {\n    return this.manager.softRemove(this.metadata.target, entityOrEntities, options);\n  };\n  /**\n   * Recovers one or many given entities.\n   */\n\n\n  Repository.prototype.recover = function (entityOrEntities, options) {\n    return this.manager.recover(this.metadata.target, entityOrEntities, options);\n  };\n  /**\n   * Inserts a given entity into the database.\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient INSERT query.\n   * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n   */\n\n\n  Repository.prototype.insert = function (entity) {\n    return this.manager.insert(this.metadata.target, entity);\n  };\n  /**\n   * Updates entity partially. Entity can be found by a given conditions.\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient UPDATE query.\n   * Does not check if entity exist in the database.\n   */\n\n\n  Repository.prototype.update = function (criteria, partialEntity) {\n    return this.manager.update(this.metadata.target, criteria, partialEntity);\n  };\n  /**\n   * Deletes entities by a given criteria.\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient DELETE query.\n   * Does not check if entity exist in the database.\n   */\n\n\n  Repository.prototype.delete = function (criteria) {\n    return this.manager.delete(this.metadata.target, criteria);\n  };\n  /**\n   * Records the delete date of entities by a given criteria.\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient SOFT-DELETE query.\n   * Does not check if entity exist in the database.\n   */\n\n\n  Repository.prototype.softDelete = function (criteria) {\n    return this.manager.softDelete(this.metadata.target, criteria);\n  };\n  /**\n   * Restores entities by a given criteria.\n   * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n   * Executes fast and efficient SOFT-DELETE query.\n   * Does not check if entity exist in the database.\n   */\n\n\n  Repository.prototype.restore = function (criteria) {\n    return this.manager.restore(this.metadata.target, criteria);\n  };\n  /**\n   * Counts entities that match given find options or conditions.\n   */\n\n\n  Repository.prototype.count = function (optionsOrConditions) {\n    return this.manager.count(this.metadata.target, optionsOrConditions);\n  };\n  /**\n   * Finds entities that match given find options or conditions.\n   */\n\n\n  Repository.prototype.find = function (optionsOrConditions) {\n    return this.manager.find(this.metadata.target, optionsOrConditions);\n  };\n  /**\n   * Finds entities that match given find options or conditions.\n   * Also counts all entities that match given conditions,\n   * but ignores pagination settings (from and take options).\n   */\n\n\n  Repository.prototype.findAndCount = function (optionsOrConditions) {\n    return this.manager.findAndCount(this.metadata.target, optionsOrConditions);\n  };\n  /**\n   * Finds entities by ids.\n   * Optionally find options can be applied.\n   */\n\n\n  Repository.prototype.findByIds = function (ids, optionsOrConditions) {\n    return this.manager.findByIds(this.metadata.target, ids, optionsOrConditions);\n  };\n  /**\n   * Finds first entity that matches given conditions.\n   */\n\n\n  Repository.prototype.findOne = function (optionsOrConditions, maybeOptions) {\n    return this.manager.findOne(this.metadata.target, optionsOrConditions, maybeOptions);\n  };\n  /**\n   * Finds first entity that matches given conditions.\n   */\n\n\n  Repository.prototype.findOneOrFail = function (optionsOrConditions, maybeOptions) {\n    return this.manager.findOneOrFail(this.metadata.target, optionsOrConditions, maybeOptions);\n  };\n  /**\n   * Executes a raw SQL query and returns a raw database results.\n   * Raw query execution is supported only by relational databases (MongoDB is not supported).\n   */\n\n\n  Repository.prototype.query = function (query, parameters) {\n    return this.manager.query(query, parameters);\n  };\n  /**\n   * Clears all the data from the given table/collection (truncates/drops it).\n   *\n   * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n   * @see https://stackoverflow.com/a/5972738/925151\n   */\n\n\n  Repository.prototype.clear = function () {\n    return this.manager.clear(this.metadata.target);\n  };\n  /**\n   * Increments some column by provided value of the entities matched given conditions.\n   */\n\n\n  Repository.prototype.increment = function (conditions, propertyPath, value) {\n    return this.manager.increment(this.metadata.target, conditions, propertyPath, value);\n  };\n  /**\n   * Decrements some column by provided value of the entities matched given conditions.\n   */\n\n\n  Repository.prototype.decrement = function (conditions, propertyPath, value) {\n    return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);\n  };\n\n  return Repository;\n}();\n\nexport { Repository };","map":{"version":3,"sources":["../browser/src/repository/Repository.ts"],"names":[],"mappings":"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","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {FindManyOptions} from \"../find-options/FindManyOptions\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {FindOneOptions} from \"../find-options/FindOneOptions\";\nimport {DeepPartial} from \"../common/DeepPartial\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {FindConditions} from \"../find-options/FindConditions\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport class Repository<Entity extends ObjectLiteral> {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    readonly metadata: EntityMetadata;\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        return this.manager.createQueryBuilder<Entity>(this.metadata.target as any, alias || this.metadata.targetName, queryRunner || this.queryRunner);\n    }\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean {\n        return this.manager.hasId(this.metadata.target, entity);\n    }\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any {\n        return this.manager.getId(this.metadata.target, entity);\n    }\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity;\n\n    /**\n     * Creates new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that are present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity;\n\n    /**\n     * Creates a new entity instance or instances.\n     * Can copy properties from the given object into new entities.\n     */\n    create(plainEntityLikeOrPlainEntityLikes?: DeepPartial<Entity>|DeepPartial<Entity>[]): Entity|Entity[] {\n        return this.manager.create<any>(this.metadata.target as any, plainEntityLikeOrPlainEntityLikes as any);\n    }\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\n        return this.manager.merge(this.metadata.target as any, mergeIntoEntity, ...entityLikes);\n    }\n\n    /**\n     * Creates a new entity from the given plain javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity|undefined> {\n        return this.manager.preload(this.metadata.target as any, entityLike);\n    }\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entities: T[], options: SaveOptions & { reload: false }): Promise<T[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entities: T[], options?: SaveOptions): Promise<(T & Entity)[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entity: T, options: SaveOptions & { reload: false }): Promise<T>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entity: T, options?: SaveOptions): Promise<T & Entity>;\n\n    /**\n     * Saves one or many given entities.\n     */\n    save<T extends DeepPartial<Entity>>(entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return this.manager.save<Entity, T>(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Removes one or many given entities.\n     */\n    remove(entityOrEntities: Entity|Entity[], options?: RemoveOptions): Promise<Entity|Entity[]> {\n        return this.manager.remove(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entities: T[], options: SaveOptions & { reload: false }): Promise<T[]>;\n\n    /**\n     * Records the delete date of all given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entities: T[], options?: SaveOptions): Promise<(T & Entity)[]>;\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entity: T, options: SaveOptions & { reload: false }): Promise<T>;\n\n    /**\n     * Records the delete date of a given entity.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entity: T, options?: SaveOptions): Promise<T & Entity>;\n\n    /**\n     * Records the delete date of one or many given entities.\n     */\n    softRemove<T extends DeepPartial<Entity>>(entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return this.manager.softRemove<Entity, T>(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(entities: T[], options: SaveOptions & { reload: false }): Promise<T[]>;\n\n    /**\n     * Recovers all given entities in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(entities: T[], options?: SaveOptions): Promise<(T & Entity)[]>;\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(entity: T, options: SaveOptions & { reload: false }): Promise<T>;\n\n    /**\n     * Recovers a given entity in the database.\n     */\n    recover<T extends DeepPartial<Entity>>(entity: T, options?: SaveOptions): Promise<T & Entity>;\n\n    /**\n     * Recovers one or many given entities.\n     */\n    recover<T extends DeepPartial<Entity>>(entityOrEntities: T|T[], options?: SaveOptions): Promise<T|T[]> {\n        return this.manager.recover<Entity, T>(this.metadata.target as any, entityOrEntities as any, options);\n    }\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(entity: QueryDeepPartialEntity<Entity>|(QueryDeepPartialEntity<Entity>[])): Promise<InsertResult> {\n        return this.manager.insert(this.metadata.target as any, entity);\n    }\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult> {\n        return this.manager.update(this.metadata.target as any, criteria as any, partialEntity);\n    }\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>): Promise<DeleteResult> {\n        return this.manager.delete(this.metadata.target as any, criteria as any);\n    }\n\n    /**\n     * Records the delete date of entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    softDelete(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>): Promise<UpdateResult> {\n        return this.manager.softDelete(this.metadata.target as any, criteria as any);\n    }\n\n    /**\n     * Restores entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient SOFT-DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    restore(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindConditions<Entity>): Promise<UpdateResult> {\n        return this.manager.restore(this.metadata.target as any, criteria as any);\n    }\n\n    /**\n     * Counts entities that match given options.\n     */\n    count(options?: FindManyOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count(conditions?: FindConditions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given find options or conditions.\n     */\n    count(optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<number> {\n        return this.manager.count(this.metadata.target as any, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given options.\n     */\n    find(options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find(conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     */\n    find(optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<Entity[]> {\n        return this.manager.find(this.metadata.target as any, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(options?: FindManyOptions<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(conditions?: FindConditions<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given find options or conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<[ Entity[], number ]> {\n        return this.manager.findAndCount(this.metadata.target as any, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], options?: FindManyOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds(ids: any[], conditions?: FindConditions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], optionsOrConditions?: FindManyOptions<Entity>|FindConditions<Entity>): Promise<Entity[]> {\n        return this.manager.findByIds(this.metadata.target as any, ids, optionsOrConditions as any);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity|undefined> {\n        return this.manager.findOne(this.metadata.target as any, optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(id?: string|number|Date|ObjectID, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOneOrFail(conditions?: FindConditions<Entity>, options?: FindOneOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOneOrFail(optionsOrConditions?: string|number|Date|ObjectID|FindOneOptions<Entity>|FindConditions<Entity>, maybeOptions?: FindOneOptions<Entity>): Promise<Entity> {\n        return this.manager.findOneOrFail(this.metadata.target as any, optionsOrConditions as any, maybeOptions);\n    }\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        return this.manager.query(query, parameters);\n    }\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void> {\n        return this.manager.clear(this.metadata.target);\n    }\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(conditions: FindConditions<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n        return this.manager.increment(this.metadata.target, conditions, propertyPath, value);\n    }\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(conditions: FindConditions<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n        return this.manager.decrement(this.metadata.target, conditions, propertyPath, value);\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}