{"ast":null,"code":"/**\n * View in the database represented in this class.\n */\nvar View =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function View(options) {\n    if (options) {\n      this.name = options.name;\n      this.expression = options.expression;\n      this.materialized = !!options.materialized;\n    }\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Clones this table to a new table with all properties cloned.\n   */\n\n\n  View.prototype.clone = function () {\n    return new View({\n      name: this.name,\n      expression: this.expression,\n      materialized: this.materialized\n    });\n  }; // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates view from a given entity metadata.\n   */\n\n\n  View.create = function (entityMetadata, driver) {\n    var options = {\n      name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n      expression: entityMetadata.expression,\n      materialized: entityMetadata.tableMetadataArgs.materialized\n    };\n    return new View(options);\n  };\n\n  return View;\n}();\n\nexport { View };","map":{"version":3,"sources":["../browser/src/schema-builder/view/View.ts"],"names":[],"mappings":"AAGA;;AAEG;AACH,IAAA,IAAA;AAAA;AAAA,YAAA;AAuBI;AACA;AACA;AAEA,WAAA,IAAA,CAAY,OAAZ,EAAiC;AAC7B,QAAI,OAAJ,EAAa;AACT,WAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,WAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,WAAK,YAAL,GAAoB,CAAC,CAAC,OAAO,CAAC,YAA9B;AACH;AACJ,GAjCL,CAmCI;AACA;AACA;;AAEA;;AAEG;;;AACH,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACI,WAAO,IAAI,IAAJ,CAAsB;AACzB,MAAA,IAAI,EAAE,KAAK,IADc;AAEzB,MAAA,UAAU,EAAE,KAAK,UAFQ;AAGzB,MAAA,YAAY,EAAE,KAAK;AAHM,KAAtB,CAAP;AAKH,GAND,CA1CJ,CAkDI;AACA;AACA;;AAEA;;AAEG;;;AACI,EAAA,IAAA,CAAA,MAAA,GAAP,UAAc,cAAd,EAA8C,MAA9C,EAA4D;AACxD,QAAM,OAAO,GAAgB;AACzB,MAAA,IAAI,EAAE,MAAM,CAAC,cAAP,CAAsB,cAAc,CAAC,SAArC,EAAgD,cAAc,CAAC,MAA/D,EAAuE,cAAc,CAAC,QAAtF,CADmB;AAEzB,MAAA,UAAU,EAAE,cAAc,CAAC,UAFF;AAGzB,MAAA,YAAY,EAAE,cAAc,CAAC,iBAAf,CAAiC;AAHtB,KAA7B;AAMA,WAAO,IAAI,IAAJ,CAAS,OAAT,CAAP;AACH,GARM;;AAUX,SAAA,IAAA;AAAC,CAnED,EAAA","sourcesContent":["import {Connection, Driver, EntityMetadata, SelectQueryBuilder} from \"../..\";\nimport {ViewOptions} from \"../options/ViewOptions\";\n\n/**\n * View in the database represented in this class.\n */\nexport class View {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Contains database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    name: string;\n\n\n    /**\n     * Indicates if view is materialized.\n     */\n    materialized: boolean;\n\n    /**\n     * View definition.\n     */\n    expression: string | ((connection: Connection) => SelectQueryBuilder<any>);\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: ViewOptions) {\n        if (options) {\n            this.name = options.name;\n            this.expression = options.expression;\n            this.materialized = !!options.materialized;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): View {\n        return new View(<ViewOptions>{\n            name: this.name,\n            expression: this.expression,\n            materialized: this.materialized,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates view from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): View {\n        const options: ViewOptions = {\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            expression: entityMetadata.expression!,\n            materialized: entityMetadata.tableMetadataArgs.materialized\n        };\n\n        return new View(options);\n    }\n\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}