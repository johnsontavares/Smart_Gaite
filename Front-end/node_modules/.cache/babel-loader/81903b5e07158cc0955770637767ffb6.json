{"ast":null,"code":"import { __awaiter, __generator, __read } from \"tslib\";\n/**\n */\n\nvar LoadMapItem =\n/** @class */\nfunction () {\n  function LoadMapItem(plainEntity, metadata, parentLoadMapItem, relation) {\n    this.plainEntity = plainEntity;\n    this.metadata = metadata;\n    this.parentLoadMapItem = parentLoadMapItem;\n    this.relation = relation;\n  }\n\n  Object.defineProperty(LoadMapItem.prototype, \"target\", {\n    get: function () {\n      return this.metadata.target;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(LoadMapItem.prototype, \"id\", {\n    get: function () {\n      return this.metadata.getEntityIdMixedMap(this.plainEntity);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return LoadMapItem;\n}();\n\nvar LoadMap =\n/** @class */\nfunction () {\n  function LoadMap() {\n    this.loadMapItems = [];\n  }\n\n  Object.defineProperty(LoadMap.prototype, \"mainLoadMapItem\", {\n    get: function () {\n      return this.loadMapItems.find(function (item) {\n        return !item.relation && !item.parentLoadMapItem;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  LoadMap.prototype.addLoadMap = function (newLoadMap) {\n    var item = this.loadMapItems.find(function (item) {\n      return item.target === newLoadMap.target && item.id === newLoadMap.id;\n    });\n    if (!item) this.loadMapItems.push(newLoadMap);\n  };\n\n  LoadMap.prototype.fillEntities = function (target, entities) {\n    var _this = this;\n\n    entities.forEach(function (entity) {\n      var item = _this.loadMapItems.find(function (loadMapItem) {\n        return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);\n      });\n\n      if (item) item.entity = entity;\n    });\n  };\n\n  LoadMap.prototype.groupByTargetIds = function () {\n    var groups = [];\n    this.loadMapItems.forEach(function (loadMapItem) {\n      var group = groups.find(function (group) {\n        return group.target === loadMapItem.target;\n      });\n\n      if (!group) {\n        group = {\n          target: loadMapItem.target,\n          ids: []\n        };\n        groups.push(group);\n      }\n\n      group.ids.push(loadMapItem.id);\n    });\n    return groups;\n  };\n\n  return LoadMap;\n}();\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\n\n\nvar PlainObjectToDatabaseEntityTransformer =\n/** @class */\nfunction () {\n  function PlainObjectToDatabaseEntityTransformer(manager) {\n    this.manager = manager;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n\n  PlainObjectToDatabaseEntityTransformer.prototype.transform = function (plainObject, metadata) {\n    return __awaiter(this, void 0, void 0, function () {\n      var loadMap, fillLoadMap;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            // if plain object does not have id then nothing to load really\n            if (!metadata.hasAllPrimaryKeys(plainObject)) return [2\n            /*return*/\n            , Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\")];\n            loadMap = new LoadMap();\n\n            fillLoadMap = function (entity, entityMetadata, parentLoadMapItem, relation) {\n              var item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n              loadMap.addLoadMap(item);\n              entityMetadata.extractRelationValuesFromEntity(entity, metadata.relations).filter(function (value) {\n                return value !== null && value !== undefined;\n              }).forEach(function (_a) {\n                var _b = __read(_a, 3),\n                    relation = _b[0],\n                    value = _b[1],\n                    inverseEntityMetadata = _b[2];\n\n                return fillLoadMap(value, inverseEntityMetadata, item, relation);\n              });\n            };\n\n            fillLoadMap(plainObject, metadata); // load all entities and store them in the load map\n\n            return [4\n            /*yield*/\n            , Promise.all(loadMap.groupByTargetIds().map(function (targetWithIds) {\n              return _this.manager.findByIds(targetWithIds.target, targetWithIds.ids).then(function (entities) {\n                return loadMap.fillEntities(targetWithIds.target, entities);\n              });\n            }))];\n\n          case 1:\n            // load all entities and store them in the load map\n            _a.sent(); // go through each item in the load map and set their entity relationship using metadata stored in load map\n\n\n            loadMap.loadMapItems.forEach(function (loadMapItem) {\n              if (!loadMapItem.relation || !loadMapItem.entity || !loadMapItem.parentLoadMapItem || !loadMapItem.parentLoadMapItem.entity) return;\n\n              if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName]) loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n              } else {\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n              }\n            });\n            return [2\n            /*return*/\n            , loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined];\n        }\n      });\n    });\n  };\n\n  return PlainObjectToDatabaseEntityTransformer;\n}();\n\nexport { PlainObjectToDatabaseEntityTransformer };","map":{"version":3,"sources":["../browser/src/query-builder/transformer/PlainObjectToDatabaseEntityTransformer.ts"],"names":[],"mappings":"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","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {EntityManager} from \"../../entity-manager/EntityManager\";\nimport {RelationMetadata} from \"../../metadata/RelationMetadata\";\n\n/**\n */\nclass LoadMapItem {\n\n    entity?: ObjectLiteral;\n    plainEntity: ObjectLiteral;\n    metadata: EntityMetadata;\n    parentLoadMapItem?: LoadMapItem;\n    relation?: RelationMetadata;\n\n    constructor(plainEntity: ObjectLiteral,\n                metadata: EntityMetadata,\n                parentLoadMapItem?: LoadMapItem,\n                relation?: RelationMetadata) {\n        this.plainEntity = plainEntity;\n        this.metadata = metadata;\n        this.parentLoadMapItem = parentLoadMapItem;\n        this.relation = relation;\n    }\n\n    get target(): Function|string {\n        return this.metadata.target;\n    }\n\n    get id(): any {\n        return this.metadata.getEntityIdMixedMap(this.plainEntity);\n    }\n\n}\n\nclass LoadMap {\n\n    loadMapItems: LoadMapItem[] = [];\n\n    get mainLoadMapItem(): LoadMapItem|undefined {\n        return this.loadMapItems.find(item => !item.relation && !item.parentLoadMapItem);\n    }\n\n    addLoadMap(newLoadMap: LoadMapItem) {\n        const item = this.loadMapItems.find(item => item.target === newLoadMap.target && item.id === newLoadMap.id);\n        if (!item)\n            this.loadMapItems.push(newLoadMap);\n    }\n\n    fillEntities(target: Function|string, entities: any[]) {\n        entities.forEach(entity => {\n            const item = this.loadMapItems.find(loadMapItem => {\n                return loadMapItem.target === target && loadMapItem.metadata.compareEntities(entity, loadMapItem.plainEntity);\n            });\n            if (item)\n                item.entity = entity;\n        });\n    }\n\n    groupByTargetIds(): { target: Function|string, ids: any[] }[] {\n        const groups: { target: Function|string, ids: any[] }[] = [];\n        this.loadMapItems.forEach(loadMapItem => {\n            let group = groups.find(group => group.target === loadMapItem.target);\n            if (!group) {\n                group = { target: loadMapItem.target, ids: [] };\n                groups.push(group);\n            }\n\n            group.ids.push(loadMapItem.id);\n        });\n        return groups;\n    }\n\n}\n\n/**\n * Transforms plain old javascript object\n * Entity is constructed based on its entity metadata.\n */\nexport class PlainObjectToDatabaseEntityTransformer {\n\n    constructor(private manager: EntityManager) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    async transform(plainObject: ObjectLiteral, metadata: EntityMetadata): Promise<ObjectLiteral|undefined> {\n\n        // if plain object does not have id then nothing to load really\n        if (!metadata.hasAllPrimaryKeys(plainObject))\n            return Promise.reject(\"Given object does not have a primary column, cannot transform it to database entity.\");\n\n        // create a special load map that will hold all metadata that will be used to operate with entities easily\n        const loadMap = new LoadMap();\n        const fillLoadMap = (entity: ObjectLiteral, entityMetadata: EntityMetadata, parentLoadMapItem?: LoadMapItem, relation?: RelationMetadata) => {\n            const item = new LoadMapItem(entity, entityMetadata, parentLoadMapItem, relation);\n            loadMap.addLoadMap(item);\n\n            entityMetadata\n                .extractRelationValuesFromEntity(entity, metadata.relations)\n                .filter(value => value !== null && value !== undefined)\n                .forEach(([relation, value, inverseEntityMetadata]) => fillLoadMap(value, inverseEntityMetadata, item, relation));\n        };\n        fillLoadMap(plainObject, metadata);\n        // load all entities and store them in the load map\n        await Promise.all(loadMap.groupByTargetIds().map(targetWithIds => { // todo: fix type hinting\n            return this.manager\n                .findByIds<ObjectLiteral>(targetWithIds.target as any, targetWithIds.ids)\n                .then(entities => loadMap.fillEntities(targetWithIds.target, entities));\n        }));\n\n        // go through each item in the load map and set their entity relationship using metadata stored in load map\n        loadMap.loadMapItems.forEach(loadMapItem => {\n            if (!loadMapItem.relation ||\n                !loadMapItem.entity ||\n                !loadMapItem.parentLoadMapItem ||\n                !loadMapItem.parentLoadMapItem.entity)\n                return;\n\n            if (loadMapItem.relation.isManyToMany || loadMapItem.relation.isOneToMany) {\n                if (!loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName])\n                    loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = [];\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName].push(loadMapItem.entity);\n\n            } else {\n                loadMapItem.parentLoadMapItem.entity[loadMapItem.relation.propertyName] = loadMapItem.entity;\n            }\n        });\n\n        return loadMap.mainLoadMapItem ? loadMap.mainLoadMapItem.entity : undefined;\n    }\n\n}"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}