{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { RandomGenerator } from \"../util/RandomGenerator\";\nimport { camelCase, snakeCase, titleCase } from \"../util/StringUtils\";\nimport { Table } from \"../schema-builder/table/Table\";\n/**\n * Naming strategy that is used by default.\n */\n\nvar DefaultNamingStrategy =\n/** @class */\nfunction () {\n  function DefaultNamingStrategy() {\n    this.nestedSetColumnNames = {\n      left: \"nsleft\",\n      right: \"nsright\"\n    };\n    this.materializedPathColumnName = \"mpath\";\n  }\n  /**\n   * Normalizes table name.\n   *\n   * @param targetName Name of the target entity that can be used to generate a table name.\n   * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n   */\n\n\n  DefaultNamingStrategy.prototype.tableName = function (targetName, userSpecifiedName) {\n    return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n  };\n  /**\n   * Creates a table name for a junction table of a closure table.\n   *\n   * @param originalClosureTableName Name of the closure table which owns this junction table.\n   */\n\n\n  DefaultNamingStrategy.prototype.closureJunctionTableName = function (originalClosureTableName) {\n    return originalClosureTableName + \"_closure\";\n  };\n\n  DefaultNamingStrategy.prototype.columnName = function (propertyName, customName, embeddedPrefixes) {\n    var name = customName || propertyName;\n    if (embeddedPrefixes.length) return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name);\n    return name;\n  };\n\n  DefaultNamingStrategy.prototype.relationName = function (propertyName) {\n    return propertyName;\n  };\n\n  DefaultNamingStrategy.prototype.primaryKeyName = function (tableOrName, columnNames) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    var clonedColumnNames = __spreadArray([], __read(columnNames));\n\n    clonedColumnNames.sort();\n    var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n    var replacedTableName = tableName.replace(\".\", \"_\");\n    var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n    return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27);\n  };\n\n  DefaultNamingStrategy.prototype.uniqueConstraintName = function (tableOrName, columnNames) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    var clonedColumnNames = __spreadArray([], __read(columnNames));\n\n    clonedColumnNames.sort();\n    var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n    var replacedTableName = tableName.replace(\".\", \"_\");\n    var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n    return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27);\n  };\n\n  DefaultNamingStrategy.prototype.relationConstraintName = function (tableOrName, columnNames, where) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    var clonedColumnNames = __spreadArray([], __read(columnNames));\n\n    clonedColumnNames.sort();\n    var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n    var replacedTableName = tableName.replace(\".\", \"_\");\n    var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n    if (where) key += \"_\" + where;\n    return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26);\n  };\n\n  DefaultNamingStrategy.prototype.defaultConstraintName = function (tableOrName, columnName) {\n    var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n    var replacedTableName = tableName.replace(\".\", \"_\");\n    var key = replacedTableName + \"_\" + columnName;\n    return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27);\n  };\n\n  DefaultNamingStrategy.prototype.foreignKeyName = function (tableOrName, columnNames, _referencedTablePath, _referencedColumnNames) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    var clonedColumnNames = __spreadArray([], __read(columnNames));\n\n    clonedColumnNames.sort();\n    var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n    var replacedTableName = tableName.replace(\".\", \"_\");\n    var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n    return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27);\n  };\n\n  DefaultNamingStrategy.prototype.indexName = function (tableOrName, columnNames, where) {\n    // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n    var clonedColumnNames = __spreadArray([], __read(columnNames));\n\n    clonedColumnNames.sort();\n    var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n    var replacedTableName = tableName.replace(\".\", \"_\");\n    var key = replacedTableName + \"_\" + clonedColumnNames.join(\"_\");\n    if (where) key += \"_\" + where;\n    return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26);\n  };\n\n  DefaultNamingStrategy.prototype.checkConstraintName = function (tableOrName, expression, isEnum) {\n    var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n    var replacedTableName = tableName.replace(\".\", \"_\");\n    var key = replacedTableName + \"_\" + expression;\n    var name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26);\n    return isEnum ? name + \"_ENUM\" : name;\n  };\n\n  DefaultNamingStrategy.prototype.exclusionConstraintName = function (tableOrName, expression) {\n    var tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n    var replacedTableName = tableName.replace(\".\", \"_\");\n    var key = replacedTableName + \"_\" + expression;\n    return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26);\n  };\n\n  DefaultNamingStrategy.prototype.joinColumnName = function (relationName, referencedColumnName) {\n    return camelCase(relationName + \"_\" + referencedColumnName);\n  };\n\n  DefaultNamingStrategy.prototype.joinTableName = function (firstTableName, secondTableName, firstPropertyName, secondPropertyName) {\n    return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\n  };\n\n  DefaultNamingStrategy.prototype.joinTableColumnDuplicationPrefix = function (columnName, index) {\n    return columnName + \"_\" + index;\n  };\n\n  DefaultNamingStrategy.prototype.joinTableColumnName = function (tableName, propertyName, columnName) {\n    return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n  };\n\n  DefaultNamingStrategy.prototype.joinTableInverseColumnName = function (tableName, propertyName, columnName) {\n    return this.joinTableColumnName(tableName, propertyName, columnName);\n  };\n  /**\n   * Adds globally set prefix to the table name.\n   * This method is executed no matter if prefix was set or not.\n   * Table name is either user's given table name, either name generated from entity target.\n   * Note that table name comes here already normalized by #tableName method.\n   */\n\n\n  DefaultNamingStrategy.prototype.prefixTableName = function (prefix, tableName) {\n    return prefix + tableName;\n  };\n\n  DefaultNamingStrategy.prototype.eagerJoinRelationAlias = function (alias, propertyPath) {\n    return alias + \"_\" + propertyPath.replace(\".\", \"_\");\n  };\n\n  return DefaultNamingStrategy;\n}();\n\nexport { DefaultNamingStrategy };","map":{"version":3,"sources":["../browser/src/naming-strategy/DefaultNamingStrategy.ts"],"names":[],"mappings":"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","sourcesContent":["import {NamingStrategyInterface} from \"./NamingStrategyInterface\";\nimport {RandomGenerator} from \"../util/RandomGenerator\";\nimport {camelCase, snakeCase, titleCase} from \"../util/StringUtils\";\nimport {Table} from \"../schema-builder/table/Table\";\n\n/**\n * Naming strategy that is used by default.\n */\nexport class DefaultNamingStrategy implements NamingStrategyInterface {\n\n    /**\n     * Normalizes table name.\n     *\n     * @param targetName Name of the target entity that can be used to generate a table name.\n     * @param userSpecifiedName For example if user specified a table name in a decorator, e.g. @Entity(\"name\")\n     */\n    tableName(targetName: string, userSpecifiedName: string|undefined): string {\n        return userSpecifiedName ? userSpecifiedName : snakeCase(targetName);\n    }\n\n    /**\n     * Creates a table name for a junction table of a closure table.\n     *\n     * @param originalClosureTableName Name of the closure table which owns this junction table.\n     */\n    closureJunctionTableName(originalClosureTableName: string): string {\n        return originalClosureTableName + \"_closure\";\n    }\n\n    columnName(propertyName: string, customName: string, embeddedPrefixes: string[]): string {\n        const name = customName || propertyName;\n\n        if (embeddedPrefixes.length)\n            return camelCase(embeddedPrefixes.join(\"_\")) + titleCase(name);\n\n        return name;\n    }\n\n    relationName(propertyName: string): string {\n        return propertyName;\n    }\n\n    primaryKeyName(tableOrName: Table|string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"PK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    uniqueConstraintName(tableOrName: Table|string, columnNames: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"UQ_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    relationConstraintName(tableOrName: Table|string, columnNames: string[], where?: string): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n\n        return \"REL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    defaultConstraintName(tableOrName: Table|string, columnName: string): string {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${columnName}`;\n        return \"DF_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    foreignKeyName(tableOrName: Table|string, columnNames: string[], _referencedTablePath?: string, _referencedColumnNames?: string[]): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        return \"FK_\" + RandomGenerator.sha1(key).substr(0, 27);\n    }\n\n    indexName(tableOrName: Table|string, columnNames: string[], where?: string): string {\n        // sort incoming column names to avoid issue when [\"id\", \"name\"] and [\"name\", \"id\"] arrays\n        const clonedColumnNames = [...columnNames];\n        clonedColumnNames.sort();\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        let key = `${replacedTableName}_${clonedColumnNames.join(\"_\")}`;\n        if (where)\n            key += `_${where}`;\n\n        return \"IDX_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    checkConstraintName(tableOrName: Table|string, expression: string, isEnum?: boolean): string {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        const name = \"CHK_\" + RandomGenerator.sha1(key).substr(0, 26);\n        return isEnum ? `${name}_ENUM` : name;\n    }\n\n    exclusionConstraintName(tableOrName: Table|string, expression: string): string {\n        const tableName = tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const replacedTableName = tableName.replace(\".\", \"_\");\n        const key = `${replacedTableName}_${expression}`;\n        return \"XCL_\" + RandomGenerator.sha1(key).substr(0, 26);\n    }\n\n    joinColumnName(relationName: string, referencedColumnName: string): string {\n        return camelCase(relationName + \"_\" + referencedColumnName);\n    }\n\n    joinTableName(firstTableName: string,\n                  secondTableName: string,\n                  firstPropertyName: string,\n                  secondPropertyName: string): string {\n        return snakeCase(firstTableName + \"_\" + firstPropertyName.replace(/\\./gi, \"_\") + \"_\" + secondTableName);\n    }\n\n    joinTableColumnDuplicationPrefix(columnName: string, index: number): string {\n        return columnName + \"_\" + index;\n    }\n\n    joinTableColumnName(tableName: string, propertyName: string, columnName?: string): string {\n        return camelCase(tableName + \"_\" + (columnName ? columnName : propertyName));\n    }\n\n    joinTableInverseColumnName(tableName: string, propertyName: string, columnName?: string): string {\n        return this.joinTableColumnName(tableName, propertyName, columnName);\n    }\n\n    /**\n     * Adds globally set prefix to the table name.\n     * This method is executed no matter if prefix was set or not.\n     * Table name is either user's given table name, either name generated from entity target.\n     * Note that table name comes here already normalized by #tableName method.\n     */\n    prefixTableName(prefix: string, tableName: string): string {\n        return prefix + tableName;\n    }\n\n    eagerJoinRelationAlias(alias: string, propertyPath: string): string {\n        return alias + \"_\" + propertyPath.replace(\".\", \"_\");\n    }\n\n    nestedSetColumnNames = { left: \"nsleft\", right: \"nsright\" };\n    materializedPathColumnName = \"mpath\";\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}