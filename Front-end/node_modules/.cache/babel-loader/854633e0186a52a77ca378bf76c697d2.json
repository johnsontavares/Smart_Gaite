{"ast":null,"code":"import { __extends } from \"tslib\";\n/**\n * Thrown when ORM cannot get method parameter's type.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\n\nvar CannotReflectMethodParameterTypeError =\n/** @class */\nfunction (_super) {\n  __extends(CannotReflectMethodParameterTypeError, _super);\n\n  function CannotReflectMethodParameterTypeError(target, methodName) {\n    var _this = _super.call(this) || this;\n\n    _this.name = \"CannotReflectMethodParameterTypeError\";\n    Object.setPrototypeOf(_this, CannotReflectMethodParameterTypeError.prototype);\n    _this.message = \"Cannot get reflected type for a \\\"\" + methodName + \"\\\" method's parameter of \\\"\" + target.name + \"\\\" class. \" + \"Make sure you have turned on an \\\"emitDecoratorMetadata\\\": true option in tsconfig.json. \" + \"Also make sure you have imported \\\"reflect-metadata\\\" on top of the main entry file in your application.\";\n    return _this;\n  }\n\n  return CannotReflectMethodParameterTypeError;\n}(Error);\n\nexport { CannotReflectMethodParameterTypeError };","map":{"version":3,"sources":["../browser/src/error/CannotReflectMethodParameterTypeError.ts"],"names":[],"mappings":";AAAA;;;AAGG;;AACH,IAAA,qCAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA2D,EAAA,SAAA,CAAA,qCAAA,EAAA,MAAA,CAAA;;AAGvD,WAAA,qCAAA,CAAY,MAAZ,EAA8B,UAA9B,EAAgD;AAAhD,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAFA,IAAA,KAAA,CAAA,IAAA,GAAO,uCAAP;AAII,IAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA4B,qCAAqC,CAAC,SAAlE;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,uCAAoC,UAApC,GAA8C,6BAA9C,GAA0E,MAAM,CAAC,IAAjF,GAAqF,YAArF,GACX,2FADW,GAEX,0GAFJ;;AAGH;;AAEL,SAAA,qCAAA;AAAC,CAXD,CAA2D,KAA3D,CAAA","sourcesContent":["/**\n * Thrown when ORM cannot get method parameter's type.\n * Basically, when reflect-metadata is not available or tsconfig is not properly setup.\n */\nexport class CannotReflectMethodParameterTypeError extends Error {\n    name = \"CannotReflectMethodParameterTypeError\";\n\n    constructor(target: Function, methodName: string) {\n        super();\n        Object.setPrototypeOf(this, CannotReflectMethodParameterTypeError.prototype);\n        this.message = `Cannot get reflected type for a \"${methodName}\" method's parameter of \"${target.name}\" class. ` +\n            `Make sure you have turned on an \"emitDecoratorMetadata\": true option in tsconfig.json. ` +\n            `Also make sure you have imported \"reflect-metadata\" on top of the main entry file in your application.`;\n    }\n\n}"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}