{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../\";\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\n\nexport function JoinTable(options) {\n  return function (object, propertyName) {\n    options = options || {};\n    getMetadataArgsStorage().joinTables.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      name: options.name,\n      joinColumns: options && options.joinColumn ? [options.joinColumn] : options.joinColumns,\n      inverseJoinColumns: options && options.inverseJoinColumn ? [options.inverseJoinColumn] : options.inverseJoinColumns,\n      schema: options && options.schema ? options.schema : undefined,\n      database: options && options.database ? options.database : undefined\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/relations/JoinTable.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAR,QAAuD,QAAvD;AAsBA;;;AAGG;;AACH,OAAM,SAAU,SAAV,CAAoB,OAApB,EAA8E;AAChF,SAAO,UAAU,MAAV,EAA0B,YAA1B,EAA8C;AACjD,IAAA,OAAO,GAAG,OAAO,IAAI,EAArB;AACA,IAAA,sBAAsB,GAAG,UAAzB,CAAoC,IAApC,CAAyC;AACrC,MAAA,MAAM,EAAE,MAAM,CAAC,WADsB;AAErC,MAAA,YAAY,EAAE,YAFuB;AAGrC,MAAA,IAAI,EAAE,OAAO,CAAC,IAHuB;AAIrC,MAAA,WAAW,EAAG,OAAO,IAAK,OAA4B,CAAC,UAAzC,GAAsD,CAAE,OAA4B,CAAC,UAA/B,CAAtD,GAAqG,OAA2C,CAAC,WAJ1H;AAKrC,MAAA,kBAAkB,EAAG,OAAO,IAAK,OAA4B,CAAC,iBAAzC,GAA6D,CAAE,OAA4B,CAAC,iBAA/B,CAA7D,GAAmH,OAA2C,CAAC,kBAL/I;AAMrC,MAAA,MAAM,EAAE,OAAO,IAAI,OAAO,CAAC,MAAnB,GAA4B,OAAO,CAAC,MAApC,GAA6C,SANhB;AAOrC,MAAA,QAAQ,EAAE,OAAO,IAAI,OAAO,CAAC,QAAnB,GAA8B,OAAO,CAAC,QAAtC,GAAiD;AAPtB,KAAzC;AASH,GAXD;AAYH","sourcesContent":["import {getMetadataArgsStorage, JoinTableOptions} from \"../../\";\nimport {JoinTableMetadataArgs} from \"../../metadata-args/JoinTableMetadataArgs\";\nimport {JoinTableMultipleColumnsOptions} from \"../options/JoinTableMultipleColumnsOptions\";\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(): PropertyDecorator;\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options: JoinTableOptions): PropertyDecorator;\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options: JoinTableMultipleColumnsOptions): PropertyDecorator;\n\n/**\n * JoinTable decorator is used in many-to-many relationship to specify owner side of relationship.\n * Its also used to set a custom junction table's name, column names and referenced columns.\n */\nexport function JoinTable(options?: JoinTableOptions|JoinTableMultipleColumnsOptions): PropertyDecorator {\n    return function (object: Object, propertyName: string) {\n        options = options || {} as JoinTableOptions|JoinTableMultipleColumnsOptions;\n        getMetadataArgsStorage().joinTables.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            name: options.name,\n            joinColumns: (options && (options as JoinTableOptions).joinColumn ? [(options as JoinTableOptions).joinColumn!] : (options as JoinTableMultipleColumnsOptions).joinColumns) as any,\n            inverseJoinColumns: (options && (options as JoinTableOptions).inverseJoinColumn ? [(options as JoinTableOptions).inverseJoinColumn!] : (options as JoinTableMultipleColumnsOptions).inverseJoinColumns) as any,\n            schema: options && options.schema ? options.schema : undefined,\n            database: options && options.database ? options.database : undefined,\n        } as JoinTableMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}