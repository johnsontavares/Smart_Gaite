{"ast":null,"code":"import debug from \"debug\";\nimport { PlatformTools } from \"../platform/PlatformTools\";\n/**\n * Performs logging of the events in TypeORM via debug library.\n */\n\nvar DebugLogger =\n/** @class */\nfunction () {\n  function DebugLogger() {\n    this.debugQueryLog = debug(\"typeorm:query:log\");\n    this.debugQueryError = debug(\"typeorm:query:error\");\n    this.debugQuerySlow = debug(\"typeorm:query:slow\");\n    this.debugSchemaBuild = debug(\"typeorm:schema\");\n    this.debugMigration = debug(\"typeorm:migration\");\n    this.debugLog = debug(\"typeorm:log\");\n    this.debugInfo = debug(\"typeorm:info\");\n    this.debugWarn = debug(\"typeorm:warn\");\n  }\n  /**\n   * Logs query and parameters used in it.\n   */\n\n\n  DebugLogger.prototype.logQuery = function (query, parameters, queryRunner) {\n    if (this.debugQueryLog.enabled) {\n      this.debugQueryLog(PlatformTools.highlightSql(query) + \";\");\n\n      if (parameters && parameters.length) {\n        this.debugQueryLog(\"parameters:\", parameters);\n      }\n    }\n  };\n  /**\n   * Logs query that failed.\n   */\n\n\n  DebugLogger.prototype.logQueryError = function (error, query, parameters, queryRunner) {\n    if (this.debugQueryError.enabled) {\n      this.debugQueryError(PlatformTools.highlightSql(query) + \";\");\n\n      if (parameters && parameters.length) {\n        this.debugQueryError(\"parameters:\", parameters);\n      }\n\n      this.debugQueryError(\"error: \", error);\n    }\n  };\n  /**\n   * Logs query that is slow.\n   */\n\n\n  DebugLogger.prototype.logQuerySlow = function (time, query, parameters, queryRunner) {\n    if (this.debugQuerySlow.enabled) {\n      this.debugQuerySlow(PlatformTools.highlightSql(query) + \";\");\n\n      if (parameters && parameters.length) {\n        this.debugQuerySlow(\"parameters:\", parameters);\n      }\n\n      this.debugQuerySlow(\"execution time:\", time);\n    }\n  };\n  /**\n   * Logs events from the schema build process.\n   */\n\n\n  DebugLogger.prototype.logSchemaBuild = function (message, queryRunner) {\n    if (this.debugSchemaBuild.enabled) {\n      this.debugSchemaBuild(message);\n    }\n  };\n  /**\n   * Logs events from the migration run process.\n   */\n\n\n  DebugLogger.prototype.logMigration = function (message, queryRunner) {\n    if (this.debugMigration.enabled) {\n      this.debugMigration(message);\n    }\n  };\n  /**\n   * Perform logging using given logger.\n   * Log has its own level and message.\n   */\n\n\n  DebugLogger.prototype.log = function (level, message, queryRunner) {\n    switch (level) {\n      case \"log\":\n        if (this.debugLog.enabled) {\n          this.debugLog(message);\n        }\n\n        break;\n\n      case \"info\":\n        if (this.debugInfo.enabled) {\n          this.debugInfo(message);\n        }\n\n        break;\n\n      case \"warn\":\n        if (this.debugWarn.enabled) {\n          this.debugWarn(message);\n        }\n\n        break;\n    }\n  };\n\n  return DebugLogger;\n}();\n\nexport { DebugLogger };","map":{"version":3,"sources":["../browser/src/logger/DebugLogger.ts"],"names":[],"mappings":"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","sourcesContent":["import debug from \"debug\";\nimport {Logger} from \"./Logger\";\nimport {QueryRunner} from \"../\";\nimport {PlatformTools} from \"../platform/PlatformTools\";\n\n/**\n * Performs logging of the events in TypeORM via debug library.\n */\nexport class DebugLogger implements Logger {\n    private debugQueryLog = debug(\"typeorm:query:log\");\n    private debugQueryError = debug(\"typeorm:query:error\");\n    private debugQuerySlow = debug(\"typeorm:query:slow\");\n    private debugSchemaBuild = debug(\"typeorm:schema\");\n    private debugMigration = debug(\"typeorm:migration\");\n\n    private debugLog = debug(\"typeorm:log\");\n    private debugInfo = debug(\"typeorm:info\");\n    private debugWarn = debug(\"typeorm:warn\");\n\n    /**\n     * Logs query and parameters used in it.\n     */\n    logQuery(query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQueryLog.enabled) {\n            this.debugQueryLog(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQueryLog(\"parameters:\", parameters);\n            }\n        }\n    }\n\n    /**\n     * Logs query that failed.\n     */\n    logQueryError(error: string, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQueryError.enabled) {\n            this.debugQueryError(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQueryError(\"parameters:\", parameters);\n            }\n            this.debugQueryError(\"error: \", error);\n        }\n    }\n\n    /**\n     * Logs query that is slow.\n     */\n    logQuerySlow(time: number, query: string, parameters?: any[], queryRunner?: QueryRunner) {\n        if (this.debugQuerySlow.enabled) {\n            this.debugQuerySlow(PlatformTools.highlightSql(query) + \";\");\n            if (parameters && parameters.length) {\n                this.debugQuerySlow(\"parameters:\", parameters);\n            }\n            this.debugQuerySlow(\"execution time:\", time);\n        }\n    }\n\n    /**\n     * Logs events from the schema build process.\n     */\n    logSchemaBuild(message: string, queryRunner?: QueryRunner) {\n        if (this.debugSchemaBuild.enabled) {\n            this.debugSchemaBuild(message);\n        }\n    }\n\n    /**\n     * Logs events from the migration run process.\n     */\n    logMigration(message: string, queryRunner?: QueryRunner) {\n        if (this.debugMigration.enabled) {\n            this.debugMigration(message);\n        }\n    }\n\n    /**\n     * Perform logging using given logger.\n     * Log has its own level and message.\n     */\n    log(level: \"log\" | \"info\" | \"warn\", message: any, queryRunner?: QueryRunner) {\n        switch (level) {\n            case \"log\":\n                if (this.debugLog.enabled) {\n                    this.debugLog(message);\n                }\n                break;\n            case \"info\":\n                if (this.debugInfo.enabled) {\n                    this.debugInfo(message);\n                }\n                break;\n            case \"warn\":\n                if (this.debugWarn.enabled) {\n                    this.debugWarn(message);\n                }\n                break;\n        }\n    }\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}