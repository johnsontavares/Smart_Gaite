{"ast":null,"code":"/**\n * This metadata contains all information about entity's listeners.\n */\nvar EntityListenerMetadata =\n/** @class */\nfunction () {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  function EntityListenerMetadata(options) {\n    this.entityMetadata = options.entityMetadata;\n    this.embeddedMetadata = options.embeddedMetadata;\n    this.target = options.args.target;\n    this.propertyName = options.args.propertyName;\n    this.type = options.args.type;\n  } // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Checks if entity listener is allowed to be executed on the given entity.\n   */\n\n\n  EntityListenerMetadata.prototype.isAllowed = function (entity) {\n    return this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n    this.entityMetadata.target instanceof Function && entity.constructor.prototype instanceof this.entityMetadata.target; // todo: also need to implement entity schema inheritance\n  };\n  /**\n   * Executes listener method of the given entity.\n   */\n\n\n  EntityListenerMetadata.prototype.execute = function (entity) {\n    if (!this.embeddedMetadata) return entity[this.propertyName]();\n    this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\n  }; // ---------------------------------------------------------------------\n  // Protected Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Calls embedded entity listener method no matter how nested it is.\n   */\n\n\n  EntityListenerMetadata.prototype.callEntityEmbeddedMethod = function (entity, propertyPaths) {\n    var _this = this;\n\n    var propertyPath = propertyPaths.shift();\n    if (!propertyPath || !entity[propertyPath]) return;\n\n    if (propertyPaths.length === 0) {\n      if (entity[propertyPath] instanceof Array) {\n        entity[propertyPath].map(function (embedded) {\n          return embedded[_this.propertyName]();\n        });\n      } else {\n        entity[propertyPath][this.propertyName]();\n      }\n    } else {\n      if (entity[propertyPath]) this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\n    }\n  };\n\n  return EntityListenerMetadata;\n}();\n\nexport { EntityListenerMetadata };","map":{"version":3,"sources":["../browser/src/metadata/EntityListenerMetadata.ts"],"names":[],"mappings":"AAMA;;AAEG;AACH,IAAA,sBAAA;AAAA;AAAA,YAAA;AAgCI;AACA;AACA;AAEA,WAAA,sBAAA,CAAY,OAAZ,EAA8H;AAC1H,SAAK,cAAL,GAAsB,OAAO,CAAC,cAA9B;AACA,SAAK,gBAAL,GAAwB,OAAO,CAAC,gBAAhC;AACA,SAAK,MAAL,GAAc,OAAO,CAAC,IAAR,CAAa,MAA3B;AACA,SAAK,YAAL,GAAoB,OAAO,CAAC,IAAR,CAAa,YAAjC;AACA,SAAK,IAAL,GAAY,OAAO,CAAC,IAAR,CAAa,IAAzB;AACH,GA1CL,CA4CI;AACA;AACA;;AAEA;;AAEG;;;AACH,EAAA,sBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,MAAV,EAA+B;AAC3B,WAAO,KAAK,cAAL,CAAoB,MAApB,KAA+B,MAAM,CAAC,WAAtC,IAAqD;AACvD,SAAK,cAAL,CAAoB,MAApB,YAAsC,QAAtC,IAAkD,MAAM,CAAC,WAAP,CAAmB,SAAnB,YAAwC,KAAK,cAAL,CAAoB,MADnH,CAD2B,CAEiG;AAC/H,GAHD;AAKA;;AAEG;;;AACH,EAAA,sBAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,MAAR,EAA6B;AACzB,QAAI,CAAC,KAAK,gBAAV,EACI,OAAO,MAAM,CAAC,KAAK,YAAN,CAAN,EAAP;AAEJ,SAAK,wBAAL,CAA8B,MAA9B,EAAsC,KAAK,gBAAL,CAAsB,YAAtB,CAAmC,KAAnC,CAAyC,GAAzC,CAAtC;AACH,GALD,CA3DJ,CAkEI;AACA;AACA;;AAEA;;AAEG;;;AACO,EAAA,sBAAA,CAAA,SAAA,CAAA,wBAAA,GAAV,UAAmC,MAAnC,EAA0D,aAA1D,EAAiF;AAAjF,QAAA,KAAA,GAAA,IAAA;;AACI,QAAM,YAAY,GAAG,aAAa,CAAC,KAAd,EAArB;AACA,QAAI,CAAC,YAAD,IAAiB,CAAC,MAAM,CAAC,YAAD,CAA5B,EACI;;AAEJ,QAAI,aAAa,CAAC,MAAd,KAAyB,CAA7B,EAAgC;AAC5B,UAAI,MAAM,CAAC,YAAD,CAAN,YAAgC,KAApC,EAA2C;AACvC,QAAA,MAAM,CAAC,YAAD,CAAN,CAAqB,GAArB,CAAyB,UAAC,QAAD,EAAwB;AAAK,iBAAA,QAAQ,CAAC,KAAI,CAAb,YAAQ,CAAR,EAAA;AAA6B,SAAnF;AACH,OAFD,MAEO;AACH,QAAA,MAAM,CAAC,YAAD,CAAN,CAAqB,KAAK,YAA1B;AACH;AACJ,KAND,MAMO;AACH,UAAI,MAAM,CAAC,YAAD,CAAV,EACI,KAAK,wBAAL,CAA8B,MAAM,CAAC,YAAD,CAApC,EAAoD,aAApD;AACP;AACJ,GAfS;;AAiBd,SAAA,sBAAA;AAAC,CA1FD,EAAA","sourcesContent":["import {EventListenerType} from \"./types/EventListenerTypes\";\nimport {EntityListenerMetadataArgs} from \"../metadata-args/EntityListenerMetadataArgs\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {EmbeddedMetadata} from \"./EmbeddedMetadata\";\n\n/**\n * This metadata contains all information about entity's listeners.\n */\nexport class EntityListenerMetadata {\n\n    // ---------------------------------------------------------------------\n    // Properties\n    // ---------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the listener.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Embedded metadata of the listener, in the case if listener is in embedded.\n     */\n    embeddedMetadata?: EmbeddedMetadata;\n\n    /**\n     * Target class to which metadata is applied.\n     * This can be different then entityMetadata.target in the case if listener is in the embedded.\n     */\n    target: Function|string;\n\n    /**\n     * Target's property name to which this metadata is applied.\n     */\n    propertyName: string;\n\n    /**\n     * The type of the listener.\n     */\n    type: EventListenerType;\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: { entityMetadata: EntityMetadata, embeddedMetadata?: EmbeddedMetadata, args: EntityListenerMetadataArgs }) {\n        this.entityMetadata = options.entityMetadata;\n        this.embeddedMetadata = options.embeddedMetadata;\n        this.target = options.args.target;\n        this.propertyName = options.args.propertyName;\n        this.type = options.args.type;\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Checks if entity listener is allowed to be executed on the given entity.\n     */\n    isAllowed(entity: ObjectLiteral) { // todo: create in entity metadata method like isInherited?\n        return this.entityMetadata.target === entity.constructor || // todo: .constructor won't work for entity schemas, but there are no entity listeners in schemas since there are no objects, right?\n            (this.entityMetadata.target instanceof Function && entity.constructor.prototype instanceof this.entityMetadata.target); // todo: also need to implement entity schema inheritance\n    }\n\n    /**\n     * Executes listener method of the given entity.\n     */\n    execute(entity: ObjectLiteral) {\n        if (!this.embeddedMetadata)\n            return entity[this.propertyName]();\n\n        this.callEntityEmbeddedMethod(entity, this.embeddedMetadata.propertyPath.split(\".\"));\n    }\n\n    // ---------------------------------------------------------------------\n    // Protected Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Calls embedded entity listener method no matter how nested it is.\n     */\n    protected callEntityEmbeddedMethod(entity: ObjectLiteral, propertyPaths: string[]): void {\n        const propertyPath = propertyPaths.shift();\n        if (!propertyPath || !entity[propertyPath])\n            return;\n\n        if (propertyPaths.length === 0) {\n            if (entity[propertyPath] instanceof Array) {\n                entity[propertyPath].map((embedded: ObjectLiteral) => embedded[this.propertyName]());\n            } else {\n                entity[propertyPath][this.propertyName]();\n            }\n        } else {\n            if (entity[propertyPath])\n                this.callEntityEmbeddedMethod(entity[propertyPath], propertyPaths);\n        }\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}