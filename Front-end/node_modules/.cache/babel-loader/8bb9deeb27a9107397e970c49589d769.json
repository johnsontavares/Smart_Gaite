{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../\";\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\n\nexport function Tree(type, options) {\n  return function (target) {\n    getMetadataArgsStorage().trees.push({\n      target: target,\n      type: type,\n      options: type === \"closure-table\" ? options : undefined\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/tree/Tree.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAR,QAAqC,QAArC;AAKA;;;;;AAKG;;AACH,OAAM,SAAU,IAAV,CAAe,IAAf,EAA+B,OAA/B,EAA2D;AAC7D,SAAO,UAAU,MAAV,EAA0B;AAE7B,IAAA,sBAAsB,GAAG,KAAzB,CAA+B,IAA/B,CAAoC;AAChC,MAAA,MAAM,EAAE,MADwB;AAEhC,MAAA,IAAI,EAAE,IAF0B;AAGhC,MAAA,OAAO,EAAE,IAAI,KAAK,eAAT,GAA2B,OAA3B,GAAqC;AAHd,KAApC;AAKH,GAPD;AAQH","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\nimport {TreeMetadataArgs} from \"../../metadata-args/TreeMetadataArgs\";\nimport {TreeType} from \"../../metadata/types/TreeTypes\";\nimport {ClosureTreeOptions} from \"../../metadata/types/ClosureTreeOptions\";\n\n/**\n * Marks entity to work like a tree.\n * Tree pattern that will be used for the tree entity should be specified.\n * @TreeParent decorator must be used in tree entities.\n * TreeRepository can be used to manipulate with tree entities.\n */\nexport function Tree(type: TreeType, options?: ClosureTreeOptions): ClassDecorator {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().trees.push({\n            target: target,\n            type: type,\n            options: type === \"closure-table\" ? options : undefined\n        } as TreeMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}