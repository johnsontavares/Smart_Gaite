{"ast":null,"code":"import { __awaiter, __extends, __generator, __read, __spreadArray, __values } from \"tslib\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { Query } from \"../Query\";\nimport { MssqlParameter } from \"./MssqlParameter\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single SQL Server database connection.\n */\n\nvar SqlServerQueryRunner =\n/** @class */\nfunction (_super) {\n  __extends(SqlServerQueryRunner, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function SqlServerQueryRunner(driver, mode) {\n    var _this = _super.call(this) || this; // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because in transaction mode mssql cannot execute parallel queries,\n     * that's why we store last executed query promise to wait it when we execute next query.\n     *\n     * @see https://github.com/patriksimek/node-mssql/issues/491\n     */\n\n\n    _this.queryResponsibilityChain = [];\n    _this.driver = driver;\n    _this.connection = driver.connection;\n    _this.broadcaster = new Broadcaster(_this);\n    _this.mode = mode;\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates/uses database connection from the connection pool to perform further operations.\n   * Returns obtained database connection.\n   */\n\n\n  SqlServerQueryRunner.prototype.connect = function () {\n    return Promise.resolve();\n  };\n  /**\n   * Releases used database connection.\n   * You cannot use query runner methods once its released.\n   */\n\n\n  SqlServerQueryRunner.prototype.release = function () {\n    this.isReleased = true;\n    return Promise.resolve();\n  };\n  /**\n   * Starts transaction.\n   */\n\n\n  SqlServerQueryRunner.prototype.startTransaction = function (isolationLevel) {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            if (this.isTransactionActive) throw new TransactionAlreadyStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (ok, fail) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var pool, transactionCallback, afterBroadcastResult;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      this.isTransactionActive = true;\n                      return [4\n                      /*yield*/\n                      , this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection()];\n\n                    case 1:\n                      pool = _a.sent();\n                      this.databaseConnection = pool.transaction();\n\n                      transactionCallback = function (err) {\n                        if (err) {\n                          _this.isTransactionActive = false;\n                          return fail(err);\n                        }\n\n                        ok();\n\n                        _this.connection.logger.logQuery(\"BEGIN TRANSACTION\");\n\n                        if (isolationLevel) {\n                          _this.connection.logger.logQuery(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n                        }\n                      };\n\n                      if (isolationLevel) {\n                        this.databaseConnection.begin(this.convertIsolationLevel(isolationLevel), transactionCallback);\n                      } else {\n                        this.databaseConnection.begin(transactionCallback);\n                      }\n\n                      afterBroadcastResult = new BroadcasterResult();\n                      this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n                      if (!(afterBroadcastResult.promises.length > 0)) return [3\n                      /*break*/\n                      , 3];\n                      return [4\n                      /*yield*/\n                      , Promise.all(afterBroadcastResult.promises)];\n\n                    case 2:\n                      _a.sent();\n\n                      _a.label = 3;\n\n                    case 3:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  SqlServerQueryRunner.prototype.commitTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (ok, fail) {\n              _this.databaseConnection.commit(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var afterBroadcastResult;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        if (err) return [2\n                        /*return*/\n                        , fail(err)];\n                        this.isTransactionActive = false;\n                        this.databaseConnection = null;\n                        afterBroadcastResult = new BroadcasterResult();\n                        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n                        if (!(afterBroadcastResult.promises.length > 0)) return [3\n                        /*break*/\n                        , 2];\n                        return [4\n                        /*yield*/\n                        , Promise.all(afterBroadcastResult.promises)];\n\n                      case 1:\n                        _a.sent();\n\n                        _a.label = 2;\n\n                      case 2:\n                        ok();\n                        this.connection.logger.logQuery(\"COMMIT\");\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Rollbacks transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  SqlServerQueryRunner.prototype.rollbackTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            , new Promise(function (ok, fail) {\n              _this.databaseConnection.rollback(function (err) {\n                return __awaiter(_this, void 0, void 0, function () {\n                  var afterBroadcastResult;\n                  return __generator(this, function (_a) {\n                    switch (_a.label) {\n                      case 0:\n                        if (err) return [2\n                        /*return*/\n                        , fail(err)];\n                        this.isTransactionActive = false;\n                        this.databaseConnection = null;\n                        afterBroadcastResult = new BroadcasterResult();\n                        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n                        if (!(afterBroadcastResult.promises.length > 0)) return [3\n                        /*break*/\n                        , 2];\n                        return [4\n                        /*yield*/\n                        , Promise.all(afterBroadcastResult.promises)];\n\n                      case 1:\n                        _a.sent();\n\n                        _a.label = 2;\n\n                      case 2:\n                        ok();\n                        this.connection.logger.logQuery(\"ROLLBACK\");\n                        return [2\n                        /*return*/\n                        ];\n                    }\n                  });\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Executes a given SQL query.\n   */\n\n\n  SqlServerQueryRunner.prototype.query = function (query, parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var waitingOkay, waitingPromise, otherWaitingPromises, promise;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            waitingPromise = new Promise(function (ok) {\n              return waitingOkay = ok;\n            });\n            if (!this.queryResponsibilityChain.length) return [3\n            /*break*/\n            , 2];\n            otherWaitingPromises = __spreadArray([], __read(this.queryResponsibilityChain));\n            this.queryResponsibilityChain.push(waitingPromise);\n            return [4\n            /*yield*/\n            , Promise.all(otherWaitingPromises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            promise = new Promise(function (ok, fail) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var pool, request_1, queryStartTime_1, err_1;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      _a.trys.push([0, 2,, 3]);\n\n                      this.driver.connection.logger.logQuery(query, parameters, this);\n                      return [4\n                      /*yield*/\n                      , this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection()];\n\n                    case 1:\n                      pool = _a.sent();\n                      request_1 = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n\n                      if (parameters && parameters.length) {\n                        parameters.forEach(function (parameter, index) {\n                          var parameterName = index.toString();\n\n                          if (parameter instanceof MssqlParameter) {\n                            var mssqlParameter = _this.mssqlParameterToNativeParameter(parameter);\n\n                            if (mssqlParameter) {\n                              request_1.input(parameterName, mssqlParameter, parameter.value);\n                            } else {\n                              request_1.input(parameterName, parameter.value);\n                            }\n                          } else {\n                            request_1.input(parameterName, parameter);\n                          }\n                        });\n                      }\n\n                      queryStartTime_1 = +new Date();\n                      request_1.query(query, function (err, result) {\n                        // log slow queries if maxQueryExecution time is set\n                        var maxQueryExecutionTime = _this.driver.connection.options.maxQueryExecutionTime;\n                        var queryEndTime = +new Date();\n                        var queryExecutionTime = queryEndTime - queryStartTime_1;\n                        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) _this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, _this);\n\n                        var resolveChain = function () {\n                          if (promiseIndex !== -1) _this.queryResponsibilityChain.splice(promiseIndex, 1);\n                          if (waitingPromiseIndex !== -1) _this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                          waitingOkay();\n                        };\n\n                        var promiseIndex = _this.queryResponsibilityChain.indexOf(promise);\n\n                        var waitingPromiseIndex = _this.queryResponsibilityChain.indexOf(waitingPromise);\n\n                        if (err) {\n                          _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n\n                          resolveChain();\n                          return fail(new QueryFailedError(query, parameters, err));\n                        }\n\n                        var queryType = query.slice(0, query.indexOf(\" \"));\n\n                        switch (queryType) {\n                          case \"DELETE\":\n                            // for DELETE query additionally return number of affected rows\n                            ok([result.recordset, result.rowsAffected[0]]);\n                            break;\n\n                          default:\n                            ok(result.recordset);\n                        }\n\n                        resolveChain();\n                      });\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 2:\n                      err_1 = _a.sent();\n                      fail(err_1);\n                      return [3\n                      /*break*/\n                      , 3];\n\n                    case 3:\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            }); // with this condition, Promise.all causes unexpected behavior.\n            // if (this.isTransactionActive)\n\n            this.queryResponsibilityChain.push(promise);\n            return [2\n            /*return*/\n            , promise];\n        }\n      });\n    });\n  };\n  /**\n   * Returns raw data stream.\n   */\n\n\n  SqlServerQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {\n    return __awaiter(this, void 0, void 0, function () {\n      var waitingOkay, waitingPromise, otherWaitingPromises, promise;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            waitingPromise = new Promise(function (ok) {\n              return waitingOkay = ok;\n            });\n            if (!this.queryResponsibilityChain.length) return [3\n            /*break*/\n            , 2];\n            otherWaitingPromises = __spreadArray([], __read(this.queryResponsibilityChain));\n            this.queryResponsibilityChain.push(waitingPromise);\n            return [4\n            /*yield*/\n            , Promise.all(otherWaitingPromises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            promise = new Promise(function (ok, fail) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var pool, request;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      this.driver.connection.logger.logQuery(query, parameters, this);\n                      return [4\n                      /*yield*/\n                      , this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection()];\n\n                    case 1:\n                      pool = _a.sent();\n                      request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n                      request.stream = true;\n\n                      if (parameters && parameters.length) {\n                        parameters.forEach(function (parameter, index) {\n                          var parameterName = index.toString();\n\n                          if (parameter instanceof MssqlParameter) {\n                            request.input(parameterName, _this.mssqlParameterToNativeParameter(parameter), parameter.value);\n                          } else {\n                            request.input(parameterName, parameter);\n                          }\n                        });\n                      }\n\n                      request.query(query, function (err, result) {\n                        var resolveChain = function () {\n                          if (promiseIndex !== -1) _this.queryResponsibilityChain.splice(promiseIndex, 1);\n                          if (waitingPromiseIndex !== -1) _this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                          waitingOkay();\n                        };\n\n                        var promiseIndex = _this.queryResponsibilityChain.indexOf(promise);\n\n                        var waitingPromiseIndex = _this.queryResponsibilityChain.indexOf(waitingPromise);\n\n                        if (err) {\n                          _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n\n                          resolveChain();\n                          return fail(err);\n                        }\n\n                        ok(result.recordset);\n                        resolveChain();\n                      });\n                      if (onEnd) request.on(\"done\", onEnd);\n                      if (onError) request.on(\"error\", onError);\n                      ok(request);\n                      return [2\n                      /*return*/\n                      ];\n                  }\n                });\n              });\n            });\n            if (this.isTransactionActive) this.queryResponsibilityChain.push(promise);\n            return [2\n            /*return*/\n            , promise];\n        }\n      });\n    });\n  };\n  /**\n   * Returns all available database names including system databases.\n   */\n\n\n  SqlServerQueryRunner.prototype.getDatabases = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"EXEC sp_databases\")];\n\n          case 1:\n            results = _a.sent();\n            return [2\n            /*return*/\n            , results.map(function (result) {\n              return result[\"DATABASE_NAME\"];\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Returns all available schema names including system schemas.\n   * If database parameter specified, returns schemas of that database.\n   */\n\n\n  SqlServerQueryRunner.prototype.getSchemas = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      var query, results;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            query = database ? \"SELECT * FROM \\\"\" + database + \"\\\".\\\"sys\\\".\\\"schema\\\"\" : \"SELECT * FROM \\\"sys\\\".\\\"schemas\\\"\";\n            return [4\n            /*yield*/\n            , this.query(query)];\n\n          case 1:\n            results = _a.sent();\n            return [2\n            /*return*/\n            , results.map(function (result) {\n              return result[\"name\"];\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if database with the given name exist.\n   */\n\n\n  SqlServerQueryRunner.prototype.hasDatabase = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, dbId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT DB_ID('\" + database + \"') as \\\"db_id\\\"\")];\n\n          case 1:\n            result = _a.sent();\n            dbId = result[0][\"db_id\"];\n            return [2\n            /*return*/\n            , !!dbId];\n        }\n      });\n    });\n  };\n  /**\n   * Loads currently using database\n   */\n\n\n  SqlServerQueryRunner.prototype.getCurrentDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentDBQuery;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT DB_NAME() AS \\\"db_name\\\"\")];\n\n          case 1:\n            currentDBQuery = _a.sent();\n            return [2\n            /*return*/\n            , currentDBQuery[0][\"db_name\"]];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if schema with the given name exist.\n   */\n\n\n  SqlServerQueryRunner.prototype.hasSchema = function (schema) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, schemaId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT SCHEMA_ID('\" + schema + \"') as \\\"schema_id\\\"\")];\n\n          case 1:\n            result = _a.sent();\n            schemaId = result[0][\"schema_id\"];\n            return [2\n            /*return*/\n            , !!schemaId];\n        }\n      });\n    });\n  };\n  /**\n   * Loads currently using database schema\n   */\n\n\n  SqlServerQueryRunner.prototype.getCurrentSchema = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchemaQuery;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT SCHEMA_NAME() AS \\\"schema_name\\\"\")];\n\n          case 1:\n            currentSchemaQuery = _a.sent();\n            return [2\n            /*return*/\n            , currentSchemaQuery[0][\"schema_name\"]];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if table with the given name exist in the database.\n   */\n\n\n  SqlServerQueryRunner.prototype.hasTable = function (tableOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parsedTableName, schema, sql, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parsedTableName = this.parseTableName(tableOrName);\n            schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n            sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n            return [4\n            /*yield*/\n            , this.query(sql)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if column exist in the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parsedTableName, schema, sql, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parsedTableName = this.parseTableName(tableOrName);\n            schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : \"'\" + parsedTableName.schema + \"'\";\n            sql = \"SELECT * FROM \\\"\" + parsedTableName.database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \\\"TABLE_NAME\\\" = '\" + parsedTableName.name + \"' AND \\\"COLUMN_NAME\\\" = '\" + columnName + \"' AND \\\"TABLE_SCHEMA\\\" = \" + schema;\n            return [4\n            /*yield*/\n            , this.query(sql)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new database.\n   */\n\n\n  SqlServerQueryRunner.prototype.createDatabase = function (database, ifNotExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      var up, down;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            up = ifNotExist ? \"IF DB_ID('\" + database + \"') IS NULL CREATE DATABASE \\\"\" + database + \"\\\"\" : \"CREATE DATABASE \\\"\" + database + \"\\\"\";\n            down = \"DROP DATABASE \\\"\" + database + \"\\\"\";\n            return [4\n            /*yield*/\n            , this.executeQueries(new Query(up), new Query(down))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops database.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropDatabase = function (database, ifExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      var up, down;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            up = ifExist ? \"IF DB_ID('\" + database + \"') IS NOT NULL DROP DATABASE \\\"\" + database + \"\\\"\" : \"DROP DATABASE \\\"\" + database + \"\\\"\";\n            down = \"CREATE DATABASE \\\"\" + database + \"\\\"\";\n            return [4\n            /*yield*/\n            , this.executeQueries(new Query(up), new Query(down))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates table schema.\n   * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n   */\n\n\n  SqlServerQueryRunner.prototype.createSchema = function (schemaPath, ifNotExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries, upQuery, dbName, schema, currentDB, upQuery;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            if (!(schemaPath.indexOf(\".\") === -1)) return [3\n            /*break*/\n            , 1];\n            upQuery = ifNotExist ? \"IF SCHEMA_ID('\" + schemaPath + \"') IS NULL BEGIN EXEC ('CREATE SCHEMA \\\"\" + schemaPath + \"\\\"') END\" : \"CREATE SCHEMA \\\"\" + schemaPath + \"\\\"\";\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(\"DROP SCHEMA \\\"\" + schemaPath + \"\\\"\"));\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            dbName = schemaPath.split(\".\")[0];\n            schema = schemaPath.split(\".\")[1];\n            return [4\n            /*yield*/\n            , this.getCurrentDatabase()];\n\n          case 2:\n            currentDB = _a.sent();\n            upQueries.push(new Query(\"USE \\\"\" + dbName + \"\\\"\"));\n            downQueries.push(new Query(\"USE \\\"\" + currentDB + \"\\\"\"));\n            upQuery = ifNotExist ? \"IF SCHEMA_ID('\" + schema + \"') IS NULL BEGIN EXEC ('CREATE SCHEMA \\\"\" + schema + \"\\\"') END\" : \"CREATE SCHEMA \\\"\" + schema + \"\\\"\";\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(\"DROP SCHEMA \\\"\" + schema + \"\\\"\"));\n            upQueries.push(new Query(\"USE \\\"\" + currentDB + \"\\\"\"));\n            downQueries.push(new Query(\"USE \\\"\" + dbName + \"\\\"\"));\n            _a.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops table schema.\n   * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropSchema = function (schemaPath, ifExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries, upQuery, dbName, schema, currentDB, upQuery;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            if (!(schemaPath.indexOf(\".\") === -1)) return [3\n            /*break*/\n            , 1];\n            upQuery = ifExist ? \"IF SCHEMA_ID('\" + schemaPath + \"') IS NULL BEGIN EXEC ('DROP SCHEMA \\\"\" + schemaPath + \"\\\"') END\" : \"DROP SCHEMA \\\"\" + schemaPath + \"\\\"\";\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(\"CREATE SCHEMA \\\"\" + schemaPath + \"\\\"\"));\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            dbName = schemaPath.split(\".\")[0];\n            schema = schemaPath.split(\".\")[1];\n            return [4\n            /*yield*/\n            , this.getCurrentDatabase()];\n\n          case 2:\n            currentDB = _a.sent();\n            upQueries.push(new Query(\"USE \\\"\" + dbName + \"\\\"\"));\n            downQueries.push(new Query(\"USE \\\"\" + currentDB + \"\\\"\"));\n            upQuery = ifExist ? \"IF SCHEMA_ID('\" + schema + \"') IS NULL BEGIN EXEC ('DROP SCHEMA \\\"\" + schema + \"\\\"') END\" : \"DROP SCHEMA \\\"\" + schema + \"\\\"\";\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(\"CREATE SCHEMA \\\"\" + schema + \"\\\"\"));\n            upQueries.push(new Query(\"USE \\\"\" + currentDB + \"\\\"\"));\n            downQueries.push(new Query(\"USE \\\"\" + dbName + \"\\\"\"));\n            _a.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new table.\n   */\n\n\n  SqlServerQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {\n    if (ifNotExist === void 0) {\n      ifNotExist = false;\n    }\n\n    if (createForeignKeys === void 0) {\n      createForeignKeys = true;\n    }\n\n    if (createIndices === void 0) {\n      createIndices = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isTableExist, upQueries, downQueries;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!ifNotExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasTable(table)];\n\n          case 1:\n            isTableExist = _a.sent();\n            if (isTableExist) return [2\n            /*return*/\n            , Promise.resolve()];\n            _a.label = 2;\n\n          case 2:\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(this.createTableSql(table, createForeignKeys));\n            downQueries.push(this.dropTableSql(table)); // if createForeignKeys is true, we must drop created foreign keys in down query.\n            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n\n            if (createForeignKeys) table.foreignKeys.forEach(function (foreignKey) {\n              return downQueries.push(_this.dropForeignKeySql(table, foreignKey));\n            });\n\n            if (createIndices) {\n              table.indices.forEach(function (index) {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name) index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(_this.createIndexSql(table, index));\n                downQueries.push(_this.dropIndexSql(table, index));\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropTable = function (tableOrName, ifExist, dropForeignKeys, dropIndices) {\n    if (dropForeignKeys === void 0) {\n      dropForeignKeys = true;\n    }\n\n    if (dropIndices === void 0) {\n      dropIndices = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isTableExist, createForeignKeys, table, _a, upQueries, downQueries;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!ifExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasTable(tableOrName)];\n\n          case 1:\n            isTableExist = _b.sent();\n            if (!isTableExist) return [2\n            /*return*/\n            , Promise.resolve()];\n            _b.label = 2;\n\n          case 2:\n            createForeignKeys = dropForeignKeys;\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 3];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 5];\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 4:\n            _a = _b.sent();\n            _b.label = 5;\n\n          case 5:\n            table = _a;\n            upQueries = [];\n            downQueries = []; // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n            // to perform drop queries for foreign keys and indices.\n\n            if (dropIndices) {\n              table.indices.forEach(function (index) {\n                upQueries.push(_this.dropIndexSql(table, index));\n                downQueries.push(_this.createIndexSql(table, index));\n              });\n            } // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n\n\n            if (dropForeignKeys) table.foreignKeys.forEach(function (foreignKey) {\n              return upQueries.push(_this.dropForeignKeySql(table, foreignKey));\n            });\n            upQueries.push(this.dropTableSql(table));\n            downQueries.push(this.createTableSql(table, createForeignKeys));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 6:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new view.\n   */\n\n\n  SqlServerQueryRunner.prototype.createView = function (view) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries, _a, _b, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(this.createViewSql(view));\n            _b = (_a = upQueries).push;\n            return [4\n            /*yield*/\n            , this.insertViewDefinitionSql(view)];\n\n          case 1:\n            _b.apply(_a, [_e.sent()]);\n\n            downQueries.push(this.dropViewSql(view));\n            _d = (_c = downQueries).push;\n            return [4\n            /*yield*/\n            , this.deleteViewDefinitionSql(view)];\n\n          case 2:\n            _d.apply(_c, [_e.sent()]);\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 3:\n            _e.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the view.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropView = function (target) {\n    return __awaiter(this, void 0, void 0, function () {\n      var viewName, view, upQueries, downQueries, _a, _b, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            viewName = target instanceof View ? target.name : target;\n            return [4\n            /*yield*/\n            , this.getCachedView(viewName)];\n\n          case 1:\n            view = _e.sent();\n            upQueries = [];\n            downQueries = [];\n            _b = (_a = upQueries).push;\n            return [4\n            /*yield*/\n            , this.deleteViewDefinitionSql(view)];\n\n          case 2:\n            _b.apply(_a, [_e.sent()]);\n\n            upQueries.push(this.dropViewSql(view));\n            _d = (_c = downQueries).push;\n            return [4\n            /*yield*/\n            , this.insertViewDefinitionSql(view)];\n\n          case 3:\n            _d.apply(_c, [_e.sent()]);\n\n            downQueries.push(this.createViewSql(view));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _e.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Renames a table.\n   */\n\n\n  SqlServerQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries, oldTable, _a, newTable, dbName, schemaName, oldTableName, splittedName, currentDB, columnNames, oldPkName, newPkName;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            if (!(oldTableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = oldTableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(oldTableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            oldTable = _a;\n            newTable = oldTable.clone();\n            dbName = undefined;\n            schemaName = undefined;\n            oldTableName = oldTable.name;\n            splittedName = oldTable.name.split(\".\");\n\n            if (splittedName.length === 3) {\n              dbName = splittedName[0];\n              oldTableName = splittedName[2];\n              if (splittedName[1] !== \"\") schemaName = splittedName[1];\n            } else if (splittedName.length === 2) {\n              schemaName = splittedName[0];\n              oldTableName = splittedName[1];\n            }\n\n            newTable.name = this.driver.buildTableName(newTableName, schemaName, dbName);\n            return [4\n            /*yield*/\n            , this.getCurrentDatabase()];\n\n          case 4:\n            currentDB = _b.sent();\n\n            if (dbName && dbName !== currentDB) {\n              upQueries.push(new Query(\"USE \\\"\" + dbName + \"\\\"\"));\n              downQueries.push(new Query(\"USE \\\"\" + currentDB + \"\\\"\"));\n            } // rename table\n\n\n            upQueries.push(new Query(\"EXEC sp_rename \\\"\" + this.escapePath(oldTable, true) + \"\\\", \\\"\" + newTableName + \"\\\"\"));\n            downQueries.push(new Query(\"EXEC sp_rename \\\"\" + this.escapePath(newTable, true) + \"\\\", \\\"\" + oldTableName + \"\\\"\")); // rename primary key constraint\n\n            if (newTable.primaryColumns.length > 0) {\n              columnNames = newTable.primaryColumns.map(function (column) {\n                return column.name;\n              });\n              oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n              newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames); // rename primary constraint\n\n              upQueries.push(new Query(\"EXEC sp_rename \\\"\" + this.escapePath(newTable, true) + \".\" + oldPkName + \"\\\", \\\"\" + newPkName + \"\\\"\"));\n              downQueries.push(new Query(\"EXEC sp_rename \\\"\" + this.escapePath(newTable, true) + \".\" + newPkName + \"\\\", \\\"\" + oldPkName + \"\\\"\"));\n            } // rename unique constraints\n\n\n            newTable.uniques.forEach(function (unique) {\n              // build new constraint name\n              var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames); // build queries\n\n\n              upQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(newTable, true) + \".\" + unique.name + \"\\\", \\\"\" + newUniqueName + \"\\\"\"));\n              downQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(newTable, true) + \".\" + newUniqueName + \"\\\", \\\"\" + unique.name + \"\\\"\")); // replace constraint name\n\n              unique.name = newUniqueName;\n            }); // rename index constraints\n\n            newTable.indices.forEach(function (index) {\n              // build new constraint name\n              var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where); // build queries\n\n\n              upQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(newTable, true) + \".\" + index.name + \"\\\", \\\"\" + newIndexName + \"\\\", \\\"INDEX\\\"\"));\n              downQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(newTable, true) + \".\" + newIndexName + \"\\\", \\\"\" + index.name + \"\\\", \\\"INDEX\\\"\")); // replace constraint name\n\n              index.name = newIndexName;\n            }); // rename foreign key constraints\n\n            newTable.foreignKeys.forEach(function (foreignKey) {\n              // build new constraint name\n              var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames); // build queries\n\n\n              upQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(foreignKey.name, schemaName, dbName) + \"\\\", \\\"\" + newForeignKeyName + \"\\\"\"));\n              downQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(newForeignKeyName, schemaName, dbName) + \"\\\", \\\"\" + foreignKey.name + \"\\\"\")); // replace constraint name\n\n              foreignKey.name = newForeignKeyName;\n            }); // change currently used database back to default db.\n\n            if (dbName && dbName !== currentDB) {\n              upQueries.push(new Query(\"USE \\\"\" + currentDB + \"\\\"\"));\n              downQueries.push(new Query(\"USE \\\"\" + dbName + \"\\\"\"));\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 5:\n            _b.sent(); // rename old table and replace it in cached tabled;\n\n\n            oldTable.name = newTable.name;\n            this.replaceCachedTable(oldTable, newTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new column from the column in the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.addColumn = function (tableOrName, column) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, upQueries, downQueries, primaryColumns, pkName_1, columnNames_1, pkName, columnNames, columnIndex, uniqueConstraint, defaultName;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD \" + this.buildCreateColumnSql(table, column, false, true)));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\")); // create or update primary key constraint\n\n            if (column.isPrimary) {\n              primaryColumns = clonedTable.primaryColumns; // if table already have primary key, me must drop it and recreate again\n\n              if (primaryColumns.length > 0) {\n                pkName_1 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames_1 = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName_1 + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName_1 + \"\\\" PRIMARY KEY (\" + columnNames_1 + \")\"));\n              }\n\n              primaryColumns.push(column);\n              pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNames = primaryColumns.map(function (column) {\n                return \"\\\"\" + column.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n            }\n\n            columnIndex = clonedTable.indices.find(function (index) {\n              return index.columnNames.length === 1 && index.columnNames[0] === column.name;\n            });\n\n            if (columnIndex) {\n              upQueries.push(this.createIndexSql(table, columnIndex));\n              downQueries.push(this.dropIndexSql(table, columnIndex));\n            } // create unique constraint\n\n\n            if (column.isUnique) {\n              uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                columnNames: [column.name]\n              });\n              clonedTable.uniques.push(uniqueConstraint);\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + column.name + \"\\\")\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\"));\n            } // remove default constraint\n\n\n            if (column.default !== null && column.default !== undefined) {\n              defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\"));\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _b.sent();\n\n            clonedTable.addColumn(column);\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new columns from the column in the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.addColumns = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var columns_1, columns_1_1, column, e_1_1;\n\n      var e_1, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            columns_1 = __values(columns), columns_1_1 = columns_1.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!columns_1_1.done) return [3\n            /*break*/\n            , 4];\n            column = columns_1_1.value;\n            return [4\n            /*yield*/\n            , this.addColumn(tableOrName, column)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            columns_1_1 = columns_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (columns_1_1 && !columns_1_1.done && (_a = columns_1.return)) _a.call(columns_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Renames column in the given table.\n   */\n\n\n  SqlServerQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, oldColumn, newColumn;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (c) {\n              return c.name === oldTableColumnOrName;\n            });\n            if (!oldColumn) throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n            newColumn = undefined;\n\n            if (newTableColumnOrName instanceof TableColumn) {\n              newColumn = newTableColumnOrName;\n            } else {\n              newColumn = oldColumn.clone();\n              newColumn.name = newTableColumnOrName;\n            }\n\n            return [4\n            /*yield*/\n            , this.changeColumn(table, oldColumn, newColumn)];\n\n          case 4:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Changes a column in the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, upQueries, downQueries, oldColumn, dbName_1, schemaName_1, splittedName, currentDB, primaryColumns, columnNames, oldPkName, newPkName, oldDefaultName, newDefaultName, oldTableColumn, primaryColumns, pkName, columnNames, column, pkName, columnNames, primaryColumn, column, pkName, columnNames, uniqueConstraint, uniqueConstraint, defaultName, defaultName;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (column) {\n              return column.name === oldTableColumnOrName;\n            });\n            if (!oldColumn) throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n            if (!(newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\" || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length)) return [3\n            /*break*/\n            , 6]; // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n\n            return [4\n            /*yield*/\n            , this.dropColumn(table, oldColumn)];\n\n          case 4:\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.addColumn(table, newColumn)];\n\n          case 5:\n            _b.sent(); // update cloned table\n\n\n            clonedTable = table.clone();\n            return [3\n            /*break*/\n            , 10];\n\n          case 6:\n            if (!(newColumn.name !== oldColumn.name)) return [3\n            /*break*/\n            , 8];\n            dbName_1 = undefined;\n            schemaName_1 = undefined;\n            splittedName = table.name.split(\".\");\n\n            if (splittedName.length === 3) {\n              dbName_1 = splittedName[0];\n              if (splittedName[1] !== \"\") schemaName_1 = splittedName[1];\n            } else if (splittedName.length === 2) {\n              schemaName_1 = splittedName[0];\n            }\n\n            return [4\n            /*yield*/\n            , this.getCurrentDatabase()];\n\n          case 7:\n            currentDB = _b.sent();\n\n            if (dbName_1 && dbName_1 !== currentDB) {\n              upQueries.push(new Query(\"USE \\\"\" + dbName_1 + \"\\\"\"));\n              downQueries.push(new Query(\"USE \\\"\" + currentDB + \"\\\"\"));\n            } // rename the column\n\n\n            upQueries.push(new Query(\"EXEC sp_rename \\\"\" + this.escapePath(table, true) + \".\" + oldColumn.name + \"\\\", \\\"\" + newColumn.name + \"\\\"\"));\n            downQueries.push(new Query(\"EXEC sp_rename \\\"\" + this.escapePath(table, true) + \".\" + newColumn.name + \"\\\", \\\"\" + oldColumn.name + \"\\\"\"));\n\n            if (oldColumn.isPrimary === true) {\n              primaryColumns = clonedTable.primaryColumns;\n              columnNames = primaryColumns.map(function (column) {\n                return column.name;\n              });\n              oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames); // replace old column name with new column name\n\n              columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n              columnNames.push(newColumn.name);\n              newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames); // rename primary constraint\n\n              upQueries.push(new Query(\"EXEC sp_rename \\\"\" + this.escapePath(clonedTable, true) + \".\" + oldPkName + \"\\\", \\\"\" + newPkName + \"\\\"\"));\n              downQueries.push(new Query(\"EXEC sp_rename \\\"\" + this.escapePath(clonedTable, true) + \".\" + newPkName + \"\\\", \\\"\" + oldPkName + \"\\\"\"));\n            } // rename index constraints\n\n\n            clonedTable.findColumnIndices(oldColumn).forEach(function (index) {\n              // build new constraint name\n              index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n              index.columnNames.push(newColumn.name);\n\n              var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where); // build queries\n\n\n              upQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(clonedTable, true) + \".\" + index.name + \"\\\", \\\"\" + newIndexName + \"\\\", \\\"INDEX\\\"\"));\n              downQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(clonedTable, true) + \".\" + newIndexName + \"\\\", \\\"\" + index.name + \"\\\", \\\"INDEX\\\"\")); // replace constraint name\n\n              index.name = newIndexName;\n            }); // rename foreign key constraints\n\n            clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {\n              // build new constraint name\n              foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n              foreignKey.columnNames.push(newColumn.name);\n\n              var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames); // build queries\n\n\n              upQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(foreignKey.name, schemaName_1, dbName_1) + \"\\\", \\\"\" + newForeignKeyName + \"\\\"\"));\n              downQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.buildForeignKeyName(newForeignKeyName, schemaName_1, dbName_1) + \"\\\", \\\"\" + foreignKey.name + \"\\\"\")); // replace constraint name\n\n              foreignKey.name = newForeignKeyName;\n            }); // rename check constraints\n\n            clonedTable.findColumnChecks(oldColumn).forEach(function (check) {\n              // build new constraint name\n              check.columnNames.splice(check.columnNames.indexOf(oldColumn.name), 1);\n              check.columnNames.push(newColumn.name);\n\n              var newCheckName = _this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression); // build queries\n\n\n              upQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(clonedTable, true) + \".\" + check.name + \"\\\", \\\"\" + newCheckName + \"\\\"\"));\n              downQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(clonedTable, true) + \".\" + newCheckName + \"\\\", \\\"\" + check.name + \"\\\"\")); // replace constraint name\n\n              check.name = newCheckName;\n            }); // rename unique constraints\n\n            clonedTable.findColumnUniques(oldColumn).forEach(function (unique) {\n              // build new constraint name\n              unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n              unique.columnNames.push(newColumn.name);\n\n              var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames); // build queries\n\n\n              upQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(clonedTable, true) + \".\" + unique.name + \"\\\", \\\"\" + newUniqueName + \"\\\"\"));\n              downQueries.push(new Query(\"EXEC sp_rename \\\"\" + _this.escapePath(clonedTable, true) + \".\" + newUniqueName + \"\\\", \\\"\" + unique.name + \"\\\"\")); // replace constraint name\n\n              unique.name = newUniqueName;\n            }); // rename default constraints\n\n            if (oldColumn.default !== null && oldColumn.default !== undefined) {\n              oldDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n              newDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + oldDefaultName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + oldDefaultName + \"\\\" DEFAULT \" + oldColumn.default + \" FOR \\\"\" + newColumn.name + \"\\\"\"));\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + newDefaultName + \"\\\" DEFAULT \" + oldColumn.default + \" FOR \\\"\" + newColumn.name + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + newDefaultName + \"\\\"\"));\n            } // change currently used database back to default db.\n\n\n            if (dbName_1 && dbName_1 !== currentDB) {\n              upQueries.push(new Query(\"USE \\\"\" + currentDB + \"\\\"\"));\n              downQueries.push(new Query(\"USE \\\"\" + dbName_1 + \"\\\"\"));\n            }\n\n            oldTableColumn = clonedTable.columns.find(function (column) {\n              return column.name === oldColumn.name;\n            });\n            clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n            oldColumn.name = newColumn.name;\n            _b.label = 8;\n\n          case 8:\n            if (this.isColumnChanged(oldColumn, newColumn, false)) {\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \" + this.buildCreateColumnSql(table, newColumn, true, false)));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \" + this.buildCreateColumnSql(table, oldColumn, true, false)));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n              primaryColumns = clonedTable.primaryColumns; // if primary column state changed, we must always drop existed constraint.\n\n              if (primaryColumns.length > 0) {\n                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              }\n\n              if (newColumn.isPrimary === true) {\n                primaryColumns.push(newColumn);\n                column = clonedTable.columns.find(function (column) {\n                  return column.name === newColumn.name;\n                });\n                column.isPrimary = true;\n                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n              } else {\n                primaryColumn = primaryColumns.find(function (c) {\n                  return c.name === newColumn.name;\n                });\n                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                column = clonedTable.columns.find(function (column) {\n                  return column.name === newColumn.name;\n                });\n                column.isPrimary = false; // if we have another primary keys, we must recreate constraint.\n\n                if (primaryColumns.length > 0) {\n                  pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                    return column.name;\n                  }));\n                  columnNames = primaryColumns.map(function (column) {\n                    return \"\\\"\" + column.name + \"\\\"\";\n                  }).join(\", \");\n                  upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                  downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                }\n              }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n              if (newColumn.isUnique === true) {\n                uniqueConstraint = new TableUnique({\n                  name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                  columnNames: [newColumn.name]\n                });\n                clonedTable.uniques.push(uniqueConstraint);\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\"));\n              } else {\n                uniqueConstraint = clonedTable.uniques.find(function (unique) {\n                  return unique.columnNames.length === 1 && !!unique.columnNames.find(function (columnName) {\n                    return columnName === newColumn.name;\n                  });\n                });\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\"));\n              }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n              // (note) if there is a previous default, we need to drop its constraint first\n              if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + oldColumn.default + \" FOR \\\"\" + oldColumn.name + \"\\\"\"));\n              }\n\n              if (newColumn.default !== null && newColumn.default !== undefined) {\n                defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + newColumn.default + \" FOR \\\"\" + newColumn.name + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\"));\n              }\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 9:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            _b.label = 10;\n\n          case 10:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Changes a column in the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var changedColumns_1, changedColumns_1_1, _a, oldColumn, newColumn, e_2_1;\n\n      var e_2, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 5, 6, 7]);\n\n            changedColumns_1 = __values(changedColumns), changedColumns_1_1 = changedColumns_1.next();\n            _c.label = 1;\n\n          case 1:\n            if (!!changedColumns_1_1.done) return [3\n            /*break*/\n            , 4];\n            _a = changedColumns_1_1.value, oldColumn = _a.oldColumn, newColumn = _a.newColumn;\n            return [4\n            /*yield*/\n            , this.changeColumn(tableOrName, oldColumn, newColumn)];\n\n          case 2:\n            _c.sent();\n\n            _c.label = 3;\n\n          case 3:\n            changedColumns_1_1 = changedColumns_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_2_1 = _c.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (changedColumns_1_1 && !changedColumns_1_1.done && (_b = changedColumns_1.return)) _b.call(changedColumns_1);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops column in the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, column, clonedTable, upQueries, downQueries, pkName, columnNames, tableColumn, pkName_2, columnNames_2, columnIndex, columnCheck, columnUnique, defaultName;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n            if (!column) throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = []; // drop primary key constraint\n\n            if (column.isPrimary) {\n              pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNames = clonedTable.primaryColumns.map(function (primaryColumn) {\n                return \"\\\"\" + primaryColumn.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              tableColumn = clonedTable.findColumnByName(column.name);\n              tableColumn.isPrimary = false; // if primary key have multiple columns, we must recreate it without dropped column\n\n              if (clonedTable.primaryColumns.length > 0) {\n                pkName_2 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames_2 = clonedTable.primaryColumns.map(function (primaryColumn) {\n                  return \"\\\"\" + primaryColumn.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName_2 + \"\\\" PRIMARY KEY (\" + columnNames_2 + \")\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName_2 + \"\\\"\"));\n              }\n            }\n\n            columnIndex = clonedTable.indices.find(function (index) {\n              return index.columnNames.length === 1 && index.columnNames[0] === column.name;\n            });\n\n            if (columnIndex) {\n              clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n              upQueries.push(this.dropIndexSql(table, columnIndex));\n              downQueries.push(this.createIndexSql(table, columnIndex));\n            }\n\n            columnCheck = clonedTable.checks.find(function (check) {\n              return !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name;\n            });\n\n            if (columnCheck) {\n              clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n              upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n              downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n            }\n\n            columnUnique = clonedTable.uniques.find(function (unique) {\n              return unique.columnNames.length === 1 && unique.columnNames[0] === column.name;\n            });\n\n            if (columnUnique) {\n              clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n              upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n              downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n            } // drop default constraint\n\n\n            if (column.default !== null && column.default !== undefined) {\n              defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + defaultName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + column.default + \" FOR \\\"\" + column.name + \"\\\"\"));\n            }\n\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD \" + this.buildCreateColumnSql(table, column, false, false)));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _b.sent();\n\n            clonedTable.removeColumn(column);\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the columns in the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropColumns = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var columns_2, columns_2_1, column, e_3_1;\n\n      var e_3, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            columns_2 = __values(columns), columns_2_1 = columns_2.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!columns_2_1.done) return [3\n            /*break*/\n            , 4];\n            column = columns_2_1.value;\n            return [4\n            /*yield*/\n            , this.dropColumn(tableOrName, column)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            columns_2_1 = columns_2.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_3_1 = _b.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (columns_2_1 && !columns_2_1.done && (_a = columns_2.return)) _a.call(columns_2);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new primary key.\n   */\n\n\n  SqlServerQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            up = this.createPrimaryKeySql(table, columnNames); // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n\n            clonedTable.columns.forEach(function (column) {\n              if (columnNames.find(function (columnName) {\n                return columnName === column.name;\n              })) column.isPrimary = true;\n            });\n            down = this.dropPrimaryKeySql(clonedTable);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Updates composite primary keys.\n   */\n\n\n  SqlServerQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, columnNames, upQueries, downQueries, primaryColumns, pkName_3, columnNamesString_1, pkName, columnNamesString;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            columnNames = columns.map(function (column) {\n              return column.name;\n            });\n            upQueries = [];\n            downQueries = [];\n            primaryColumns = clonedTable.primaryColumns;\n\n            if (primaryColumns.length > 0) {\n              pkName_3 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNamesString_1 = primaryColumns.map(function (column) {\n                return \"\\\"\" + column.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName_3 + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName_3 + \"\\\" PRIMARY KEY (\" + columnNamesString_1 + \")\"));\n            } // update columns in table.\n\n\n            clonedTable.columns.filter(function (column) {\n              return columnNames.indexOf(column.name) !== -1;\n            }).forEach(function (column) {\n              return column.isPrimary = true;\n            });\n            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n            columnNamesString = columnNames.map(function (columnName) {\n              return \"\\\"\" + columnName + \"\\\"\";\n            }).join(\", \");\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a primary key.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            up = this.dropPrimaryKeySql(table);\n            down = this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) {\n              return column.name;\n            }));\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.primaryColumns.forEach(function (column) {\n              column.isPrimary = false;\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new unique constraint.\n   */\n\n\n  SqlServerQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.\n\n            if (!uniqueConstraint.name) uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n            up = this.createUniqueConstraintSql(table, uniqueConstraint);\n            down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addUniqueConstraint(uniqueConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new unique constraints.\n   */\n\n\n  SqlServerQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = uniqueConstraints.map(function (uniqueConstraint) {\n              return _this.createUniqueConstraint(tableOrName, uniqueConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops unique constraint.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, uniqueConstraint, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(function (u) {\n              return u.name === uniqueOrName;\n            });\n            if (!uniqueConstraint) throw new Error(\"Supplied unique constraint was not found in table \" + table.name);\n            up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n            down = this.createUniqueConstraintSql(table, uniqueConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeUniqueConstraint(uniqueConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an unique constraints.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = uniqueConstraints.map(function (uniqueConstraint) {\n              return _this.dropUniqueConstraint(tableOrName, uniqueConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new check constraint.\n   */\n\n\n  SqlServerQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.\n\n            if (!checkConstraint.name) checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);\n            up = this.createCheckConstraintSql(table, checkConstraint);\n            down = this.dropCheckConstraintSql(table, checkConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addCheckConstraint(checkConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new check constraints.\n   */\n\n\n  SqlServerQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = checkConstraints.map(function (checkConstraint) {\n              return _this.createCheckConstraint(tableOrName, checkConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops check constraint.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, checkConstraint, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(function (c) {\n              return c.name === checkOrName;\n            });\n            if (!checkConstraint) throw new Error(\"Supplied check constraint was not found in table \" + table.name);\n            up = this.dropCheckConstraintSql(table, checkConstraint);\n            down = this.createCheckConstraintSql(table, checkConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeCheckConstraint(checkConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops check constraints.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = checkConstraints.map(function (checkConstraint) {\n              return _this.dropCheckConstraint(tableOrName, checkConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new exclusion constraint.\n   */\n\n\n  SqlServerQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SqlServer does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Creates a new exclusion constraints.\n   */\n\n\n  SqlServerQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SqlServer does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Drops exclusion constraint.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SqlServer does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Drops exclusion constraints.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error(\"SqlServer does not support exclusion constraints.\");\n      });\n    });\n  };\n  /**\n   * Creates a new foreign key.\n   */\n\n\n  SqlServerQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, metadata, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            metadata = this.connection.hasMetadata(table.name) ? this.connection.getMetadata(table.name) : undefined;\n            if (metadata && metadata.treeParentRelation && metadata.treeParentRelation.isTreeParent && metadata.foreignKeys.find(function (foreignKey) {\n              return foreignKey.onDelete !== \"NO ACTION\";\n            })) throw new Error(\"SqlServer does not support options in TreeParent.\"); // new FK may be passed without name. In this case we generate FK name manually.\n\n            if (!foreignKey.name) foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n            up = this.createForeignKeySql(table, foreignKey);\n            down = this.dropForeignKeySql(table, foreignKey);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addForeignKey(foreignKey);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new foreign keys.\n   */\n\n\n  SqlServerQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = foreignKeys.map(function (foreignKey) {\n              return _this.createForeignKey(tableOrName, foreignKey);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a foreign key from the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, foreignKey, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(function (fk) {\n              return fk.name === foreignKeyOrName;\n            });\n            if (!foreignKey) throw new Error(\"Supplied foreign key was not found in table \" + table.name);\n            up = this.dropForeignKeySql(table, foreignKey);\n            down = this.createForeignKeySql(table, foreignKey);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeForeignKey(foreignKey);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a foreign keys from the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = foreignKeys.map(function (foreignKey) {\n              return _this.dropForeignKey(tableOrName, foreignKey);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new index.\n   */\n\n\n  SqlServerQueryRunner.prototype.createIndex = function (tableOrName, index) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new index may be passed without name. In this case we generate index name manually.\n\n            if (!index.name) index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n            up = this.createIndexSql(table, index);\n            down = this.dropIndexSql(table, index);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addIndex(index);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new indices\n   */\n\n\n  SqlServerQueryRunner.prototype.createIndices = function (tableOrName, indices) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = indices.map(function (index) {\n              return _this.createIndex(tableOrName, index);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an index.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, index, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(function (i) {\n              return i.name === indexOrName;\n            });\n            if (!index) throw new Error(\"Supplied index was not found in table \" + table.name);\n            up = this.dropIndexSql(table, index);\n            down = this.createIndexSql(table, index);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeIndex(index);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an indices from the table.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropIndices = function (tableOrName, indices) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = indices.map(function (index) {\n              return _this.dropIndex(tableOrName, index);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Clears all table contents.\n   * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n   */\n\n\n  SqlServerQueryRunner.prototype.clearTable = function (tablePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"TRUNCATE TABLE \" + this.escapePath(tablePath))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Removes all tables from the currently connected database.\n   */\n\n\n  SqlServerQueryRunner.prototype.clearDatabase = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      var isDatabaseExist, allViewsSql, allViewsResults, allTablesSql, allTablesResults, error_1, rollbackError_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!database) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasDatabase(database)];\n\n          case 1:\n            isDatabaseExist = _a.sent();\n            if (!isDatabaseExist) return [2\n            /*return*/\n            , Promise.resolve()];\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.startTransaction()];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            _a.trys.push([4, 11,, 16]);\n\n            allViewsSql = database ? \"SELECT * FROM \\\"\" + database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"VIEWS\\\"\" : \"SELECT * FROM \\\"INFORMATION_SCHEMA\\\".\\\"VIEWS\\\"\";\n            return [4\n            /*yield*/\n            , this.query(allViewsSql)];\n\n          case 5:\n            allViewsResults = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(allViewsResults.map(function (viewResult) {\n              // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n              var dropTableSql = \"DROP VIEW \\\"\" + viewResult[\"TABLE_SCHEMA\"] + \"\\\".\\\"\" + viewResult[\"TABLE_NAME\"] + \"\\\"\";\n              return _this.query(dropTableSql);\n            }))];\n\n          case 6:\n            _a.sent();\n\n            allTablesSql = database ? \"SELECT * FROM \\\"\" + database + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_TYPE\\\" = 'BASE TABLE'\" : \"SELECT * FROM \\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \\\"TABLE_TYPE\\\" = 'BASE TABLE'\";\n            return [4\n            /*yield*/\n            , this.query(allTablesSql)];\n\n          case 7:\n            allTablesResults = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(allTablesResults.map(function (tablesResult) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var dropForeignKeySql, dropFkQueries;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      dropForeignKeySql = \"SELECT 'ALTER TABLE \\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"' + OBJECT_SCHEMA_NAME(\\\"fk\\\".\\\"parent_object_id\\\", DB_ID('\" + tablesResult[\"TABLE_CATALOG\"] + \"')) + '\\\".\\\"' + OBJECT_NAME(\\\"fk\\\".\\\"parent_object_id\\\", DB_ID('\" + tablesResult[\"TABLE_CATALOG\"] + \"')) + '\\\" \" + (\"DROP CONSTRAINT \\\"' + \\\"fk\\\".\\\"name\\\" + '\\\"' as \\\"query\\\" FROM \\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" AS \\\"fk\\\" \") + (\"WHERE \\\"fk\\\".\\\"referenced_object_id\\\" = OBJECT_ID('\\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_SCHEMA\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_NAME\"] + \"\\\"')\");\n                      return [4\n                      /*yield*/\n                      , this.query(dropForeignKeySql)];\n\n                    case 1:\n                      dropFkQueries = _a.sent();\n                      return [2\n                      /*return*/\n                      , Promise.all(dropFkQueries.map(function (result) {\n                        return result[\"query\"];\n                      }).map(function (dropQuery) {\n                        return _this.query(dropQuery);\n                      }))];\n                  }\n                });\n              });\n            }))];\n\n          case 8:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , Promise.all(allTablesResults.map(function (tablesResult) {\n              if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\n                // don't try to drop temporary tables\n                return;\n              }\n\n              var dropTableSql = \"DROP TABLE \\\"\" + tablesResult[\"TABLE_CATALOG\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_SCHEMA\"] + \"\\\".\\\"\" + tablesResult[\"TABLE_NAME\"] + \"\\\"\";\n              return _this.query(dropTableSql);\n            }))];\n\n          case 9:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.commitTransaction()];\n\n          case 10:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            error_1 = _a.sent();\n            _a.label = 12;\n\n          case 12:\n            _a.trys.push([12, 14,, 15]);\n\n            return [4\n            /*yield*/\n            , this.rollbackTransaction()];\n\n          case 13:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            rollbackError_1 = _a.sent();\n            return [3\n            /*break*/\n            , 15];\n\n          case 15:\n            throw error_1;\n\n          case 16:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n\n  SqlServerQueryRunner.prototype.loadViews = function (viewPaths) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hasTable, currentSchema, currentDatabase, extractTableSchemaAndName, dbNames, viewsCondition, query, dbViews;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.hasTable(this.getTypeormMetadataTableName())];\n\n          case 1:\n            hasTable = _a.sent();\n            if (!hasTable) return [2\n            /*return*/\n            , Promise.resolve([])];\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 2:\n            currentSchema = _a.sent();\n            return [4\n            /*yield*/\n            , this.getCurrentDatabase()];\n\n          case 3:\n            currentDatabase = _a.sent();\n\n            extractTableSchemaAndName = function (tableName) {\n              var _a = __read(tableName.split(\".\"), 3),\n                  database = _a[0],\n                  schema = _a[1],\n                  name = _a[2]; // if name is empty, it means that tableName have only schema name and table name or only table name\n\n\n              if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                  name = database;\n                  schema = _this.driver.options.schema || currentSchema;\n                } else {\n                  name = schema;\n                  schema = database;\n                }\n              } else if (schema === \"\") {\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return [schema, name];\n            };\n\n            dbNames = viewPaths.filter(function (viewPath) {\n              return viewPath.split(\".\").length === 3;\n            }).map(function (viewPath) {\n              return viewPath.split(\".\")[0];\n            });\n            if (this.driver.database && !dbNames.find(function (dbName) {\n              return dbName === _this.driver.database;\n            })) dbNames.push(this.driver.database);\n            viewsCondition = viewPaths.map(function (viewPath) {\n              var _a = __read(extractTableSchemaAndName(viewPath), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              return \"(\\\"T\\\".\\\"SCHEMA\\\" = '\" + schema + \"' AND \\\"T\\\".\\\"NAME\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            query = dbNames.map(function (dbName) {\n              return \"SELECT \\\"T\\\".*, \\\"V\\\".\\\"CHECK_OPTION\\\" FROM \" + _this.escapePath(_this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"VIEWS\\\" \\\"V\\\" ON \\\"V\\\".\\\"TABLE_SCHEMA\\\" = \\\"T\\\".\\\"SCHEMA\\\" AND \\\"v\\\".\\\"TABLE_NAME\\\" = \\\"T\\\".\\\"NAME\\\" WHERE \\\"T\\\".\\\"TYPE\\\" = 'VIEW' \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n            }).join(\" UNION ALL \");\n            return [4\n            /*yield*/\n            , this.query(query)];\n\n          case 4:\n            dbViews = _a.sent();\n            return [2\n            /*return*/\n            , dbViews.map(function (dbView) {\n              var view = new View();\n              var db = dbView[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbView[\"TABLE_CATALOG\"];\n              var schema = dbView[\"schema\"] === currentSchema && !_this.driver.options.schema ? undefined : dbView[\"schema\"];\n              view.name = _this.driver.buildTableName(dbView[\"name\"], schema, db);\n              view.expression = dbView[\"value\"];\n              return view;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Loads all tables (with given names) from the database and creates a Table from them.\n   */\n\n\n  SqlServerQueryRunner.prototype.loadTables = function (tableNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var schemaNames, currentSchema, currentDatabase, extractTableSchemaAndName, dbNames, schemaNamesString, tablesCondition, tablesSql, columnsSql, constraintsCondition, constraintsSql, foreignKeysSql, identityColumnsSql, dbCollationsSql, indicesSql, _a, dbTables, dbColumns, dbConstraints, dbForeignKeys, dbIdentityColumns, dbCollations, dbIndices;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            // if no tables given then no need to proceed\n            if (!tableNames || !tableNames.length) return [2\n            /*return*/\n            , []];\n            schemaNames = [];\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            return [4\n            /*yield*/\n            , this.getCurrentDatabase()];\n\n          case 2:\n            currentDatabase = _b.sent();\n\n            extractTableSchemaAndName = function (tableName) {\n              var _a = __read(tableName.split(\".\"), 3),\n                  database = _a[0],\n                  schema = _a[1],\n                  name = _a[2]; // if name is empty, it means that tableName have only schema name and table name or only table name\n\n\n              if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                  name = database;\n                  schema = _this.driver.options.schema || currentSchema;\n                } else {\n                  name = schema;\n                  schema = database;\n                }\n              } else if (schema === \"\") {\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return [schema, name];\n            };\n\n            tableNames.filter(function (tablePath) {\n              return tablePath.indexOf(\".\") !== -1;\n            }).forEach(function (tablePath) {\n              if (tablePath.split(\".\").length === 3) {\n                if (tablePath.split(\".\")[1] !== \"\") schemaNames.push(tablePath.split(\".\")[1]);\n              } else {\n                schemaNames.push(tablePath.split(\".\")[0]);\n              }\n            });\n            schemaNames.push(this.driver.options.schema || currentSchema);\n            dbNames = tableNames.filter(function (tablePath) {\n              return tablePath.split(\".\").length === 3;\n            }).map(function (tablePath) {\n              return tablePath.split(\".\")[0];\n            });\n            if (this.driver.database && !dbNames.find(function (dbName) {\n              return dbName === _this.driver.database;\n            })) dbNames.push(this.driver.database);\n            schemaNamesString = schemaNames.map(function (name) {\n              return \"'\" + name + \"'\";\n            }).join(\", \");\n            tablesCondition = tableNames.map(function (tableName) {\n              var _a = __read(extractTableSchemaAndName(tableName), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              return \"(\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"TABLE_NAME\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            tablesSql = dbNames.map(function (dbName) {\n              return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLES\\\" WHERE \" + tablesCondition;\n            }).join(\" UNION ALL \");\n            columnsSql = dbNames.map(function (dbName) {\n              return \"SELECT * FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" WHERE \" + tablesCondition;\n            }).join(\" UNION ALL \");\n            constraintsCondition = tableNames.map(function (tableName) {\n              var _a = __read(extractTableSchemaAndName(tableName), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              return \"(\\\"columnUsages\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"columnUsages\\\".\\\"TABLE_NAME\\\" = '\" + name + \"' \" + (\"AND \\\"tableConstraints\\\".\\\"TABLE_SCHEMA\\\" = '\" + schema + \"' AND \\\"tableConstraints\\\".\\\"TABLE_NAME\\\" = '\" + name + \"')\");\n            }).join(\" OR \");\n            constraintsSql = dbNames.map(function (dbName) {\n              return \"SELECT \\\"columnUsages\\\".*, \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\", \\\"chk\\\".\\\"definition\\\" \" + (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"CONSTRAINT_COLUMN_USAGE\\\" \\\"columnUsages\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"TABLE_CONSTRAINTS\\\" \\\"tableConstraints\\\" ON \\\"tableConstraints\\\".\\\"CONSTRAINT_NAME\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") + (\"LEFT JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"check_constraints\\\" \\\"chk\\\" ON \\\"chk\\\".\\\"name\\\" = \\\"columnUsages\\\".\\\"CONSTRAINT_NAME\\\" \") + (\"WHERE (\" + constraintsCondition + \") AND \\\"tableConstraints\\\".\\\"CONSTRAINT_TYPE\\\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')\");\n            }).join(\" UNION ALL \");\n            foreignKeysSql = dbNames.map(function (dbName) {\n              return \"SELECT \\\"fk\\\".\\\"name\\\" AS \\\"FK_NAME\\\", '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s1\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t1\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" + \"\\\"col1\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"s2\\\".\\\"name\\\" AS \\\"REF_SCHEMA\\\", \\\"t2\\\".\\\"name\\\" AS \\\"REF_TABLE\\\", \\\"col2\\\".\\\"name\\\" AS \\\"REF_COLUMN\\\", \" + \"\\\"fk\\\".\\\"delete_referential_action_desc\\\" AS \\\"ON_DELETE\\\", \\\"fk\\\".\\\"update_referential_action_desc\\\" AS \\\"ON_UPDATE\\\" \" + (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_keys\\\" \\\"fk\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"foreign_key_columns\\\" \\\"fkc\\\" ON \\\"fkc\\\".\\\"constraint_object_id\\\" = \\\"fk\\\".\\\"object_id\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t1\\\" ON \\\"t1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s1\\\" ON \\\"s1\\\".\\\"schema_id\\\" = \\\"t1\\\".\\\"schema_id\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t2\\\" ON \\\"t2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s2\\\" ON \\\"s2\\\".\\\"schema_id\\\" = \\\"t2\\\".\\\"schema_id\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col1\\\" ON \\\"col1\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"parent_column_id\\\" AND \\\"col1\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"parent_object_id\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col2\\\" ON \\\"col2\\\".\\\"column_id\\\" = \\\"fkc\\\".\\\"referenced_column_id\\\" AND \\\"col2\\\".\\\"object_id\\\" = \\\"fk\\\".\\\"referenced_object_id\\\"\");\n            }).join(\" UNION ALL \");\n            identityColumnsSql = dbNames.map(function (dbName) {\n              return \"SELECT \\\"TABLE_CATALOG\\\", \\\"TABLE_SCHEMA\\\", \\\"COLUMN_NAME\\\", \\\"TABLE_NAME\\\" \" + (\"FROM \\\"\" + dbName + \"\\\".\\\"INFORMATION_SCHEMA\\\".\\\"COLUMNS\\\" \") + (\"WHERE COLUMNPROPERTY(object_id(\\\"TABLE_CATALOG\\\" + '.' + \\\"TABLE_SCHEMA\\\" + '.' + \\\"TABLE_NAME\\\"), \\\"COLUMN_NAME\\\", 'IsIdentity') = 1 AND \\\"TABLE_SCHEMA\\\" IN (\" + schemaNamesString + \")\");\n            }).join(\" UNION ALL \");\n            dbCollationsSql = \"SELECT \\\"NAME\\\", \\\"COLLATION_NAME\\\" FROM \\\"sys\\\".\\\"databases\\\"\";\n            indicesSql = dbNames.map(function (dbName) {\n              return \"SELECT '\" + dbName + \"' AS \\\"TABLE_CATALOG\\\", \\\"s\\\".\\\"name\\\" AS \\\"TABLE_SCHEMA\\\", \\\"t\\\".\\\"name\\\" AS \\\"TABLE_NAME\\\", \" + \"\\\"ind\\\".\\\"name\\\" AS \\\"INDEX_NAME\\\", \\\"col\\\".\\\"name\\\" AS \\\"COLUMN_NAME\\\", \\\"ind\\\".\\\"is_unique\\\" AS \\\"IS_UNIQUE\\\", \\\"ind\\\".\\\"filter_definition\\\" as \\\"CONDITION\\\" \" + (\"FROM \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"indexes\\\" \\\"ind\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"index_columns\\\" \\\"ic\\\" ON \\\"ic\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" AND \\\"ic\\\".\\\"index_id\\\" = \\\"ind\\\".\\\"index_id\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"columns\\\" \\\"col\\\" ON \\\"col\\\".\\\"object_id\\\" = \\\"ic\\\".\\\"object_id\\\" AND \\\"col\\\".\\\"column_id\\\" = \\\"ic\\\".\\\"column_id\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"tables\\\" \\\"t\\\" ON \\\"t\\\".\\\"object_id\\\" = \\\"ind\\\".\\\"object_id\\\" \") + (\"INNER JOIN \\\"\" + dbName + \"\\\".\\\"sys\\\".\\\"schemas\\\" \\\"s\\\" ON \\\"s\\\".\\\"schema_id\\\" = \\\"t\\\".\\\"schema_id\\\" \") + \"WHERE \\\"ind\\\".\\\"is_primary_key\\\" = 0 AND \\\"ind\\\".\\\"is_unique_constraint\\\" = 0 AND \\\"t\\\".\\\"is_ms_shipped\\\" = 0\";\n            }).join(\" UNION ALL \");\n            return [4\n            /*yield*/\n            , Promise.all([this.query(tablesSql), this.query(columnsSql), this.query(constraintsSql), this.query(foreignKeysSql), this.query(identityColumnsSql), this.query(dbCollationsSql), this.query(indicesSql)])];\n\n          case 3:\n            _a = __read.apply(void 0, [_b.sent(), 7]), dbTables = _a[0], dbColumns = _a[1], dbConstraints = _a[2], dbForeignKeys = _a[3], dbIdentityColumns = _a[4], dbCollations = _a[5], dbIndices = _a[6]; // if tables were not found in the db, no need to proceed\n\n            if (!dbTables.length) return [2\n            /*return*/\n            , []];\n            return [4\n            /*yield*/\n            , Promise.all(dbTables.map(function (dbTable) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var table, getSchemaFromKey, db, schema, tableFullName, defaultCollation, tableUniqueConstraints, tableCheckConstraints, tableForeignKeyConstraints, tableIndexConstraints;\n\n                var _this = this;\n\n                return __generator(this, function (_a) {\n                  table = new Table();\n\n                  getSchemaFromKey = function (dbObject, key) {\n                    return dbObject[key] === currentSchema && (!_this.driver.options.schema || _this.driver.options.schema === currentSchema) ? undefined : dbObject[key];\n                  };\n\n                  db = dbTable[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbTable[\"TABLE_CATALOG\"];\n                  schema = getSchemaFromKey(dbTable, \"TABLE_SCHEMA\");\n                  table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema, db);\n                  tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"TABLE_SCHEMA\"], dbTable[\"TABLE_CATALOG\"]);\n                  defaultCollation = dbCollations.find(function (dbCollation) {\n                    return dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"];\n                  }); // create columns from the loaded columns\n\n                  table.columns = dbColumns.filter(function (dbColumn) {\n                    return _this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"TABLE_SCHEMA\"], dbColumn[\"TABLE_CATALOG\"]) === tableFullName;\n                  }).map(function (dbColumn) {\n                    var e_4, _a;\n\n                    var columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                      return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n                    var uniqueConstraint = columnConstraints.find(function (constraint) {\n                      return constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n                    });\n                    var isConstraintComposite = uniqueConstraint ? !!dbConstraints.find(function (dbConstraint) {\n                      return dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\" && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"] && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"];\n                    }) : false;\n                    var isPrimary = !!columnConstraints.find(function (constraint) {\n                      return constraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\";\n                    });\n                    var isGenerated = !!dbIdentityColumns.find(function (column) {\n                      return _this.driver.buildTableName(column[\"TABLE_NAME\"], column[\"TABLE_SCHEMA\"], column[\"TABLE_CATALOG\"]) === tableFullName && column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n                    var tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase(); // check only columns that have length property\n\n                    if (_this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                      var length_1 = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n\n                      if (length_1 === \"-1\") {\n                        tableColumn.length = \"MAX\";\n                      } else {\n                        tableColumn.length = !_this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1 : \"\";\n                      }\n                    }\n\n                    if (tableColumn.type === \"decimal\" || tableColumn.type === \"numeric\") {\n                      if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"])) tableColumn.precision = dbColumn[\"NUMERIC_PRECISION\"];\n                      if (dbColumn[\"NUMERIC_SCALE\"] !== null && !_this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"])) tableColumn.scale = dbColumn[\"NUMERIC_SCALE\"];\n                    }\n\n                    if (tableColumn.type === \"nvarchar\") {\n                      // Check if this is an enum\n                      var columnCheckConstraints = columnConstraints.filter(function (constraint) {\n                        return constraint[\"CONSTRAINT_TYPE\"] === \"CHECK\";\n                      });\n\n                      if (columnCheckConstraints.length) {\n                        try {\n                          // const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                          for (var columnCheckConstraints_1 = __values(columnCheckConstraints), columnCheckConstraints_1_1 = columnCheckConstraints_1.next(); !columnCheckConstraints_1_1.done; columnCheckConstraints_1_1 = columnCheckConstraints_1.next()) {\n                            var checkConstraint = columnCheckConstraints_1_1.value;\n\n                            if (_this.isEnumCheckConstraint(checkConstraint[\"CONSTRAINT_NAME\"])) {\n                              // This is an enum constraint, make column into an enum\n                              tableColumn.enum = [];\n                              var enumValueRegexp = new RegExp(\"\\\\[\" + tableColumn.name + \"\\\\]='([^']+)'\", \"g\");\n                              var result = void 0;\n\n                              while ((result = enumValueRegexp.exec(checkConstraint[\"definition\"])) !== null) {\n                                tableColumn.enum.unshift(result[1]);\n                              } // Skip other column constraints\n\n\n                              break;\n                            }\n                          }\n                        } catch (e_4_1) {\n                          e_4 = {\n                            error: e_4_1\n                          };\n                        } finally {\n                          try {\n                            if (columnCheckConstraints_1_1 && !columnCheckConstraints_1_1.done && (_a = columnCheckConstraints_1.return)) _a.call(columnCheckConstraints_1);\n                          } finally {\n                            if (e_4) throw e_4.error;\n                          }\n                        }\n                      }\n                    }\n\n                    tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined ? _this.removeParenthesisFromDefault(dbColumn[\"COLUMN_DEFAULT\"]) : undefined;\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    tableColumn.isPrimary = isPrimary;\n                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                    tableColumn.isGenerated = isGenerated;\n                    if (isGenerated) tableColumn.generationStrategy = \"increment\";\n\n                    if (tableColumn.default === \"newsequentialid()\") {\n                      tableColumn.isGenerated = true;\n                      tableColumn.generationStrategy = \"uuid\";\n                      tableColumn.default = undefined;\n                    } // todo: unable to get default charset\n                    // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n\n\n                    if (dbColumn[\"COLLATION_NAME\"]) tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation[\"COLLATION_NAME\"] ? undefined : dbColumn[\"COLLATION_NAME\"];\n\n                    if (tableColumn.type === \"datetime2\" || tableColumn.type === \"time\" || tableColumn.type === \"datetimeoffset\") {\n                      tableColumn.precision = !_this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATETIME_PRECISION\"]) ? dbColumn[\"DATETIME_PRECISION\"] : undefined;\n                    }\n\n                    return tableColumn;\n                  });\n                  tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                    return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName && dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n                  }), function (dbConstraint) {\n                    return dbConstraint[\"CONSTRAINT_NAME\"];\n                  });\n                  table.uniques = tableUniqueConstraints.map(function (constraint) {\n                    var uniques = dbConstraints.filter(function (dbC) {\n                      return dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"];\n                    });\n                    return new TableUnique({\n                      name: constraint[\"CONSTRAINT_NAME\"],\n                      columnNames: uniques.map(function (u) {\n                        return u[\"COLUMN_NAME\"];\n                      })\n                    });\n                  });\n                  tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                    return _this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName && dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\";\n                  }), function (dbConstraint) {\n                    return dbConstraint[\"CONSTRAINT_NAME\"];\n                  });\n                  table.checks = tableCheckConstraints.filter(function (constraint) {\n                    return !_this.isEnumCheckConstraint(constraint[\"CONSTRAINT_NAME\"]);\n                  }).map(function (constraint) {\n                    var checks = dbConstraints.filter(function (dbC) {\n                      return dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"];\n                    });\n                    return new TableCheck({\n                      name: constraint[\"CONSTRAINT_NAME\"],\n                      columnNames: checks.map(function (c) {\n                        return c[\"COLUMN_NAME\"];\n                      }),\n                      expression: constraint[\"definition\"]\n                    });\n                  });\n                  tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(function (dbForeignKey) {\n                    return _this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"TABLE_SCHEMA\"], dbForeignKey[\"TABLE_CATALOG\"]) === tableFullName;\n                  }), function (dbForeignKey) {\n                    return dbForeignKey[\"FK_NAME\"];\n                  });\n                  table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {\n                    var foreignKeys = dbForeignKeys.filter(function (dbFk) {\n                      return dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"];\n                    }); // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n\n                    var db = dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbForeignKey[\"TABLE_CATALOG\"];\n                    var schema = getSchemaFromKey(dbTable, \"REF_SCHEMA\");\n\n                    var referencedTableName = _this.driver.buildTableName(dbForeignKey[\"REF_TABLE\"], schema, db);\n\n                    return new TableForeignKey({\n                      name: dbForeignKey[\"FK_NAME\"],\n                      columnNames: foreignKeys.map(function (dbFk) {\n                        return dbFk[\"COLUMN_NAME\"];\n                      }),\n                      referencedTableName: referencedTableName,\n                      referencedColumnNames: foreignKeys.map(function (dbFk) {\n                        return dbFk[\"REF_COLUMN\"];\n                      }),\n                      onDelete: dbForeignKey[\"ON_DELETE\"].replace(\"_\", \" \"),\n                      onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\"_\", \" \") // SqlServer returns NO_ACTION, instead of NO ACTION\n\n                    });\n                  });\n                  tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(function (dbIndex) {\n                    return _this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"TABLE_SCHEMA\"], dbIndex[\"TABLE_CATALOG\"]) === tableFullName;\n                  }), function (dbIndex) {\n                    return dbIndex[\"INDEX_NAME\"];\n                  });\n                  table.indices = tableIndexConstraints.map(function (constraint) {\n                    var indices = dbIndices.filter(function (index) {\n                      return index[\"TABLE_CATALOG\"] === constraint[\"TABLE_CATALOG\"] && index[\"TABLE_SCHEMA\"] === constraint[\"TABLE_SCHEMA\"] && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"] && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                    });\n                    return new TableIndex({\n                      table: table,\n                      name: constraint[\"INDEX_NAME\"],\n                      columnNames: indices.map(function (i) {\n                        return i[\"COLUMN_NAME\"];\n                      }),\n                      isUnique: constraint[\"IS_UNIQUE\"],\n                      where: constraint[\"CONDITION\"]\n                    });\n                  });\n                  return [2\n                  /*return*/\n                  , table];\n                });\n              });\n            }))];\n\n          case 4:\n            // create table schemas for loaded tables\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Builds and returns SQL for create table.\n   */\n\n\n  SqlServerQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {\n    var _this = this;\n\n    var columnDefinitions = table.columns.map(function (column) {\n      return _this.buildCreateColumnSql(table, column, false, true);\n    }).join(\", \");\n    var sql = \"CREATE TABLE \" + this.escapePath(table) + \" (\" + columnDefinitions;\n    table.columns.filter(function (column) {\n      return column.isUnique;\n    }).forEach(function (column) {\n      var isUniqueExist = table.uniques.some(function (unique) {\n        return unique.columnNames.length === 1 && unique.columnNames[0] === column.name;\n      });\n      if (!isUniqueExist) table.uniques.push(new TableUnique({\n        name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n        columnNames: [column.name]\n      }));\n    });\n\n    if (table.uniques.length > 0) {\n      var uniquesSql = table.uniques.map(function (unique) {\n        var uniqueName = unique.name ? unique.name : _this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n        var columnNames = unique.columnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        return \"CONSTRAINT \\\"\" + uniqueName + \"\\\" UNIQUE (\" + columnNames + \")\";\n      }).join(\", \");\n      sql += \", \" + uniquesSql;\n    }\n\n    if (table.checks.length > 0) {\n      var checksSql = table.checks.map(function (check) {\n        var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);\n        return \"CONSTRAINT \\\"\" + checkName + \"\\\" CHECK (\" + check.expression + \")\";\n      }).join(\", \");\n      sql += \", \" + checksSql;\n    }\n\n    if (table.foreignKeys.length > 0 && createForeignKeys) {\n      var foreignKeysSql = table.foreignKeys.map(function (fk) {\n        var columnNames = fk.columnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        if (!fk.name) fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n        var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        var constraint = \"CONSTRAINT \\\"\" + fk.name + \"\\\" FOREIGN KEY (\" + columnNames + \") REFERENCES \" + _this.escapePath(fk.referencedTableName) + \" (\" + referencedColumnNames + \")\";\n        if (fk.onDelete) constraint += \" ON DELETE \" + fk.onDelete;\n        if (fk.onUpdate) constraint += \" ON UPDATE \" + fk.onUpdate;\n        return constraint;\n      }).join(\", \");\n      sql += \", \" + foreignKeysSql;\n    }\n\n    var primaryColumns = table.columns.filter(function (column) {\n      return column.isPrimary;\n    });\n\n    if (primaryColumns.length > 0) {\n      var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(function (column) {\n        return column.name;\n      }));\n      var columnNames = primaryColumns.map(function (column) {\n        return \"\\\"\" + column.name + \"\\\"\";\n      }).join(\", \");\n      sql += \", CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNames + \")\";\n    }\n\n    sql += \")\";\n    return new Query(sql);\n  };\n  /**\n   * Builds drop table sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropTableSql = function (tableOrName, ifExist) {\n    var query = ifExist ? \"DROP TABLE IF EXISTS \" + this.escapePath(tableOrName) : \"DROP TABLE \" + this.escapePath(tableOrName);\n    return new Query(query);\n  };\n\n  SqlServerQueryRunner.prototype.createViewSql = function (view) {\n    if (typeof view.expression === \"string\") {\n      return new Query(\"CREATE VIEW \" + this.escapePath(view) + \" AS \" + view.expression);\n    } else {\n      return new Query(\"CREATE VIEW \" + this.escapePath(view) + \" AS \" + view.expression(this.connection).getQuery());\n    }\n  };\n\n  SqlServerQueryRunner.prototype.insertViewDefinitionSql = function (view) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, parsedTableName, expression, _a, query, parameters;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            parsedTableName = this.parseTableName(view, currentSchema);\n            expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n            _a = __read(this.connection.createQueryBuilder().insert().into(this.getTypeormMetadataTableName()).values({\n              type: \"VIEW\",\n              database: parsedTableName.database,\n              schema: parsedTableName.schema,\n              name: parsedTableName.name,\n              value: expression\n            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n            return [2\n            /*return*/\n            , new Query(query, parameters)];\n        }\n      });\n    });\n  };\n  /**\n   * Builds drop view sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropViewSql = function (viewOrPath) {\n    return new Query(\"DROP VIEW \" + this.escapePath(viewOrPath));\n  };\n  /**\n   * Builds remove view sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.deleteViewDefinitionSql = function (viewOrPath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, parsedTableName, qb, _a, query, parameters;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            parsedTableName = this.parseTableName(viewOrPath, currentSchema);\n            qb = this.connection.createQueryBuilder();\n            _a = __read(qb.delete().from(this.getTypeormMetadataTableName()).where(qb.escape(\"type\") + \" = 'VIEW'\").andWhere(qb.escape(\"database\") + \" = :database\", {\n              database: parsedTableName.database\n            }).andWhere(qb.escape(\"schema\") + \" = :schema\", {\n              schema: parsedTableName.schema\n            }).andWhere(qb.escape(\"name\") + \" = :name\", {\n              name: parsedTableName.name\n            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n            return [2\n            /*return*/\n            , new Query(query, parameters)];\n        }\n      });\n    });\n  };\n  /**\n   * Builds create index sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.createIndexSql = function (table, index) {\n    var columns = index.columnNames.map(function (columnName) {\n      return \"\\\"\" + columnName + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"CREATE \" + (index.isUnique ? \"UNIQUE \" : \"\") + \"INDEX \\\"\" + index.name + \"\\\" ON \" + this.escapePath(table) + \" (\" + columns + \") \" + (index.where ? \"WHERE \" + index.where : \"\"));\n  };\n  /**\n   * Builds drop index sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropIndexSql = function (table, indexOrName) {\n    var indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n    return new Query(\"DROP INDEX \\\"\" + indexName + \"\\\" ON \" + this.escapePath(table));\n  };\n  /**\n   * Builds create primary key sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {\n    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n    var columnNamesString = columnNames.map(function (columnName) {\n      return \"\\\"\" + columnName + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\");\n  };\n  /**\n   * Builds drop primary key sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropPrimaryKeySql = function (table) {\n    var columnNames = table.primaryColumns.map(function (column) {\n      return column.name;\n    });\n    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + primaryKeyName + \"\\\"\");\n  };\n  /**\n   * Builds create unique constraint sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.createUniqueConstraintSql = function (table, uniqueConstraint) {\n    var columnNames = uniqueConstraint.columnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\" + columnNames + \")\");\n  };\n  /**\n   * Builds drop unique constraint sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropUniqueConstraintSql = function (table, uniqueOrName) {\n    var uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + uniqueName + \"\\\"\");\n  };\n  /**\n   * Builds create check constraint sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.createCheckConstraintSql = function (table, checkConstraint) {\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + checkConstraint.name + \"\\\" CHECK (\" + checkConstraint.expression + \")\");\n  };\n  /**\n   * Builds drop check constraint sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropCheckConstraintSql = function (table, checkOrName) {\n    var checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + checkName + \"\\\"\");\n  };\n  /**\n   * Builds create foreign key sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.createForeignKeySql = function (table, foreignKey) {\n    var columnNames = foreignKey.columnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\", \");\n    var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\",\");\n    var sql = \"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + foreignKey.name + \"\\\" FOREIGN KEY (\" + columnNames + \") \" + (\"REFERENCES \" + this.escapePath(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n    if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n    if (foreignKey.onUpdate) sql += \" ON UPDATE \" + foreignKey.onUpdate;\n    return new Query(sql);\n  };\n  /**\n   * Builds drop foreign key sql.\n   */\n\n\n  SqlServerQueryRunner.prototype.dropForeignKeySql = function (table, foreignKeyOrName) {\n    var foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + foreignKeyName + \"\\\"\");\n  };\n  /**\n   * Escapes given table or View path.\n   */\n\n\n  SqlServerQueryRunner.prototype.escapePath = function (target, disableEscape) {\n    var name = target instanceof Table || target instanceof View ? target.name : target;\n\n    if (this.driver.options.schema) {\n      if (name.indexOf(\".\") === -1) {\n        name = this.driver.options.schema + \".\" + name;\n      } else if (name.split(\".\").length === 3) {\n        var splittedName = name.split(\".\");\n        var dbName = splittedName[0];\n        var tableName = splittedName[2];\n        name = dbName + \".\" + this.driver.options.schema + \".\" + tableName;\n      }\n    }\n\n    return name.split(\".\").map(function (i) {\n      // this condition need because when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n      if (i === \"\") return i;\n      return disableEscape ? i : \"\\\"\" + i + \"\\\"\";\n    }).join(\".\");\n  };\n\n  SqlServerQueryRunner.prototype.parseTableName = function (target, schema) {\n    var tableName = target instanceof Table || target instanceof View ? target.name : target;\n\n    if (tableName.split(\".\").length === 3) {\n      return {\n        database: tableName.split(\".\")[0],\n        schema: tableName.split(\".\")[1] === \"\" ? schema || \"SCHEMA_NAME()\" : tableName.split(\".\")[1],\n        name: tableName.split(\".\")[2]\n      };\n    } else if (tableName.split(\".\").length === 2) {\n      return {\n        database: this.driver.database,\n        schema: tableName.split(\".\")[0],\n        name: tableName.split(\".\")[1]\n      };\n    } else {\n      return {\n        database: this.driver.database,\n        schema: this.driver.options.schema ? this.driver.options.schema : schema || \"SCHEMA_NAME()\",\n        name: tableName\n      };\n    }\n  };\n  /**\n   * Concat database name and schema name to the foreign key name.\n   * Needs because FK name is relevant to the schema and database.\n   */\n\n\n  SqlServerQueryRunner.prototype.buildForeignKeyName = function (fkName, schemaName, dbName) {\n    var joinedFkName = fkName;\n    if (schemaName) joinedFkName = schemaName + \".\" + joinedFkName;\n    if (dbName) joinedFkName = dbName + \".\" + joinedFkName;\n    return joinedFkName;\n  };\n  /**\n   * Removes parenthesis around default value.\n   * Sql server returns default value with parenthesis around, e.g.\n   *  ('My text') - for string\n   *  ((1)) - for number\n   *  (newsequentialId()) - for function\n   */\n\n\n  SqlServerQueryRunner.prototype.removeParenthesisFromDefault = function (defaultValue) {\n    if (defaultValue.substr(0, 1) !== \"(\") return defaultValue;\n    var normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n    return this.removeParenthesisFromDefault(normalizedDefault);\n  };\n  /**\n   * Builds a query for create column.\n   */\n\n\n  SqlServerQueryRunner.prototype.buildCreateColumnSql = function (table, column, skipIdentity, createDefault) {\n    var c = \"\\\"\" + column.name + \"\\\" \" + this.connection.driver.createFullType(column);\n\n    if (column.enum) {\n      var expression = column.name + \" IN (\" + column.enum.map(function (val) {\n        return \"'\" + val + \"'\";\n      }).join(\",\") + \")\";\n      var checkName = this.connection.namingStrategy.checkConstraintName(table, expression, true);\n      c += \" CONSTRAINT \" + checkName + \" CHECK(\" + expression + \")\";\n    }\n\n    if (column.collation) c += \" COLLATE \" + column.collation;\n    if (column.isNullable !== true) c += \" NOT NULL\";\n    if (column.isGenerated === true && column.generationStrategy === \"increment\" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n      c += \" IDENTITY(1,1)\";\n\n    if (column.default !== undefined && column.default !== null && createDefault) {\n      // we create named constraint to be able to delete this constraint when column been dropped\n      var defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n      c += \" CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT \" + column.default;\n    }\n\n    if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default) {\n      // we create named constraint to be able to delete this constraint when column been dropped\n      var defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n      c += \" CONSTRAINT \\\"\" + defaultName + \"\\\" DEFAULT NEWSEQUENTIALID()\";\n    }\n\n    return c;\n  };\n\n  SqlServerQueryRunner.prototype.isEnumCheckConstraint = function (name) {\n    return name.indexOf(\"CHK_\") !== -1 && name.indexOf(\"_ENUM\") !== -1;\n  };\n  /**\n   * Converts MssqlParameter into real mssql parameter type.\n   */\n\n\n  SqlServerQueryRunner.prototype.mssqlParameterToNativeParameter = function (parameter) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n\n    switch (this.driver.normalizeType({\n      type: parameter.type\n    })) {\n      case \"bit\":\n        return this.driver.mssql.Bit;\n\n      case \"bigint\":\n        return this.driver.mssql.BigInt;\n\n      case \"decimal\":\n        return (_a = this.driver.mssql).Decimal.apply(_a, __spreadArray([], __read(parameter.params)));\n\n      case \"float\":\n        return this.driver.mssql.Float;\n\n      case \"int\":\n        return this.driver.mssql.Int;\n\n      case \"money\":\n        return this.driver.mssql.Money;\n\n      case \"numeric\":\n        return (_b = this.driver.mssql).Numeric.apply(_b, __spreadArray([], __read(parameter.params)));\n\n      case \"smallint\":\n        return this.driver.mssql.SmallInt;\n\n      case \"smallmoney\":\n        return this.driver.mssql.SmallMoney;\n\n      case \"real\":\n        return this.driver.mssql.Real;\n\n      case \"tinyint\":\n        return this.driver.mssql.TinyInt;\n\n      case \"char\":\n        return (_c = this.driver.mssql).Char.apply(_c, __spreadArray([], __read(parameter.params)));\n\n      case \"nchar\":\n        return (_d = this.driver.mssql).NChar.apply(_d, __spreadArray([], __read(parameter.params)));\n\n      case \"text\":\n        return this.driver.mssql.Text;\n\n      case \"ntext\":\n        return this.driver.mssql.Ntext;\n\n      case \"varchar\":\n        return (_e = this.driver.mssql).VarChar.apply(_e, __spreadArray([], __read(parameter.params)));\n\n      case \"nvarchar\":\n        return (_f = this.driver.mssql).NVarChar.apply(_f, __spreadArray([], __read(parameter.params)));\n\n      case \"xml\":\n        return this.driver.mssql.Xml;\n\n      case \"time\":\n        return (_g = this.driver.mssql).Time.apply(_g, __spreadArray([], __read(parameter.params)));\n\n      case \"date\":\n        return this.driver.mssql.Date;\n\n      case \"datetime\":\n        return this.driver.mssql.DateTime;\n\n      case \"datetime2\":\n        return (_h = this.driver.mssql).DateTime2.apply(_h, __spreadArray([], __read(parameter.params)));\n\n      case \"datetimeoffset\":\n        return (_j = this.driver.mssql).DateTimeOffset.apply(_j, __spreadArray([], __read(parameter.params)));\n\n      case \"smalldatetime\":\n        return this.driver.mssql.SmallDateTime;\n\n      case \"uniqueidentifier\":\n        return this.driver.mssql.UniqueIdentifier;\n\n      case \"variant\":\n        return this.driver.mssql.Variant;\n\n      case \"binary\":\n        return this.driver.mssql.Binary;\n\n      case \"varbinary\":\n        return (_k = this.driver.mssql).VarBinary.apply(_k, __spreadArray([], __read(parameter.params)));\n\n      case \"image\":\n        return this.driver.mssql.Image;\n\n      case \"udt\":\n        return this.driver.mssql.UDT;\n\n      case \"rowversion\":\n        return this.driver.mssql.RowVersion;\n    }\n  };\n  /**\n   * Converts string literal of isolation level to enum.\n   * The underlying mssql driver requires an enum for the isolation level.\n   */\n\n\n  SqlServerQueryRunner.prototype.convertIsolationLevel = function (isolation) {\n    var ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL;\n\n    switch (isolation) {\n      case \"READ UNCOMMITTED\":\n        return ISOLATION_LEVEL.READ_UNCOMMITTED;\n\n      case \"REPEATABLE READ\":\n        return ISOLATION_LEVEL.REPEATABLE_READ;\n\n      case \"SERIALIZABLE\":\n        return ISOLATION_LEVEL.SERIALIZABLE;\n\n      case \"READ COMMITTED\":\n      default:\n        return ISOLATION_LEVEL.READ_COMMITTED;\n    }\n  };\n\n  return SqlServerQueryRunner;\n}(BaseQueryRunner);\n\nexport { SqlServerQueryRunner };","map":{"version":3,"sources":["../browser/src/driver/sqlserver/SqlServerQueryRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnType} from \"../../index\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {MssqlParameter} from \"./MssqlParameter\";\nimport {SqlServerDriver} from \"./SqlServerDriver\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n/**\n * Runs queries on a single SQL Server database connection.\n */\nexport class SqlServerQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: SqlServerDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Last executed query in a transaction.\n     * This is needed because in transaction mode mssql cannot execute parallel queries,\n     * that's why we store last executed query promise to wait it when we execute next query.\n     *\n     * @see https://github.com/patriksimek/node-mssql/issues/491\n     */\n    protected queryResponsibilityChain: Promise<any>[] = [];\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: SqlServerDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        this.isReleased = true;\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        return new Promise<void>(async (ok, fail) => {\n            this.isTransactionActive = true;\n\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n            this.databaseConnection = pool.transaction();\n\n            const transactionCallback = (err: any) => {\n                if (err) {\n                    this.isTransactionActive = false;\n                    return fail(err);\n                }\n                ok();\n                this.connection.logger.logQuery(\"BEGIN TRANSACTION\");\n                if (isolationLevel) {\n                    this.connection.logger.logQuery(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n                }\n            };\n\n            if (isolationLevel) {\n                this.databaseConnection.begin(this.convertIsolationLevel(isolationLevel), transactionCallback);\n            } else {\n                this.databaseConnection.begin(transactionCallback);\n            }\n\n            const afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n            if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n        });\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        return new Promise<void>((ok, fail) => {\n            this.databaseConnection.commit(async (err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n\n                const afterBroadcastResult = new BroadcasterResult();\n                this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n                if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n\n                ok();\n                this.connection.logger.logQuery(\"COMMIT\");\n            });\n        });\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        return new Promise<void>( (ok, fail) => {\n            this.databaseConnection.rollback(async (err: any) => {\n                if (err) return fail(err);\n                this.isTransactionActive = false;\n                this.databaseConnection = null;\n\n                const afterBroadcastResult = new BroadcasterResult();\n                this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n                if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n\n                ok();\n                this.connection.logger.logQuery(\"ROLLBACK\");\n            });\n        });\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise(async (ok, fail) => {\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n                const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n                if (parameters && parameters.length) {\n                    parameters.forEach((parameter, index) => {\n                        const parameterName = index.toString();\n                        if (parameter instanceof MssqlParameter) {\n                            const mssqlParameter = this.mssqlParameterToNativeParameter(parameter);\n                            if (mssqlParameter) {\n                                request.input(parameterName, mssqlParameter, parameter.value);\n                            } else {\n                                request.input(parameterName, parameter.value);\n                            }\n                        } else {\n                            request.input(parameterName, parameter);\n                        }\n                    });\n                }\n                const queryStartTime = +new Date();\n                request.query(query, (err: any, result: any) => {\n\n                    // log slow queries if maxQueryExecution time is set\n                    const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n                    const queryEndTime = +new Date();\n                    const queryExecutionTime = queryEndTime - queryStartTime;\n                    if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                        this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                    const resolveChain = () => {\n                        if (promiseIndex !== -1)\n                            this.queryResponsibilityChain.splice(promiseIndex, 1);\n                        if (waitingPromiseIndex !== -1)\n                            this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                        waitingOkay();\n                    };\n\n                    let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                    let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                    if (err) {\n                        this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                        resolveChain();\n                        return fail(new QueryFailedError(query, parameters, err));\n                    }\n\n                    const queryType = query.slice(0, query.indexOf(\" \"));\n                    switch (queryType) {\n                        case \"DELETE\":\n                            // for DELETE query additionally return number of affected rows\n                            ok([result.recordset, result.rowsAffected[0]]);\n                            break;\n                        default:\n                            ok(result.recordset);\n                    }\n                    resolveChain();\n                });\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n        // with this condition, Promise.all causes unexpected behavior.\n        // if (this.isTransactionActive)\n        this.queryResponsibilityChain.push(promise);\n        return promise;\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    async stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        let waitingOkay: Function;\n        const waitingPromise = new Promise((ok) => waitingOkay = ok);\n        if (this.queryResponsibilityChain.length) {\n            const otherWaitingPromises = [...this.queryResponsibilityChain];\n            this.queryResponsibilityChain.push(waitingPromise);\n            await Promise.all(otherWaitingPromises);\n        }\n\n        const promise = new Promise<ReadStream>(async (ok, fail) => {\n\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const pool = await (this.mode === \"slave\" ? this.driver.obtainSlaveConnection() : this.driver.obtainMasterConnection());\n            const request = new this.driver.mssql.Request(this.isTransactionActive ? this.databaseConnection : pool);\n            request.stream = true;\n            if (parameters && parameters.length) {\n                parameters.forEach((parameter, index) => {\n                    const parameterName = index.toString();\n                    if (parameter instanceof MssqlParameter) {\n                        request.input(parameterName, this.mssqlParameterToNativeParameter(parameter), parameter.value);\n                    } else {\n                        request.input(parameterName, parameter);\n                    }\n                });\n            }\n            request.query(query, (err: any, result: any) => {\n\n                const resolveChain = () => {\n                    if (promiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(promiseIndex, 1);\n                    if (waitingPromiseIndex !== -1)\n                        this.queryResponsibilityChain.splice(waitingPromiseIndex, 1);\n                    waitingOkay();\n                };\n\n                let promiseIndex = this.queryResponsibilityChain.indexOf(promise);\n                let waitingPromiseIndex = this.queryResponsibilityChain.indexOf(waitingPromise);\n                if (err) {\n                    this.driver.connection.logger.logQueryError(err, query, parameters, this);\n                    resolveChain();\n                    return fail(err);\n                }\n\n                ok(result.recordset);\n                resolveChain();\n            });\n            if (onEnd) request.on(\"done\", onEnd);\n            if (onError) request.on(\"error\", onError);\n            ok(request as ReadStream);\n        });\n        if (this.isTransactionActive)\n            this.queryResponsibilityChain.push(promise);\n\n        return promise;\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        const results: ObjectLiteral[] = await this.query(`EXEC sp_databases`);\n        return results.map(result => result[\"DATABASE_NAME\"]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        const query = database ? `SELECT * FROM \"${database}\".\"sys\".\"schema\"` : `SELECT * FROM \"sys\".\"schemas\"`;\n        const results: ObjectLiteral[] = await this.query(query);\n        return results.map(result => result[\"name\"]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(`SELECT DB_ID('${database}') as \"db_id\"`);\n        const dbId = result[0][\"db_id\"];\n        return !!dbId;\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const currentDBQuery = await this.query(`SELECT DB_NAME() AS \"db_name\"`);\n        return currentDBQuery[0][\"db_name\"];\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(`SELECT SCHEMA_ID('${schema}') as \"schema_id\"`);\n        const schemaId = result[0][\"schema_id\"];\n        return !!schemaId;\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const currentSchemaQuery = await this.query(`SELECT SCHEMA_NAME() AS \"schema_name\"`);\n        return currentSchemaQuery[0][\"schema_name\"];\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : `'${parsedTableName.schema}'`;\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_NAME\" = '${parsedTableName.name}' AND \"TABLE_SCHEMA\" = ${schema}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column exist in the table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const schema = parsedTableName.schema === \"SCHEMA_NAME()\" ? parsedTableName.schema : `'${parsedTableName.schema}'`;\n        const sql = `SELECT * FROM \"${parsedTableName.database}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE \"TABLE_NAME\" = '${parsedTableName.name}' AND \"COLUMN_NAME\" = '${columnName}' AND \"TABLE_SCHEMA\" = ${schema}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        const up = ifNotExist ? `IF DB_ID('${database}') IS NULL CREATE DATABASE \"${database}\"` : `CREATE DATABASE \"${database}\"`;\n        const down = `DROP DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist ? `IF DB_ID('${database}') IS NOT NULL DROP DATABASE \"${database}\"` : `DROP DATABASE \"${database}\"`;\n        const down = `CREATE DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be created in specified database.\n     */\n    async createSchema(schemaPath: string, ifNotExist?: boolean): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schemaPath}\"') END` : `CREATE SCHEMA \"${schemaPath}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`DROP SCHEMA \"${schemaPath}\"`));\n\n        } else {\n            const dbName = schemaPath.split(\".\")[0];\n            const schema = schemaPath.split(\".\")[1];\n            const currentDB = await this.getCurrentDatabase();\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n\n            const upQuery = ifNotExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('CREATE SCHEMA \"${schema}\"') END` : `CREATE SCHEMA \"${schema}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`DROP SCHEMA \"${schema}\"`));\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops table schema.\n     * If database name also specified (e.g. 'dbName.schemaName') schema will be dropped in specified database.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (schemaPath.indexOf(\".\") === -1) {\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schemaPath}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schemaPath}\"') END` : `DROP SCHEMA \"${schemaPath}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`CREATE SCHEMA \"${schemaPath}\"`));\n\n        } else {\n            const dbName = schemaPath.split(\".\")[0];\n            const schema = schemaPath.split(\".\")[1];\n            const currentDB = await this.getCurrentDatabase();\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n\n            const upQuery = ifExist ? `IF SCHEMA_ID('${schema}') IS NULL BEGIN EXEC ('DROP SCHEMA \"${schema}\"') END` : `DROP SCHEMA \"${schema}\"`;\n            upQueries.push(new Query(upQuery));\n            downQueries.push(new Query(`CREATE SCHEMA \"${schema}\"`));\n\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(tableOrName: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames a table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        let newTable = oldTable.clone();\n\n        // we need database name and schema name to rename FK constraints\n        let dbName: string|undefined = undefined;\n        let schemaName: string|undefined = undefined;\n        let oldTableName: string = oldTable.name;\n        const splittedName = oldTable.name.split(\".\");\n        if (splittedName.length === 3) {\n            dbName = splittedName[0];\n            oldTableName = splittedName[2];\n            if (splittedName[1] !== \"\")\n                schemaName = splittedName[1];\n\n        } else if (splittedName.length === 2) {\n            schemaName = splittedName[0];\n            oldTableName = splittedName[1];\n        }\n\n        newTable.name = this.driver.buildTableName(newTableName, schemaName, dbName);\n\n        // if we have tables with database which differs from database specified in config, we must change currently used database.\n        // This need because we can not rename objects from another database.\n        const currentDB = await this.getCurrentDatabase();\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${dbName}\"`));\n            downQueries.push(new Query(`USE \"${currentDB}\"`));\n        }\n\n        // rename table\n        upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(oldTable, true)}\", \"${newTableName}\"`));\n        downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}\", \"${oldTableName}\"`));\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            // rename primary constraint\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${oldPkName}\", \"${newPkName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newPkName}\", \"${oldPkName}\"`));\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${unique.name}\", \"${newUniqueName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newUniqueName}\", \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(newTable, true)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // build queries\n            upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        // change currently used database back to default db.\n        if (dbName && dbName !== currentDB) {\n            upQueries.push(new Query(`USE \"${currentDB}\"`));\n            downQueries.push(new Query(`USE \"${dbName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, true)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n               name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n               columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n\n        // remove default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn: TableColumn|undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if ((newColumn.isGenerated !== oldColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") || newColumn.type !== oldColumn.type || newColumn.length !== oldColumn.length) {\n            // SQL Server does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n\n                // we need database name and schema name to rename FK constraints\n                let dbName: string|undefined = undefined;\n                let schemaName: string|undefined = undefined;\n                const splittedName = table.name.split(\".\");\n                if (splittedName.length === 3) {\n                    dbName = splittedName[0];\n                    if (splittedName[1] !== \"\")\n                        schemaName = splittedName[1];\n\n                } else if (splittedName.length === 2) {\n                    schemaName = splittedName[0];\n                }\n\n                // if we have tables with database which differs from database specified in config, we must change currently used database.\n                // This need because we can not rename objects from another database.\n                const currentDB = await this.getCurrentDatabase();\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${dbName}\"`));\n                    downQueries.push(new Query(`USE \"${currentDB}\"`));\n                }\n\n                // rename the column\n                upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(table, true)}.${oldColumn.name}\", \"${newColumn.name}\"`));\n                downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(table, true)}.${newColumn.name}\", \"${oldColumn.name}\"`));\n\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // rename primary constraint\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${oldPkName}\", \"${newPkName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newPkName}\", \"${oldPkName}\"`));\n                }\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${index.name}\", \"${newIndexName}\", \"INDEX\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newIndexName}\", \"${index.name}\", \"INDEX\"`));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(foreignKey.name!, schemaName, dbName)}\", \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.buildForeignKeyName(newForeignKeyName, schemaName, dbName)}\", \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename check constraints\n                clonedTable.findColumnChecks(oldColumn).forEach(check => {\n                    // build new constraint name\n                    check.columnNames!.splice(check.columnNames!.indexOf(oldColumn.name), 1);\n                    check.columnNames!.push(newColumn.name);\n                    const newCheckName = this.connection.namingStrategy.checkConstraintName(clonedTable, check.expression!);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${check.name}\", \"${newCheckName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newCheckName}\", \"${check.name}\"`));\n\n                    // replace constraint name\n                    check.name = newCheckName;\n                });\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${unique.name}\", \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`EXEC sp_rename \"${this.escapePath(clonedTable, true)}.${newUniqueName}\", \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename default constraints\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    const oldDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                    const newDefaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${oldDefaultName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${oldDefaultName}\" DEFAULT ${oldColumn.default} FOR \"${newColumn.name}\"`));\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${newDefaultName}\" DEFAULT ${oldColumn.default} FOR \"${newColumn.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${newDefaultName}\"`));\n                }\n\n                // change currently used database back to default db.\n                if (dbName && dbName !== currentDB) {\n                    upQueries.push(new Query(`USE \"${currentDB}\"`));\n                    downQueries.push(new Query(`USE \"${dbName}\"`));\n                }\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, false)) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, newColumn, true, false)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN ${this.buildCreateColumnSql(table, oldColumn, true, false)}`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n\n            if (newColumn.default !== oldColumn.default) {\n\n                // (note) if there is a previous default, we need to drop its constraint first\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, oldColumn.name);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${oldColumn.default} FOR \"${oldColumn.name}\"`));\n                }\n\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, newColumn.name);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${newColumn.default} FOR \"${newColumn.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        // drop default constraint\n        if (column.default !== null && column.default !== undefined) {\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${defaultName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${defaultName}\" DEFAULT ${column.default} FOR \"${column.name}\"`));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column, false, false)}`));\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.createUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Drops an unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        const promises = uniqueConstraints.map(uniqueConstraint => this.dropUniqueConstraint(tableOrName, uniqueConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates a new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        throw new Error(`SqlServer does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const metadata = this.connection.hasMetadata(table.name) ? this.connection.getMetadata(table.name) : undefined;\n\n        if (metadata && metadata.treeParentRelation && metadata.treeParentRelation!.isTreeParent && metadata.foreignKeys.find(foreignKey => foreignKey.onDelete !== \"NO ACTION\"))\n            throw new Error(\"SqlServer does not support options in TreeParent.\");\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.createForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        const promises = foreignKeys.map(foreignKey => this.dropForeignKey(tableOrName, foreignKey));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.createIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        const promises = indices.map(index => this.dropIndex(tableOrName, index));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tablePath: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tablePath)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(database?: string): Promise<void> {\n        if (database) {\n            const isDatabaseExist = await this.hasDatabase(database);\n            if (!isDatabaseExist)\n                return Promise.resolve();\n        }\n\n        await this.startTransaction();\n        try {\n            let allViewsSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"VIEWS\"`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"VIEWS\"`;\n            const allViewsResults: ObjectLiteral[] = await this.query(allViewsSql);\n\n            await Promise.all(allViewsResults.map(viewResult => {\n                // 'DROP VIEW' does not allow specifying the database name as a prefix to the object name.\n                const dropTableSql = `DROP VIEW \"${viewResult[\"TABLE_SCHEMA\"]}\".\"${viewResult[\"TABLE_NAME\"]}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            let allTablesSql = database\n                ? `SELECT * FROM \"${database}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`\n                : `SELECT * FROM \"INFORMATION_SCHEMA\".\"TABLES\" WHERE \"TABLE_TYPE\" = 'BASE TABLE'`;\n            const allTablesResults: ObjectLiteral[] = await this.query(allTablesSql);\n            await Promise.all(allTablesResults.map(async tablesResult => {\n                // const tableName = database ? `\"${tablesResult[\"TABLE_CATALOG\"]}\".\"sys\".\"foreign_keys\"` : `\"sys\".\"foreign_keys\"`;\n                const dropForeignKeySql = `SELECT 'ALTER TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"' + OBJECT_SCHEMA_NAME(\"fk\".\"parent_object_id\", DB_ID('${tablesResult[\"TABLE_CATALOG\"]}')) + '\".\"' + OBJECT_NAME(\"fk\".\"parent_object_id\", DB_ID('${tablesResult[\"TABLE_CATALOG\"]}')) + '\" ` +\n                    `DROP CONSTRAINT \"' + \"fk\".\"name\" + '\"' as \"query\" FROM \"${tablesResult[\"TABLE_CATALOG\"]}\".\"sys\".\"foreign_keys\" AS \"fk\" ` +\n                    `WHERE \"fk\".\"referenced_object_id\" = OBJECT_ID('\"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"')`;\n                const dropFkQueries: ObjectLiteral[] = await this.query(dropForeignKeySql);\n                return Promise.all(dropFkQueries.map(result => result[\"query\"]).map(dropQuery => this.query(dropQuery)));\n            }));\n            await Promise.all(allTablesResults.map(tablesResult => {\n                if (tablesResult[\"TABLE_NAME\"].startsWith(\"#\")) {\n                    // don't try to drop temporary tables\n                    return;\n                }\n\n                const dropTableSql = `DROP TABLE \"${tablesResult[\"TABLE_CATALOG\"]}\".\"${tablesResult[\"TABLE_SCHEMA\"]}\".\"${tablesResult[\"TABLE_NAME\"]}\"`;\n                return this.query(dropTableSql);\n            }));\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewPaths: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n\n        const extractTableSchemaAndName = (tableName: string): string[] => {\n            let [database, schema, name] = tableName.split(\".\");\n            // if name is empty, it means that tableName have only schema name and table name or only table name\n            if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                    name = database;\n                    schema = this.driver.options.schema || currentSchema;\n\n                } else {\n                    name = schema;\n                    schema = database;\n                }\n            } else if (schema === \"\") {\n                schema = this.driver.options.schema || currentSchema;\n            }\n\n            return [schema, name];\n        };\n\n        const dbNames = viewPaths\n            .filter(viewPath => viewPath.split(\".\").length === 3)\n            .map(viewPath => viewPath.split(\".\")[0]);\n\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\n            dbNames.push(this.driver.database);\n\n        const viewsCondition = viewPaths.map(viewPath => {\n            const [schema, name] = extractTableSchemaAndName(viewPath);\n            return `(\"T\".\"SCHEMA\" = '${schema}' AND \"T\".\"NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = dbNames.map(dbName => {\n            return `SELECT \"T\".*, \"V\".\"CHECK_OPTION\" FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\n                `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"VIEWS\" \"V\" ON \"V\".\"TABLE_SCHEMA\" = \"T\".\"SCHEMA\" AND \"v\".\"TABLE_NAME\" = \"T\".\"NAME\" WHERE \"T\".\"TYPE\" = 'VIEW' ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n        }).join(\" UNION ALL \");\n\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const db = dbView[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbView[\"TABLE_CATALOG\"];\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema, db);\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const schemaNames: string[] = [];\n        const currentSchema = await this.getCurrentSchema();\n        const currentDatabase = await this.getCurrentDatabase();\n\n        const extractTableSchemaAndName = (tableName: string): string[] => {\n            let [database, schema, name] = tableName.split(\".\");\n            // if name is empty, it means that tableName have only schema name and table name or only table name\n            if (!name) {\n                // if schema is empty, it means tableName have only name of a table. Otherwise it means that we have \"schemaName\".\"tableName\" string.\n                if (!schema) {\n                    name = database;\n                    schema = this.driver.options.schema || currentSchema;\n\n                } else {\n                    name = schema;\n                    schema = database;\n                }\n            } else if (schema === \"\") {\n                schema = this.driver.options.schema || currentSchema;\n            }\n\n            return [schema, name];\n        };\n\n        tableNames.filter(tablePath => tablePath.indexOf(\".\") !== -1)\n            .forEach(tablePath => {\n                if (tablePath.split(\".\").length === 3) {\n                    if (tablePath.split(\".\")[1] !== \"\")\n                        schemaNames.push(tablePath.split(\".\")[1]);\n                } else {\n                    schemaNames.push(tablePath.split(\".\")[0]);\n                }\n            });\n        schemaNames.push(this.driver.options.schema || currentSchema);\n\n        const dbNames = tableNames\n            .filter(tablePath => tablePath.split(\".\").length === 3)\n            .map(tablePath => tablePath.split(\".\")[0]);\n        if (this.driver.database && !dbNames.find(dbName => dbName === this.driver.database))\n            dbNames.push(this.driver.database);\n\n        // load tables, columns, indices and foreign keys\n        const schemaNamesString = schemaNames.map(name => \"'\" + name + \"'\").join(\", \");\n\n        const tablesCondition = tableNames.map(tableName => {\n            const [schema, name] = extractTableSchemaAndName(tableName);\n            return `(\"TABLE_SCHEMA\" = '${schema}' AND \"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const tablesSql = dbNames.map(dbName => {\n            return `SELECT * FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"TABLES\" WHERE ` + tablesCondition;\n        }).join(\" UNION ALL \");\n\n        const columnsSql = dbNames.map(dbName => {\n            return `SELECT * FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" WHERE ` + tablesCondition;\n        }).join(\" UNION ALL \");\n\n        const constraintsCondition = tableNames.map(tableName => {\n            const [schema, name] = extractTableSchemaAndName(tableName);\n            return `(\"columnUsages\".\"TABLE_SCHEMA\" = '${schema}' AND \"columnUsages\".\"TABLE_NAME\" = '${name}' ` +\n             `AND \"tableConstraints\".\"TABLE_SCHEMA\" = '${schema}' AND \"tableConstraints\".\"TABLE_NAME\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = dbNames.map(dbName => {\n            return `SELECT \"columnUsages\".*, \"tableConstraints\".\"CONSTRAINT_TYPE\", \"chk\".\"definition\" ` +\n                `FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"CONSTRAINT_COLUMN_USAGE\" \"columnUsages\" ` +\n                `INNER JOIN \"${dbName}\".\"INFORMATION_SCHEMA\".\"TABLE_CONSTRAINTS\" \"tableConstraints\" ON \"tableConstraints\".\"CONSTRAINT_NAME\" = \"columnUsages\".\"CONSTRAINT_NAME\" ` +\n                `LEFT JOIN \"${dbName}\".\"sys\".\"check_constraints\" \"chk\" ON \"chk\".\"name\" = \"columnUsages\".\"CONSTRAINT_NAME\" ` +\n                `WHERE (${constraintsCondition}) AND \"tableConstraints\".\"CONSTRAINT_TYPE\" IN ('PRIMARY KEY', 'UNIQUE', 'CHECK')`;\n        }).join(\" UNION ALL \");\n\n        const foreignKeysSql = dbNames.map(dbName => {\n            return `SELECT \"fk\".\"name\" AS \"FK_NAME\", '${dbName}' AS \"TABLE_CATALOG\", \"s1\".\"name\" AS \"TABLE_SCHEMA\", \"t1\".\"name\" AS \"TABLE_NAME\", ` +\n                `\"col1\".\"name\" AS \"COLUMN_NAME\", \"s2\".\"name\" AS \"REF_SCHEMA\", \"t2\".\"name\" AS \"REF_TABLE\", \"col2\".\"name\" AS \"REF_COLUMN\", ` +\n                `\"fk\".\"delete_referential_action_desc\" AS \"ON_DELETE\", \"fk\".\"update_referential_action_desc\" AS \"ON_UPDATE\" ` +\n                `FROM \"${dbName}\".\"sys\".\"foreign_keys\" \"fk\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"foreign_key_columns\" \"fkc\" ON \"fkc\".\"constraint_object_id\" = \"fk\".\"object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t1\" ON \"t1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s1\" ON \"s1\".\"schema_id\" = \"t1\".\"schema_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t2\" ON \"t2\".\"object_id\" = \"fk\".\"referenced_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s2\" ON \"s2\".\"schema_id\" = \"t2\".\"schema_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col1\" ON \"col1\".\"column_id\" = \"fkc\".\"parent_column_id\" AND \"col1\".\"object_id\" = \"fk\".\"parent_object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col2\" ON \"col2\".\"column_id\" = \"fkc\".\"referenced_column_id\" AND \"col2\".\"object_id\" = \"fk\".\"referenced_object_id\"`;\n        }).join(\" UNION ALL \");\n\n        const identityColumnsSql = dbNames.map(dbName => {\n            return `SELECT \"TABLE_CATALOG\", \"TABLE_SCHEMA\", \"COLUMN_NAME\", \"TABLE_NAME\" ` +\n                `FROM \"${dbName}\".\"INFORMATION_SCHEMA\".\"COLUMNS\" ` +\n                `WHERE COLUMNPROPERTY(object_id(\"TABLE_CATALOG\" + '.' + \"TABLE_SCHEMA\" + '.' + \"TABLE_NAME\"), \"COLUMN_NAME\", 'IsIdentity') = 1 AND \"TABLE_SCHEMA\" IN (${schemaNamesString})`;\n        }).join(\" UNION ALL \");\n\n        const dbCollationsSql = `SELECT \"NAME\", \"COLLATION_NAME\" FROM \"sys\".\"databases\"`;\n\n        const indicesSql = dbNames.map(dbName => {\n            return `SELECT '${dbName}' AS \"TABLE_CATALOG\", \"s\".\"name\" AS \"TABLE_SCHEMA\", \"t\".\"name\" AS \"TABLE_NAME\", ` +\n                `\"ind\".\"name\" AS \"INDEX_NAME\", \"col\".\"name\" AS \"COLUMN_NAME\", \"ind\".\"is_unique\" AS \"IS_UNIQUE\", \"ind\".\"filter_definition\" as \"CONDITION\" ` +\n                `FROM \"${dbName}\".\"sys\".\"indexes\" \"ind\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"index_columns\" \"ic\" ON \"ic\".\"object_id\" = \"ind\".\"object_id\" AND \"ic\".\"index_id\" = \"ind\".\"index_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"columns\" \"col\" ON \"col\".\"object_id\" = \"ic\".\"object_id\" AND \"col\".\"column_id\" = \"ic\".\"column_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"tables\" \"t\" ON \"t\".\"object_id\" = \"ind\".\"object_id\" ` +\n                `INNER JOIN \"${dbName}\".\"sys\".\"schemas\" \"s\" ON \"s\".\"schema_id\" = \"t\".\"schema_id\" ` +\n                `WHERE \"ind\".\"is_primary_key\" = 0 AND \"ind\".\"is_unique_constraint\" = 0 AND \"t\".\"is_ms_shipped\" = 0`;\n        }).join(\" UNION ALL \");\n\n        const [\n            dbTables,\n            dbColumns,\n            dbConstraints,\n            dbForeignKeys,\n            dbIdentityColumns,\n            dbCollations,\n            dbIndices\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(foreignKeysSql),\n            this.query(identityColumnsSql),\n            this.query(dbCollationsSql),\n            this.query(indicesSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create table schemas for loaded tables\n        return await Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n\n            const getSchemaFromKey = (dbObject: any, key: string) => {\n                return dbObject[key] === currentSchema && (!this.driver.options.schema || this.driver.options.schema === currentSchema)\n                    ? undefined\n                    : dbObject[key]\n            };\n\n            // We do not need to join schema and database names, when db or schema is by default.\n            // In this case we need local variable `tableFullName` for below comparision.\n            const db = dbTable[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbTable[\"TABLE_CATALOG\"];\n            const schema = getSchemaFromKey(dbTable, \"TABLE_SCHEMA\");\n            table.name = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], schema, db);\n            const tableFullName = this.driver.buildTableName(dbTable[\"TABLE_NAME\"], dbTable[\"TABLE_SCHEMA\"], dbTable[\"TABLE_CATALOG\"]);\n            const defaultCollation = dbCollations.find(dbCollation => dbCollation[\"NAME\"] === dbTable[\"TABLE_CATALOG\"])!;\n\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"TABLE_NAME\"], dbColumn[\"TABLE_SCHEMA\"], dbColumn[\"TABLE_CATALOG\"]) === tableFullName)\n                .map(dbColumn => {\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                            && dbConstraint[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\"\n                            && dbConstraint[\"CONSTRAINT_NAME\"] === uniqueConstraint[\"CONSTRAINT_NAME\"]\n                            && dbConstraint[\"COLUMN_NAME\"] !== dbColumn[\"COLUMN_NAME\"])\n                        : false;\n\n                    const isPrimary = !!columnConstraints.find(constraint =>  constraint[\"CONSTRAINT_TYPE\"] === \"PRIMARY KEY\");\n                    const isGenerated = !!dbIdentityColumns.find(column => {\n                        return this.driver.buildTableName(column[\"TABLE_NAME\"], column[\"TABLE_SCHEMA\"], column[\"TABLE_CATALOG\"]) === tableFullName\n                            && column[\"COLUMN_NAME\"] === dbColumn[\"COLUMN_NAME\"];\n                    });\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1 && dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"]) {\n                        const length = dbColumn[\"CHARACTER_MAXIMUM_LENGTH\"].toString();\n                        if (length === \"-1\") {\n                            tableColumn.length = \"MAX\";\n                        } else {\n                            tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                        }\n                    }\n\n                    if (tableColumn.type === \"decimal\" || tableColumn.type === \"numeric\") {\n                        if (dbColumn[\"NUMERIC_PRECISION\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"NUMERIC_PRECISION\"]))\n                            tableColumn.precision = dbColumn[\"NUMERIC_PRECISION\"];\n                        if (dbColumn[\"NUMERIC_SCALE\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"NUMERIC_SCALE\"]))\n                            tableColumn.scale = dbColumn[\"NUMERIC_SCALE\"];\n                    }\n\n                    if (tableColumn.type === \"nvarchar\") {\n                        // Check if this is an enum\n                        const columnCheckConstraints = columnConstraints.filter(constraint => constraint[\"CONSTRAINT_TYPE\"] === \"CHECK\");\n                        if (columnCheckConstraints.length) {\n                            // const isEnumRegexp = new RegExp(\"^\\\\(\\\\[\" + tableColumn.name + \"\\\\]='[^']+'(?: OR \\\\[\" + tableColumn.name + \"\\\\]='[^']+')*\\\\)$\");\n                            for (const checkConstraint of columnCheckConstraints) {\n                                if (this.isEnumCheckConstraint(checkConstraint[\"CONSTRAINT_NAME\"])) {\n                                    // This is an enum constraint, make column into an enum\n                                    tableColumn.enum = [];\n                                    const enumValueRegexp = new RegExp(\"\\\\[\" + tableColumn.name + \"\\\\]='([^']+)'\", \"g\");\n                                    let result;\n                                    while ((result = enumValueRegexp.exec(checkConstraint[\"definition\"])) !== null) {\n                                        tableColumn.enum.unshift(result[1]);\n                                    }\n                                    // Skip other column constraints\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    tableColumn.default = dbColumn[\"COLUMN_DEFAULT\"] !== null && dbColumn[\"COLUMN_DEFAULT\"] !== undefined\n                        ? this.removeParenthesisFromDefault(dbColumn[\"COLUMN_DEFAULT\"])\n                        : undefined;\n                    tableColumn.isNullable = dbColumn[\"IS_NULLABLE\"] === \"YES\";\n                    tableColumn.isPrimary = isPrimary;\n                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n                    tableColumn.isGenerated = isGenerated;\n                    if (isGenerated)\n                        tableColumn.generationStrategy = \"increment\";\n                    if (tableColumn.default === \"newsequentialid()\") {\n                        tableColumn.isGenerated = true;\n                        tableColumn.generationStrategy = \"uuid\";\n                        tableColumn.default = undefined;\n                    }\n\n                    // todo: unable to get default charset\n                    // tableColumn.charset = dbColumn[\"CHARACTER_SET_NAME\"];\n                    if (dbColumn[\"COLLATION_NAME\"])\n                        tableColumn.collation = dbColumn[\"COLLATION_NAME\"] === defaultCollation[\"COLLATION_NAME\"] ? undefined : dbColumn[\"COLLATION_NAME\"];\n\n                    if (tableColumn.type === \"datetime2\" || tableColumn.type === \"time\" || tableColumn.type === \"datetimeoffset\") {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"DATETIME_PRECISION\"]) ? dbColumn[\"DATETIME_PRECISION\"] : undefined;\n                    }\n\n                    return tableColumn;\n                });\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                    && dbConstraint[\"CONSTRAINT_TYPE\"] === \"UNIQUE\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                return new TableUnique({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: uniques.map(u => u[\"COLUMN_NAME\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"TABLE_NAME\"], dbConstraint[\"CONSTRAINT_SCHEMA\"], dbConstraint[\"CONSTRAINT_CATALOG\"]) === tableFullName\n                    && dbConstraint[\"CONSTRAINT_TYPE\"] === \"CHECK\";\n            }), dbConstraint => dbConstraint[\"CONSTRAINT_NAME\"]);\n\n            table.checks = tableCheckConstraints\n                .filter(constraint => !this.isEnumCheckConstraint(constraint[\"CONSTRAINT_NAME\"]))\n                .map(constraint => {\n                    const checks = dbConstraints.filter(dbC => dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]);\n                    return new TableCheck({\n                        name: constraint[\"CONSTRAINT_NAME\"],\n                        columnNames: checks.map(c => c[\"COLUMN_NAME\"]),\n                        expression: constraint[\"definition\"]\n                    });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"TABLE_NAME\"], dbForeignKey[\"TABLE_SCHEMA\"], dbForeignKey[\"TABLE_CATALOG\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"FK_NAME\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"FK_NAME\"] === dbForeignKey[\"FK_NAME\"]);\n\n                // if referenced table located in currently used db and schema, we don't need to concat db and schema names to table name.\n                const db = dbForeignKey[\"TABLE_CATALOG\"] === currentDatabase ? undefined : dbForeignKey[\"TABLE_CATALOG\"];\n                const schema = getSchemaFromKey(dbTable, \"REF_SCHEMA\");\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"REF_TABLE\"], schema, db);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"FK_NAME\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"COLUMN_NAME\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"REF_COLUMN\"]),\n                    onDelete: dbForeignKey[\"ON_DELETE\"].replace(\"_\", \" \"), // SqlServer returns NO_ACTION, instead of NO ACTION\n                    onUpdate: dbForeignKey[\"ON_UPDATE\"].replace(\"_\", \" \") // SqlServer returns NO_ACTION, instead of NO ACTION\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"TABLE_NAME\"], dbIndex[\"TABLE_SCHEMA\"], dbIndex[\"TABLE_CATALOG\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"INDEX_NAME\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"TABLE_CATALOG\"] === constraint[\"TABLE_CATALOG\"]\n                        && index[\"TABLE_SCHEMA\"] === constraint[\"TABLE_SCHEMA\"]\n                        && index[\"TABLE_NAME\"] === constraint[\"TABLE_NAME\"]\n                        && index[\"INDEX_NAME\"] === constraint[\"INDEX_NAME\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"INDEX_NAME\"],\n                    columnNames: indices.map(i => i[\"COLUMN_NAME\"]),\n                    isUnique: constraint[\"IS_UNIQUE\"],\n                    where: constraint[\"CONDITION\"]\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column, false, true)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrName: Table|string, ifExist?: boolean): Query {\n        const query = ifExist ? `DROP TABLE IF EXISTS ${this.escapePath(tableOrName)}` : `DROP TABLE ${this.escapePath(tableOrName)}`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE VIEW ${this.escapePath(view)} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const parsedTableName = this.parseTableName(view, currentSchema);\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", database: parsedTableName.database, schema: parsedTableName.schema, name: parsedTableName.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View|string): Query {\n        return new Query(`DROP VIEW ${this.escapePath(viewOrPath)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(viewOrPath: View|string): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema();\n        const parsedTableName = this.parseTableName(viewOrPath, currentSchema);\n\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"database\")} = :database`, { database: parsedTableName.database })\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema: parsedTableName.schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: parsedTableName.name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapePath(table)} (${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\" ON ${this.escapePath(table)}`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Escapes given table or View path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let name = target instanceof Table || target instanceof View ? target.name : target;\n        if (this.driver.options.schema) {\n            if (name.indexOf(\".\") === -1) {\n                name = `${this.driver.options.schema}.${name}`;\n            } else if (name.split(\".\").length === 3) {\n                const splittedName = name.split(\".\");\n                const dbName = splittedName[0];\n                const tableName = splittedName[2];\n                name = `${dbName}.${this.driver.options.schema}.${tableName}`;\n            }\n        }\n\n        return name.split(\".\").map(i => {\n            // this condition need because when custom database name was specified and schema name was not, we got `dbName..tableName` string, and doesn't need to escape middle empty string\n            if (i === \"\")\n                return i;\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    protected parseTableName(target: Table|View|string, schema?: string) {\n        const tableName = (target instanceof Table || target instanceof View) ? target.name : target;\n        if (tableName.split(\".\").length === 3) {\n            return {\n                database: tableName.split(\".\")[0],\n                schema: tableName.split(\".\")[1] === \"\" ? schema || \"SCHEMA_NAME()\" : tableName.split(\".\")[1],\n                name: tableName.split(\".\")[2]\n            };\n        } else if (tableName.split(\".\").length === 2) {\n            return {\n                database: this.driver.database,\n                schema: tableName.split(\".\")[0],\n                name: tableName.split(\".\")[1]\n            };\n        } else {\n            return {\n                database: this.driver.database,\n                schema: this.driver.options.schema ? this.driver.options.schema : schema || \"SCHEMA_NAME()\",\n                name: tableName\n            };\n        }\n    }\n\n    /**\n     * Concat database name and schema name to the foreign key name.\n     * Needs because FK name is relevant to the schema and database.\n     */\n    protected buildForeignKeyName(fkName: string, schemaName: string|undefined, dbName: string|undefined): string {\n        let joinedFkName = fkName;\n        if (schemaName)\n            joinedFkName = schemaName + \".\" + joinedFkName;\n        if (dbName)\n            joinedFkName = dbName + \".\" + joinedFkName;\n\n        return joinedFkName;\n    }\n\n    /**\n     * Removes parenthesis around default value.\n     * Sql server returns default value with parenthesis around, e.g.\n     *  ('My text') - for string\n     *  ((1)) - for number\n     *  (newsequentialId()) - for function\n     */\n    protected removeParenthesisFromDefault(defaultValue: string): any {\n        if (defaultValue.substr(0, 1) !== \"(\")\n            return defaultValue;\n        const normalizedDefault = defaultValue.substr(1, defaultValue.lastIndexOf(\")\") - 1);\n        return this.removeParenthesisFromDefault(normalizedDefault);\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(table: Table, column: TableColumn, skipIdentity: boolean, createDefault: boolean) {\n        let c = `\"${column.name}\" ${this.connection.driver.createFullType(column)}`;\n\n        if (column.enum) {\n            const expression = column.name + \" IN (\" + column.enum.map(val => \"'\" + val + \"'\").join(\",\") + \")\";\n            const checkName = this.connection.namingStrategy.checkConstraintName(table, expression, true)\n            c += ` CONSTRAINT ${checkName} CHECK(${expression})`;\n        }\n\n        if (column.collation)\n            c += \" COLLATE \" + column.collation;\n\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n\n        if (column.isGenerated === true && column.generationStrategy === \"increment\" && !skipIdentity) // don't use skipPrimary here since updates can update already exist primary without auto inc.\n            c += \" IDENTITY(1,1)\";\n\n        if (column.default !== undefined && column.default !== null && createDefault) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT ${column.default}`;\n        }\n\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default) {\n            // we create named constraint to be able to delete this constraint when column been dropped\n            const defaultName = this.connection.namingStrategy.defaultConstraintName(table.name, column.name);\n            c += ` CONSTRAINT \"${defaultName}\" DEFAULT NEWSEQUENTIALID()`;\n        }\n        return c;\n    }\n\n    protected isEnumCheckConstraint(name: string): boolean {\n        return name.indexOf(\"CHK_\") !== -1 && name.indexOf(\"_ENUM\") !== -1\n    }\n\n    /**\n     * Converts MssqlParameter into real mssql parameter type.\n     */\n    protected mssqlParameterToNativeParameter(parameter: MssqlParameter): any {\n        switch (this.driver.normalizeType({ type: parameter.type as any })) {\n            case \"bit\":\n                return this.driver.mssql.Bit;\n            case \"bigint\":\n                return this.driver.mssql.BigInt;\n            case \"decimal\":\n                return this.driver.mssql.Decimal(...parameter.params);\n            case \"float\":\n                return this.driver.mssql.Float;\n            case \"int\":\n                return this.driver.mssql.Int;\n            case \"money\":\n                return this.driver.mssql.Money;\n            case \"numeric\":\n                return this.driver.mssql.Numeric(...parameter.params);\n            case \"smallint\":\n                return this.driver.mssql.SmallInt;\n            case \"smallmoney\":\n                return this.driver.mssql.SmallMoney;\n            case \"real\":\n                return this.driver.mssql.Real;\n            case \"tinyint\":\n                return this.driver.mssql.TinyInt;\n            case \"char\":\n                return this.driver.mssql.Char(...parameter.params);\n            case \"nchar\":\n                return this.driver.mssql.NChar(...parameter.params);\n            case \"text\":\n                return this.driver.mssql.Text;\n            case \"ntext\":\n                return this.driver.mssql.Ntext;\n            case \"varchar\":\n                return this.driver.mssql.VarChar(...parameter.params);\n            case \"nvarchar\":\n                return this.driver.mssql.NVarChar(...parameter.params);\n            case \"xml\":\n                return this.driver.mssql.Xml;\n            case \"time\":\n                return this.driver.mssql.Time(...parameter.params);\n            case \"date\":\n                return this.driver.mssql.Date;\n            case \"datetime\":\n                return this.driver.mssql.DateTime;\n            case \"datetime2\":\n                return this.driver.mssql.DateTime2(...parameter.params);\n            case \"datetimeoffset\":\n                return this.driver.mssql.DateTimeOffset(...parameter.params);\n            case \"smalldatetime\":\n                return this.driver.mssql.SmallDateTime;\n            case \"uniqueidentifier\":\n                return this.driver.mssql.UniqueIdentifier;\n            case \"variant\":\n                return this.driver.mssql.Variant;\n            case \"binary\":\n                return this.driver.mssql.Binary;\n            case \"varbinary\":\n                return this.driver.mssql.VarBinary(...parameter.params);\n            case \"image\":\n                return this.driver.mssql.Image;\n            case \"udt\":\n                return this.driver.mssql.UDT;\n            case \"rowversion\":\n                return this.driver.mssql.RowVersion;\n        }\n    }\n\n    /**\n     * Converts string literal of isolation level to enum.\n     * The underlying mssql driver requires an enum for the isolation level.\n     */\n    convertIsolationLevel(isolation: IsolationLevel) {\n        const ISOLATION_LEVEL = this.driver.mssql.ISOLATION_LEVEL;\n        switch (isolation) {\n            case \"READ UNCOMMITTED\":\n                return ISOLATION_LEVEL.READ_UNCOMMITTED;\n            case \"REPEATABLE READ\":\n                return ISOLATION_LEVEL.REPEATABLE_READ;\n            case \"SERIALIZABLE\":\n                return ISOLATION_LEVEL.SERIALIZABLE;\n\n            case \"READ COMMITTED\":\n            default:\n                return ISOLATION_LEVEL.READ_COMMITTED;\n        }\n    }\n\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}