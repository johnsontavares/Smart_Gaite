{"ast":null,"code":"import { RedisQueryResultCache } from \"./RedisQueryResultCache\";\nimport { DbQueryResultCache } from \"./DbQueryResultCache\";\n/**\n * Caches query result into Redis database.\n */\n\nvar QueryResultCacheFactory =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function QueryResultCacheFactory(connection) {\n    this.connection = connection;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new query result cache based on connection options.\n   */\n\n\n  QueryResultCacheFactory.prototype.create = function () {\n    if (!this.connection.options.cache) throw new Error(\"To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }\");\n    var cache = this.connection.options.cache;\n\n    if (cache.provider && typeof cache.provider === \"function\") {\n      return cache.provider(this.connection);\n    }\n\n    if (cache.type === \"redis\" || cache.type === \"ioredis\" || cache.type === \"ioredis/cluster\") {\n      return new RedisQueryResultCache(this.connection, cache.type);\n    } else {\n      return new DbQueryResultCache(this.connection);\n    }\n  };\n\n  return QueryResultCacheFactory;\n}();\n\nexport { QueryResultCacheFactory };","map":{"version":3,"sources":["../browser/src/cache/QueryResultCacheFactory.ts"],"names":[],"mappings":"AAAA,SAAQ,qBAAR,QAAoC,yBAApC;AACA,SAAQ,kBAAR,QAAiC,sBAAjC;AAIA;;AAEG;;AACH,IAAA,uBAAA;AAAA;AAAA,YAAA;AAEI;AACA;AACA;AAEA,WAAA,uBAAA,CAAsB,UAAtB,EAA4C;AAAtB,SAAA,UAAA,GAAA,UAAA;AACrB,GAPL,CASI;AACA;AACA;;AAEA;;AAEG;;;AACH,EAAA,uBAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;AACI,QAAI,CAAC,KAAK,UAAL,CAAgB,OAAhB,CAAwB,KAA7B,EACI,MAAM,IAAI,KAAJ,CAAU,uKAAV,CAAN;AAEJ,QAAM,KAAK,GAAQ,KAAK,UAAL,CAAgB,OAAhB,CAAwB,KAA3C;;AAEA,QAAI,KAAK,CAAC,QAAN,IAAkB,OAAO,KAAK,CAAC,QAAb,KAA0B,UAAhD,EAA4D;AACxD,aAAO,KAAK,CAAC,QAAN,CAAe,KAAK,UAApB,CAAP;AACH;;AAED,QAAI,KAAK,CAAC,IAAN,KAAe,OAAf,IAA0B,KAAK,CAAC,IAAN,KAAe,SAAzC,IAAsD,KAAK,CAAC,IAAN,KAAe,iBAAzE,EAA4F;AACxF,aAAO,IAAI,qBAAJ,CAA0B,KAAK,UAA/B,EAA2C,KAAK,CAAC,IAAjD,CAAP;AACH,KAFD,MAEO;AACH,aAAO,IAAI,kBAAJ,CAAuB,KAAK,UAA5B,CAAP;AACH;AACJ,GAfD;;AAiBJ,SAAA,uBAAA;AAAC,CAjCD,EAAA","sourcesContent":["import {RedisQueryResultCache} from \"./RedisQueryResultCache\";\nimport {DbQueryResultCache} from \"./DbQueryResultCache\";\nimport {QueryResultCache} from \"./QueryResultCache\";\nimport {Connection} from \"../connection/Connection\";\n\n/**\n * Caches query result into Redis database.\n */\nexport class QueryResultCacheFactory {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new query result cache based on connection options.\n     */\n    create(): QueryResultCache {\n        if (!this.connection.options.cache)\n            throw new Error(`To use cache you need to enable it in connection options by setting cache: true or providing some caching options. Example: { host: ..., username: ..., cache: true }`);\n\n        const cache: any = this.connection.options.cache;\n\n        if (cache.provider && typeof cache.provider === \"function\") {\n            return cache.provider(this.connection);\n        }\n\n        if (cache.type === \"redis\" || cache.type === \"ioredis\" || cache.type === \"ioredis/cluster\") {\n            return new RedisQueryResultCache(this.connection, cache.type);\n        } else {\n            return new DbQueryResultCache(this.connection);\n        }\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}