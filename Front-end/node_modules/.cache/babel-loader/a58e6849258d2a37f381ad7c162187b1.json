{"ast":null,"code":"import { __read, __spreadArray, __values } from \"tslib\";\nimport { hash, shorten } from \"../util/StringUtils\";\n/**\n * Common driver utility functions.\n */\n\nvar DriverUtils =\n/** @class */\nfunction () {\n  function DriverUtils() {} // -------------------------------------------------------------------------\n  // Public Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Normalizes and builds a new driver options.\n   * Extracts settings from connection url and sets to a new options object.\n   */\n\n\n  DriverUtils.buildDriverOptions = function (options, buildOptions) {\n    var e_1, _a;\n\n    if (options.url) {\n      var urlDriverOptions = this.parseConnectionUrl(options.url);\n\n      if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n        urlDriverOptions.sid = urlDriverOptions.database;\n      }\n\n      try {\n        for (var _b = __values(Object.keys(urlDriverOptions)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n\n          if (typeof urlDriverOptions[key] === \"undefined\") {\n            delete urlDriverOptions[key];\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      return Object.assign({}, options, urlDriverOptions);\n    }\n\n    return Object.assign({}, options);\n  };\n  /**\n   * buildDriverOptions for MongodDB only to support replica set\n   */\n\n\n  DriverUtils.buildMongoDBDriverOptions = function (options, buildOptions) {\n    var e_2, _a;\n\n    if (options.url) {\n      var urlDriverOptions = this.parseMongoDBConnectionUrl(options.url);\n\n      if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n        urlDriverOptions.sid = urlDriverOptions.database;\n      }\n\n      try {\n        for (var _b = __values(Object.keys(urlDriverOptions)), _c = _b.next(); !_c.done; _c = _b.next()) {\n          var key = _c.value;\n\n          if (typeof urlDriverOptions[key] === \"undefined\") {\n            delete urlDriverOptions[key];\n          }\n        }\n      } catch (e_2_1) {\n        e_2 = {\n          error: e_2_1\n        };\n      } finally {\n        try {\n          if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        } finally {\n          if (e_2) throw e_2.error;\n        }\n      }\n\n      return Object.assign({}, options, urlDriverOptions);\n    }\n\n    return Object.assign({}, options);\n  };\n  /**\n   * Joins and shortens alias if needed.\n   *\n   * If the alias length is greater than the limit allowed by the current\n   * driver, replaces it with a shortend string, if the shortend string\n   * is still too long, it will then hash the alias.\n   *\n   * @param driver Current `Driver`.\n   * @param buildOptions Optional settings.\n   * @param alias Alias parts.\n   *\n   * @return An alias that is no longer than the divers max alias length.\n   */\n\n\n  DriverUtils.buildAlias = function (_a, buildOptions) {\n    var maxAliasLength = _a.maxAliasLength;\n    var alias = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      alias[_i - 2] = arguments[_i];\n    }\n\n    if (typeof buildOptions === \"string\") {\n      alias.unshift(buildOptions);\n      buildOptions = {\n        shorten: false,\n        joiner: \"_\"\n      };\n    } else {\n      buildOptions = Object.assign({\n        shorten: false,\n        joiner: \"_\"\n      }, buildOptions);\n    }\n\n    var newAlias = alias.length === 1 ? alias[0] : alias.join(buildOptions.joiner);\n\n    if (maxAliasLength && maxAliasLength > 0 && newAlias.length > maxAliasLength) {\n      if (buildOptions.shorten === true) {\n        var shortenedAlias = shorten(newAlias);\n\n        if (shortenedAlias.length < maxAliasLength) {\n          return shortenedAlias;\n        }\n      }\n\n      return hash(newAlias, {\n        length: maxAliasLength\n      });\n    }\n\n    return newAlias;\n  };\n  /**\n   * @deprecated use `buildAlias` instead.\n   */\n\n\n  DriverUtils.buildColumnAlias = function (_a, buildOptions) {\n    var maxAliasLength = _a.maxAliasLength;\n    var alias = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      alias[_i - 2] = arguments[_i];\n    }\n\n    return this.buildAlias.apply(this, __spreadArray([{\n      maxAliasLength: maxAliasLength\n    }, buildOptions], __read(alias)));\n  }; // -------------------------------------------------------------------------\n  // Private Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Extracts connection data from the connection url.\n   */\n\n\n  DriverUtils.parseConnectionUrl = function (url) {\n    var type = url.split(\":\")[0];\n    var firstSlashes = url.indexOf(\"//\");\n    var preBase = url.substr(firstSlashes + 2);\n    var secondSlash = preBase.indexOf(\"/\");\n    var base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n    var afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined; // remove mongodb query params\n\n    if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n      afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n    }\n\n    var lastAtSign = base.lastIndexOf(\"@\");\n    var usernameAndPassword = base.substr(0, lastAtSign);\n    var hostAndPort = base.substr(lastAtSign + 1);\n    var username = usernameAndPassword;\n    var password = \"\";\n    var firstColon = usernameAndPassword.indexOf(\":\");\n\n    if (firstColon !== -1) {\n      username = usernameAndPassword.substr(0, firstColon);\n      password = usernameAndPassword.substr(firstColon + 1);\n    }\n\n    var _a = __read(hostAndPort.split(\":\"), 2),\n        host = _a[0],\n        port = _a[1];\n\n    return {\n      type: type,\n      host: host,\n      username: decodeURIComponent(username),\n      password: decodeURIComponent(password),\n      port: port ? parseInt(port) : undefined,\n      database: afterBase || undefined\n    };\n  };\n  /**\n   * Extracts connection data from the connection url for MongoDB to support replica set.\n   */\n\n\n  DriverUtils.parseMongoDBConnectionUrl = function (url) {\n    var _a, e_3, _b;\n\n    var type = url.split(\":\")[0];\n    var firstSlashes = url.indexOf(\"//\");\n    var preBase = url.substr(firstSlashes + 2);\n    var secondSlash = preBase.indexOf(\"/\");\n    var base = secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n    var afterBase = secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n    var afterQuestionMark = \"\";\n    var host = undefined;\n    var port = undefined;\n    var hostReplicaSet = undefined;\n    var replicaSet = undefined;\n    var optionsObject = {};\n\n    if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n      // split params\n      afterQuestionMark = afterBase.substr(afterBase.indexOf(\"?\") + 1, afterBase.length);\n      var optionsList = afterQuestionMark.split(\"&\");\n      var optionKey_1;\n      var optionValue_1; // create optionsObject for merge with connectionUrl object before return\n\n      optionsList.forEach(function (optionItem) {\n        optionKey_1 = optionItem.split(\"=\")[0];\n        optionValue_1 = optionItem.split(\"=\")[1];\n        optionsObject[optionKey_1] = optionValue_1;\n      }); // specific replicaSet value to set options about hostReplicaSet\n\n      replicaSet = optionsObject[\"replicaSet\"];\n      afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n    }\n\n    var lastAtSign = base.lastIndexOf(\"@\");\n    var usernameAndPassword = base.substr(0, lastAtSign);\n    var hostAndPort = base.substr(lastAtSign + 1);\n    var username = usernameAndPassword;\n    var password = \"\";\n    var firstColon = usernameAndPassword.indexOf(\":\");\n\n    if (firstColon !== -1) {\n      username = usernameAndPassword.substr(0, firstColon);\n      password = usernameAndPassword.substr(firstColon + 1);\n    } // If replicaSet have value set It as hostlist, If not set like standalone host\n\n\n    if (replicaSet) {\n      hostReplicaSet = hostAndPort;\n    } else {\n      _a = __read(hostAndPort.split(\":\"), 2), host = _a[0], port = _a[1];\n    }\n\n    var connectionUrl = {\n      type: type,\n      host: host,\n      hostReplicaSet: hostReplicaSet,\n      username: decodeURIComponent(username),\n      password: decodeURIComponent(password),\n      port: port ? parseInt(port) : undefined,\n      database: afterBase || undefined\n    };\n\n    try {\n      // Loop to set every options in connectionUrl to object\n      for (var _c = __values(Object.entries(optionsObject)), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var _e = __read(_d.value, 2),\n            key = _e[0],\n            value = _e[1];\n\n        connectionUrl[key] = value;\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n\n    return connectionUrl;\n  };\n\n  return DriverUtils;\n}();\n\nexport { DriverUtils };","map":{"version":3,"sources":["../browser/src/driver/DriverUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import {Driver} from \"./Driver\";\nimport {hash,shorten} from \"../util/StringUtils\";\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseConnectionUrl(options.url) as { [key: string]: any };\n\n            if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n                urlDriverOptions.sid = urlDriverOptions.database;\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key];\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n\n    /**\n     * buildDriverOptions for MongodDB only to support replica set\n     */\n    static buildMongoDBDriverOptions(options: any, buildOptions?: { useSid: boolean }): any {\n        if (options.url) {\n            const urlDriverOptions = this.parseMongoDBConnectionUrl(options.url) as { [key: string]: any };\n\n            if (buildOptions && buildOptions.useSid && urlDriverOptions.database) {\n                urlDriverOptions.sid = urlDriverOptions.database;\n            }\n\n            for (const key of Object.keys(urlDriverOptions)) {\n                if (typeof urlDriverOptions[key] === \"undefined\") {\n                    delete urlDriverOptions[key];\n                }\n            }\n\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n\n\n    /**\n     * Joins and shortens alias if needed.\n     *\n     * If the alias length is greater than the limit allowed by the current\n     * driver, replaces it with a shortend string, if the shortend string\n     * is still too long, it will then hash the alias.\n     *\n     * @param driver Current `Driver`.\n     * @param buildOptions Optional settings.\n     * @param alias Alias parts.\n     *\n     * @return An alias that is no longer than the divers max alias length.\n     */\n     static buildAlias({ maxAliasLength }: Driver, buildOptions: { shorten?: boolean, joiner?: string } | string, ...alias: string[]): string {\n        if (typeof buildOptions === \"string\") {\n            alias.unshift(buildOptions);\n            buildOptions = { shorten: false, joiner: \"_\" };\n        } else {\n            buildOptions = Object.assign({ shorten: false, joiner: \"_\" }, buildOptions);\n        }\n\n        const newAlias = alias.length === 1 ? alias[0] : alias.join(buildOptions.joiner);\n        if (maxAliasLength && maxAliasLength > 0 && newAlias.length > maxAliasLength) {\n            if (buildOptions.shorten === true) {\n                const shortenedAlias = shorten(newAlias);\n                if (shortenedAlias.length < maxAliasLength) {\n                    return shortenedAlias;\n                }\n            }\n\n            return hash(newAlias, { length: maxAliasLength });\n        }\n\n        return newAlias;\n    }\n\n    /**\n     * @deprecated use `buildAlias` instead.\n     */\n    static buildColumnAlias({ maxAliasLength }: Driver, buildOptions: { shorten?: boolean, joiner?: string } | string, ...alias: string[]) {\n        return this.buildAlias({ maxAliasLength } as Driver, buildOptions, ...alias);\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        let afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n        // remove mongodb query params\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        const [host, port] = hostAndPort.split(\":\");\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    }\n\n    /**\n     * Extracts connection data from the connection url for MongoDB to support replica set.\n     */\n    private static parseMongoDBConnectionUrl(url: string) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base = (secondSlash !== -1) ? preBase.substr(0, secondSlash) : preBase;\n        let afterBase = (secondSlash !== -1) ? preBase.substr(secondSlash + 1) : undefined;\n        let afterQuestionMark = \"\";\n        let host = undefined;\n        let port = undefined;\n        let hostReplicaSet = undefined;\n        let replicaSet = undefined;\n\n        let optionsObject: any = {};\n\n        if (afterBase && afterBase.indexOf(\"?\") !== -1) {\n\n            // split params\n            afterQuestionMark = afterBase.substr((afterBase.indexOf(\"?\") + 1), afterBase.length);\n\n            const optionsList = afterQuestionMark.split(\"&\");\n            let optionKey: string;\n            let optionValue: string;\n\n            // create optionsObject for merge with connectionUrl object before return\n            optionsList.forEach(optionItem => {\n                optionKey = optionItem.split(\"=\")[0];\n                optionValue = optionItem.split(\"=\")[1];\n                optionsObject[optionKey] = optionValue;\n            });\n\n            // specific replicaSet value to set options about hostReplicaSet\n            replicaSet = optionsObject[\"replicaSet\"];\n            afterBase = afterBase.substr(0, afterBase.indexOf(\"?\"));\n        }\n\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n\n        // If replicaSet have value set It as hostlist, If not set like standalone host\n        if (replicaSet) {\n            hostReplicaSet = hostAndPort;\n        } else {\n            [host, port] = hostAndPort.split(\":\");\n        }\n\n        let connectionUrl: any = {\n            type: type,\n            host: host,\n            hostReplicaSet: hostReplicaSet,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n\n        // Loop to set every options in connectionUrl to object\n        for (const [key, value] of Object.entries(optionsObject)) {\n            connectionUrl[key] = value;\n        }\n\n        return connectionUrl;\n    }\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}