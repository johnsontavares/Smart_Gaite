{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\n/**\n * Runs queries on a single sqlite database connection.\n */\n\nvar CapacitorQueryRunner =\n/** @class */\nfunction (_super) {\n  __extends(CapacitorQueryRunner, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function CapacitorQueryRunner(driver) {\n    var _this = _super.call(this) || this;\n\n    _this.driver = driver;\n    _this.connection = driver.connection;\n    _this.broadcaster = new Broadcaster(_this);\n    return _this;\n  }\n\n  CapacitorQueryRunner.prototype.executeSet = function (set) {\n    return __awaiter(this, void 0, void 0, function () {\n      var databaseConnection;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            return [4\n            /*yield*/\n            , this.connect()];\n\n          case 1:\n            databaseConnection = _a.sent();\n            return [2\n            /*return*/\n            , databaseConnection.executeSet(set, false)];\n        }\n      });\n    });\n  };\n  /**\n   * Executes a given SQL query.\n   */\n\n\n  CapacitorQueryRunner.prototype.query = function (query, parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var databaseConnection, pResult, command;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            return [4\n            /*yield*/\n            , this.connect()];\n\n          case 1:\n            databaseConnection = _a.sent();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            command = query.substr(0, query.indexOf(\" \"));\n\n            if ([\"PRAGMA\", \"BEGIN\", \"ROLLBACK\", \"COMMIT\", \"CREATE\", \"ALTER\", \"DROP\"].indexOf(command) !== -1) {\n              pResult = databaseConnection.execute(query, false);\n            } else if ([\"INSERT\", \"UPDATE\", \"DELETE\"].indexOf(command) !== -1) {\n              pResult = databaseConnection.run(query, parameters, false).then(function (_a) {\n                var changes = _a.changes;\n                return changes.lastId || changes.changes;\n              });\n            } else {\n              pResult = databaseConnection.query(query, parameters).then(function (_a) {\n                var values = _a.values;\n                return values;\n              });\n            }\n\n            return [2\n            /*return*/\n            , pResult.catch(function (err) {\n              _this.driver.connection.logger.logQueryError(err, query, parameters, _this);\n\n              throw new QueryFailedError(query, parameters, err);\n            })];\n        }\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Parametrizes given object of values. Used to create column=value queries.\n   */\n\n\n  CapacitorQueryRunner.prototype.parametrize = function (objectLiteral) {\n    return Object.keys(objectLiteral).map(function (key) {\n      return \"\\\"\" + key + \"\\\"\" + \"=?\";\n    });\n  };\n\n  return CapacitorQueryRunner;\n}(AbstractSqliteQueryRunner);\n\nexport { CapacitorQueryRunner };","map":{"version":3,"sources":["../browser/src/driver/capacitor/CapacitorQueryRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { CapacitorDriver } from \"./CapacitorDriver\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { ObjectLiteral } from \"../..\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class CapacitorQueryRunner extends AbstractSqliteQueryRunner {\n    /**\n     * Database driver used by connection.\n     */\n    driver: CapacitorDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: CapacitorDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    async executeSet(set: { statement: string; values?: any[] }[]) {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n\n        const databaseConnection = await this.connect();\n\n        return databaseConnection.executeSet(set, false);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n\n        const databaseConnection = await this.connect();\n\n        this.driver.connection.logger.logQuery(query, parameters, this);\n\n        let pResult: Promise<any>;\n        const command = query.substr(0, query.indexOf(\" \"));\n\n        if (\n            [\n                \"PRAGMA\",\n                \"BEGIN\",\n                \"ROLLBACK\",\n                \"COMMIT\",\n                \"CREATE\",\n                \"ALTER\",\n                \"DROP\",\n            ].indexOf(command) !== -1\n        ) {\n            pResult = databaseConnection.execute(query, false);\n        } else if ([\"INSERT\", \"UPDATE\", \"DELETE\"].indexOf(command) !== -1) {\n            pResult = databaseConnection\n                .run(query, parameters, false)\n                .then(\n                    ({\n                        changes,\n                    }: {\n                        changes: { changes?: number; lastId?: number };\n                    }) => changes.lastId || changes.changes\n                );\n        } else {\n            pResult = databaseConnection\n                .query(query, parameters)\n                .then(({ values }: { values: any[] }) => values);\n        }\n\n        return pResult.catch((err: any) => {\n            this.driver.connection.logger.logQueryError(\n                err,\n                query,\n                parameters,\n                this\n            );\n            throw new QueryFailedError(query, parameters, err);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral): string[] {\n        return Object.keys(objectLiteral).map((key) => `\"${key}\"` + \"=?\");\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}