{"ast":null,"code":"import { TableColumn } from \"./TableColumn\";\nimport { TableIndex } from \"./TableIndex\";\nimport { TableForeignKey } from \"./TableForeignKey\";\nimport { TableUtils } from \"../util/TableUtils\";\nimport { TableUnique } from \"./TableUnique\";\nimport { TableCheck } from \"./TableCheck\";\nimport { TableExclusion } from \"./TableExclusion\";\n/**\n * Table in the database represented in this class.\n */\n\nvar Table =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function Table(options) {\n    /**\n     * Table columns.\n     */\n    this.columns = [];\n    /**\n     * Table indices.\n     */\n\n    this.indices = [];\n    /**\n     * Table foreign keys.\n     */\n\n    this.foreignKeys = [];\n    /**\n     * Table unique constraints.\n     */\n\n    this.uniques = [];\n    /**\n     * Table check constraints.\n     */\n\n    this.checks = [];\n    /**\n     * Table exclusion constraints.\n     */\n\n    this.exclusions = [];\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n\n    this.justCreated = false;\n\n    if (options) {\n      this.name = options.name;\n      if (options.columns) this.columns = options.columns.map(function (column) {\n        return new TableColumn(column);\n      });\n      if (options.indices) this.indices = options.indices.map(function (index) {\n        return new TableIndex(index);\n      });\n      if (options.foreignKeys) this.foreignKeys = options.foreignKeys.map(function (foreignKey) {\n        return new TableForeignKey(foreignKey);\n      });\n      if (options.uniques) this.uniques = options.uniques.map(function (unique) {\n        return new TableUnique(unique);\n      });\n      if (options.checks) this.checks = options.checks.map(function (check) {\n        return new TableCheck(check);\n      });\n      if (options.exclusions) this.exclusions = options.exclusions.map(function (exclusion) {\n        return new TableExclusion(exclusion);\n      });\n      if (options.justCreated !== undefined) this.justCreated = options.justCreated;\n      this.engine = options.engine;\n    }\n  }\n\n  Object.defineProperty(Table.prototype, \"primaryColumns\", {\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n    get: function () {\n      return this.columns.filter(function (column) {\n        return column.isPrimary;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  }); // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Clones this table to a new table with all properties cloned.\n   */\n\n  Table.prototype.clone = function () {\n    return new Table({\n      name: this.name,\n      columns: this.columns.map(function (column) {\n        return column.clone();\n      }),\n      indices: this.indices.map(function (constraint) {\n        return constraint.clone();\n      }),\n      foreignKeys: this.foreignKeys.map(function (constraint) {\n        return constraint.clone();\n      }),\n      uniques: this.uniques.map(function (constraint) {\n        return constraint.clone();\n      }),\n      checks: this.checks.map(function (constraint) {\n        return constraint.clone();\n      }),\n      exclusions: this.exclusions.map(function (constraint) {\n        return constraint.clone();\n      }),\n      justCreated: this.justCreated,\n      engine: this.engine\n    });\n  };\n  /**\n   * Add column and creates its constraints.\n   */\n\n\n  Table.prototype.addColumn = function (column) {\n    this.columns.push(column);\n  };\n  /**\n   * Remove column and its constraints.\n   */\n\n\n  Table.prototype.removeColumn = function (column) {\n    var foundColumn = this.columns.find(function (c) {\n      return c.name === column.name;\n    });\n    if (foundColumn) this.columns.splice(this.columns.indexOf(foundColumn), 1);\n  };\n  /**\n   * Adds unique constraint.\n   */\n\n\n  Table.prototype.addUniqueConstraint = function (uniqueConstraint) {\n    this.uniques.push(uniqueConstraint);\n\n    if (uniqueConstraint.columnNames.length === 1) {\n      var uniqueColumn = this.columns.find(function (column) {\n        return column.name === uniqueConstraint.columnNames[0];\n      });\n      if (uniqueColumn) uniqueColumn.isUnique = true;\n    }\n  };\n  /**\n   * Removes unique constraint.\n   */\n\n\n  Table.prototype.removeUniqueConstraint = function (removedUnique) {\n    var foundUnique = this.uniques.find(function (unique) {\n      return unique.name === removedUnique.name;\n    });\n\n    if (foundUnique) {\n      this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n\n      if (foundUnique.columnNames.length === 1) {\n        var uniqueColumn = this.columns.find(function (column) {\n          return column.name === foundUnique.columnNames[0];\n        });\n        if (uniqueColumn) uniqueColumn.isUnique = false;\n      }\n    }\n  };\n  /**\n   * Adds check constraint.\n   */\n\n\n  Table.prototype.addCheckConstraint = function (checkConstraint) {\n    this.checks.push(checkConstraint);\n  };\n  /**\n   * Removes check constraint.\n   */\n\n\n  Table.prototype.removeCheckConstraint = function (removedCheck) {\n    var foundCheck = this.checks.find(function (check) {\n      return check.name === removedCheck.name;\n    });\n\n    if (foundCheck) {\n      this.checks.splice(this.checks.indexOf(foundCheck), 1);\n    }\n  };\n  /**\n   * Adds exclusion constraint.\n   */\n\n\n  Table.prototype.addExclusionConstraint = function (exclusionConstraint) {\n    this.exclusions.push(exclusionConstraint);\n  };\n  /**\n   * Removes exclusion constraint.\n   */\n\n\n  Table.prototype.removeExclusionConstraint = function (removedExclusion) {\n    var foundExclusion = this.exclusions.find(function (exclusion) {\n      return exclusion.name === removedExclusion.name;\n    });\n\n    if (foundExclusion) {\n      this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n    }\n  };\n  /**\n   * Adds foreign keys.\n   */\n\n\n  Table.prototype.addForeignKey = function (foreignKey) {\n    this.foreignKeys.push(foreignKey);\n  };\n  /**\n   * Removes foreign key.\n   */\n\n\n  Table.prototype.removeForeignKey = function (removedForeignKey) {\n    var fk = this.foreignKeys.find(function (foreignKey) {\n      return foreignKey.name === removedForeignKey.name;\n    });\n    if (fk) this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n  };\n  /**\n   * Adds index.\n   */\n\n\n  Table.prototype.addIndex = function (index, isMysql) {\n    if (isMysql === void 0) {\n      isMysql = false;\n    }\n\n    this.indices.push(index); // in Mysql unique indices and unique constraints are the same thing\n    // if index is unique and have only one column, we mark this column as unique\n\n    if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n      var column = this.columns.find(function (c) {\n        return c.name === index.columnNames[0];\n      });\n      if (column) column.isUnique = true;\n    }\n  };\n  /**\n   * Removes index.\n   */\n\n\n  Table.prototype.removeIndex = function (tableIndex, isMysql) {\n    if (isMysql === void 0) {\n      isMysql = false;\n    }\n\n    var index = this.indices.find(function (index) {\n      return index.name === tableIndex.name;\n    });\n\n    if (index) {\n      this.indices.splice(this.indices.indexOf(index), 1); // in Mysql unique indices and unique constraints are the same thing\n      // if index is unique and have only one column, we move `unique` attribute from its column\n\n      if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n        var column_1 = this.columns.find(function (c) {\n          return c.name === index.columnNames[0];\n        });\n        if (column_1) column_1.isUnique = this.indices.some(function (ind) {\n          return ind.columnNames.length === 1 && ind.columnNames[0] === column_1.name && !!index.isUnique;\n        });\n      }\n    }\n  };\n\n  Table.prototype.findColumnByName = function (name) {\n    return this.columns.find(function (column) {\n      return column.name === name;\n    });\n  };\n  /**\n   * Returns all column indices.\n   */\n\n\n  Table.prototype.findColumnIndices = function (column) {\n    return this.indices.filter(function (index) {\n      return !!index.columnNames.find(function (columnName) {\n        return columnName === column.name;\n      });\n    });\n  };\n  /**\n   * Returns all column foreign keys.\n   */\n\n\n  Table.prototype.findColumnForeignKeys = function (column) {\n    return this.foreignKeys.filter(function (foreignKey) {\n      return !!foreignKey.columnNames.find(function (columnName) {\n        return columnName === column.name;\n      });\n    });\n  };\n  /**\n   * Returns all column uniques.\n   */\n\n\n  Table.prototype.findColumnUniques = function (column) {\n    return this.uniques.filter(function (unique) {\n      return !!unique.columnNames.find(function (columnName) {\n        return columnName === column.name;\n      });\n    });\n  };\n  /**\n   * Returns all column checks.\n   */\n\n\n  Table.prototype.findColumnChecks = function (column) {\n    return this.checks.filter(function (check) {\n      return !!check.columnNames.find(function (columnName) {\n        return columnName === column.name;\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates table from a given entity metadata.\n   */\n\n\n  Table.create = function (entityMetadata, driver) {\n    var options = {\n      name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n      engine: entityMetadata.engine,\n      columns: entityMetadata.columns.filter(function (column) {\n        return column;\n      }).map(function (column) {\n        return TableUtils.createTableColumnOptions(column, driver);\n      }),\n      indices: entityMetadata.indices.filter(function (index) {\n        return index.synchronize === true;\n      }).map(function (index) {\n        return TableIndex.create(index);\n      }),\n      uniques: entityMetadata.uniques.map(function (unique) {\n        return TableUnique.create(unique);\n      }),\n      checks: entityMetadata.checks.map(function (check) {\n        return TableCheck.create(check);\n      }),\n      exclusions: entityMetadata.exclusions.map(function (exclusion) {\n        return TableExclusion.create(exclusion);\n      })\n    };\n    return new Table(options);\n  };\n\n  return Table;\n}();\n\nexport { Table };","map":{"version":3,"sources":["../browser/src/schema-builder/table/Table.ts"],"names":[],"mappings":"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","sourcesContent":["import {TableColumn} from \"./TableColumn\";\nimport {TableIndex} from \"./TableIndex\";\nimport {TableForeignKey} from \"./TableForeignKey\";\nimport {Driver} from \"../../driver/Driver\";\nimport {TableOptions} from \"../options/TableOptions\";\nimport {EntityMetadata} from \"../../metadata/EntityMetadata\";\nimport {TableUtils} from \"../util/TableUtils\";\nimport {TableUnique} from \"./TableUnique\";\nimport {TableCheck} from \"./TableCheck\";\nimport {TableExclusion} from \"./TableExclusion\";\n\n/**\n * Table in the database represented in this class.\n */\nexport class Table {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Contains database name, schema name and table name.\n     * E.g. \"myDB\".\"mySchema\".\"myTable\"\n     */\n    name: string;\n\n    /**\n     * Table columns.\n     */\n    columns: TableColumn[] = [];\n\n    /**\n     * Table indices.\n     */\n    indices: TableIndex[] = [];\n\n    /**\n     * Table foreign keys.\n     */\n    foreignKeys: TableForeignKey[] = [];\n\n    /**\n     * Table unique constraints.\n     */\n    uniques: TableUnique[] = [];\n\n    /**\n     * Table check constraints.\n     */\n    checks: TableCheck[] = [];\n\n    /**\n     * Table exclusion constraints.\n     */\n    exclusions: TableExclusion[] = [];\n\n    /**\n     * Indicates if table was just created.\n     * This is needed, for example to check if we need to skip primary keys creation\n     * for new tables.\n     */\n    justCreated: boolean = false;\n\n    /**\n     * Table engine.\n     */\n    engine?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options?: TableOptions) {\n        if (options) {\n            this.name = options.name;\n\n            if (options.columns)\n                this.columns = options.columns.map(column => new TableColumn(column));\n\n            if (options.indices)\n                this.indices = options.indices.map(index => new TableIndex(index));\n\n            if (options.foreignKeys)\n                this.foreignKeys = options.foreignKeys.map(foreignKey => new TableForeignKey(foreignKey));\n\n            if (options.uniques)\n                this.uniques = options.uniques.map(unique => new TableUnique(unique));\n\n            if (options.checks)\n                this.checks = options.checks.map(check => new TableCheck(check));\n\n            if (options.exclusions)\n                this.exclusions = options.exclusions.map(exclusion => new TableExclusion(exclusion));\n\n            if (options.justCreated !== undefined)\n                this.justCreated = options.justCreated;\n\n            this.engine = options.engine;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    get primaryColumns(): TableColumn[] {\n        return this.columns.filter(column => column.isPrimary);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Clones this table to a new table with all properties cloned.\n     */\n    clone(): Table {\n        return new Table(<TableOptions>{\n            name: this.name,\n            columns: this.columns.map(column => column.clone()),\n            indices: this.indices.map(constraint => constraint.clone()),\n            foreignKeys: this.foreignKeys.map(constraint => constraint.clone()),\n            uniques: this.uniques.map(constraint => constraint.clone()),\n            checks: this.checks.map(constraint => constraint.clone()),\n            exclusions: this.exclusions.map(constraint => constraint.clone()),\n            justCreated: this.justCreated,\n            engine: this.engine,\n        });\n    }\n\n    /**\n     * Add column and creates its constraints.\n     */\n    addColumn(column: TableColumn): void {\n        this.columns.push(column);\n    }\n\n    /**\n     * Remove column and its constraints.\n     */\n    removeColumn(column: TableColumn): void {\n        const foundColumn = this.columns.find(c => c.name === column.name);\n        if (foundColumn)\n            this.columns.splice(this.columns.indexOf(foundColumn), 1);\n    }\n\n    /**\n     * Adds unique constraint.\n     */\n    addUniqueConstraint(uniqueConstraint: TableUnique): void {\n        this.uniques.push(uniqueConstraint);\n        if (uniqueConstraint.columnNames.length === 1) {\n            const uniqueColumn = this.columns.find(column => column.name === uniqueConstraint.columnNames[0]);\n            if (uniqueColumn)\n                uniqueColumn.isUnique = true;\n        }\n    }\n\n    /**\n     * Removes unique constraint.\n     */\n    removeUniqueConstraint(removedUnique: TableUnique): void {\n        const foundUnique = this.uniques.find(unique => unique.name === removedUnique.name);\n        if (foundUnique) {\n            this.uniques.splice(this.uniques.indexOf(foundUnique), 1);\n            if (foundUnique.columnNames.length === 1) {\n                const uniqueColumn = this.columns.find(column => column.name === foundUnique.columnNames[0]);\n                if (uniqueColumn)\n                    uniqueColumn.isUnique = false;\n            }\n        }\n    }\n\n    /**\n     * Adds check constraint.\n     */\n    addCheckConstraint(checkConstraint: TableCheck): void {\n        this.checks.push(checkConstraint);\n    }\n\n    /**\n     * Removes check constraint.\n     */\n    removeCheckConstraint(removedCheck: TableCheck): void {\n        const foundCheck = this.checks.find(check => check.name === removedCheck.name);\n        if (foundCheck) {\n            this.checks.splice(this.checks.indexOf(foundCheck), 1);\n        }\n    }\n\n    /**\n     * Adds exclusion constraint.\n     */\n    addExclusionConstraint(exclusionConstraint: TableExclusion): void {\n        this.exclusions.push(exclusionConstraint);\n    }\n\n    /**\n     * Removes exclusion constraint.\n     */\n    removeExclusionConstraint(removedExclusion: TableExclusion): void {\n        const foundExclusion = this.exclusions.find(exclusion => exclusion.name === removedExclusion.name);\n        if (foundExclusion) {\n            this.exclusions.splice(this.exclusions.indexOf(foundExclusion), 1);\n        }\n    }\n\n    /**\n     * Adds foreign keys.\n     */\n    addForeignKey(foreignKey: TableForeignKey): void {\n        this.foreignKeys.push(foreignKey);\n    }\n\n    /**\n     * Removes foreign key.\n     */\n    removeForeignKey(removedForeignKey: TableForeignKey): void {\n        const fk = this.foreignKeys.find(foreignKey => foreignKey.name === removedForeignKey.name);\n        if (fk)\n            this.foreignKeys.splice(this.foreignKeys.indexOf(fk), 1);\n    }\n\n    /**\n     * Adds index.\n     */\n    addIndex(index: TableIndex, isMysql: boolean = false): void {\n        this.indices.push(index);\n\n        // in Mysql unique indices and unique constraints are the same thing\n        // if index is unique and have only one column, we mark this column as unique\n        if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n            const column = this.columns.find(c => c.name === index.columnNames[0]);\n            if (column)\n                column.isUnique = true;\n        }\n    }\n\n    /**\n     * Removes index.\n     */\n    removeIndex(tableIndex: TableIndex, isMysql: boolean = false): void {\n        const index = this.indices.find(index => index.name === tableIndex.name);\n        if (index) {\n            this.indices.splice(this.indices.indexOf(index), 1);\n\n            // in Mysql unique indices and unique constraints are the same thing\n            // if index is unique and have only one column, we move `unique` attribute from its column\n            if (index.columnNames.length === 1 && index.isUnique && isMysql) {\n                const column = this.columns.find(c => c.name === index.columnNames[0]);\n                if (column)\n                    column.isUnique = this.indices.some(ind => ind.columnNames.length === 1 && ind.columnNames[0] === column.name && !!index.isUnique);\n            }\n        }\n    }\n\n    findColumnByName(name: string): TableColumn|undefined {\n        return this.columns.find(column => column.name === name);\n    }\n\n    /**\n     * Returns all column indices.\n     */\n    findColumnIndices(column: TableColumn): TableIndex[] {\n        return this.indices.filter(index => {\n           return !!index.columnNames.find(columnName => columnName === column.name);\n        });\n    }\n\n    /**\n     * Returns all column foreign keys.\n     */\n    findColumnForeignKeys(column: TableColumn): TableForeignKey[] {\n        return this.foreignKeys.filter(foreignKey => {\n            return !!foreignKey.columnNames.find(columnName => columnName === column.name);\n        });\n    }\n\n    /**\n     * Returns all column uniques.\n     */\n    findColumnUniques(column: TableColumn): TableUnique[] {\n        return this.uniques.filter(unique => {\n            return !!unique.columnNames.find(columnName => columnName === column.name);\n        });\n    }\n\n    /**\n     * Returns all column checks.\n     */\n    findColumnChecks(column: TableColumn): TableCheck[] {\n        return this.checks.filter(check => {\n            return !!check.columnNames!.find(columnName => columnName === column.name);\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates table from a given entity metadata.\n     */\n    static create(entityMetadata: EntityMetadata, driver: Driver): Table {\n        const options: TableOptions = {\n            name: driver.buildTableName(entityMetadata.tableName, entityMetadata.schema, entityMetadata.database),\n            engine: entityMetadata.engine,\n            columns: entityMetadata.columns\n                .filter(column => column)\n                .map(column => TableUtils.createTableColumnOptions(column, driver)),\n            indices: entityMetadata.indices\n                .filter(index => index.synchronize === true)\n                .map(index => TableIndex.create(index)),\n            uniques: entityMetadata.uniques.map(unique => TableUnique.create(unique)),\n            checks: entityMetadata.checks.map(check => TableCheck.create(check)),\n            exclusions: entityMetadata.exclusions.map(exclusion => TableExclusion.create(exclusion)),\n        };\n\n        return new Table(options);\n    }\n\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}