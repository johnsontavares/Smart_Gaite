{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../\";\n/**\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\n * occurs. Those classes must implement EventSubscriberInterface interface.\n */\n\nexport function EventSubscriber() {\n  return function (target) {\n    getMetadataArgsStorage().entitySubscribers.push({\n      target: target\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/listeners/EventSubscriber.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAR,QAAqC,QAArC;AAGA;;;AAGG;;AACH,OAAM,SAAU,eAAV,GAAyB;AAC3B,SAAO,UAAU,MAAV,EAA0B;AAE7B,IAAA,sBAAsB,GAAG,iBAAzB,CAA2C,IAA3C,CAAgD;AAC5C,MAAA,MAAM,EAAE;AADoC,KAAhD;AAGH,GALD;AAMH","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\nimport {EntitySubscriberMetadataArgs} from \"../../metadata-args/EntitySubscriberMetadataArgs\";\n\n/**\n * Classes decorated with this decorator will listen to ORM events and their methods will be triggered when event\n * occurs. Those classes must implement EventSubscriberInterface interface.\n */\nexport function EventSubscriber(): ClassDecorator {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().entitySubscribers.push({\n            target: target\n        } as EntitySubscriberMetadataArgs);\n    };\n}"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}