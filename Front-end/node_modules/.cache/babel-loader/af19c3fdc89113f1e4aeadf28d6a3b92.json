{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { AbstractSqliteQueryRunner } from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\n/**\n * Runs queries on a single sqlite database connection.\n */\n\nvar NativescriptQueryRunner =\n/** @class */\nfunction (_super) {\n  __extends(NativescriptQueryRunner, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function NativescriptQueryRunner(driver) {\n    var _this = _super.call(this) || this;\n\n    _this.driver = driver;\n    _this.connection = driver.connection;\n    _this.broadcaster = new Broadcaster(_this);\n    return _this;\n  }\n  /**\n   * Executes a given SQL query.\n   */\n\n\n  NativescriptQueryRunner.prototype.query = function (query, parameters) {\n    var _this = this;\n\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    var connection = this.driver.connection;\n    return new Promise(function (ok, fail) {\n      var isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n\n      var handler = function (err, result) {\n        // log slow queries if maxQueryExecution time is set\n        var maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\n        var queryEndTime = +new Date();\n        var queryExecutionTime = queryEndTime - queryStartTime;\n        if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n        if (err) {\n          connection.logger.logQueryError(err, query, parameters, this);\n          fail(new QueryFailedError(query, parameters, err));\n        } else {\n          // when isInsertQuery == true, result is the id\n          ok(result);\n        }\n      };\n\n      _this.driver.connection.logger.logQuery(query, parameters, _this);\n\n      var queryStartTime = +new Date();\n\n      _this.connect().then(function (databaseConnection) {\n        if (isInsertQuery) {\n          databaseConnection.execSQL(query, parameters, handler);\n        } else {\n          databaseConnection.all(query, parameters, handler);\n        }\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Parametrizes given object of values. Used to create column=value queries.\n   */\n\n\n  NativescriptQueryRunner.prototype.parametrize = function (objectLiteral, startIndex) {\n    if (startIndex === void 0) {\n      startIndex = 0;\n    }\n\n    return Object.keys(objectLiteral).map(function (key, index) {\n      return \"\\\"\" + key + \"\\\"\" + \"=?\";\n    });\n  };\n\n  return NativescriptQueryRunner;\n}(AbstractSqliteQueryRunner);\n\nexport { NativescriptQueryRunner };","map":{"version":3,"sources":["../browser/src/driver/nativescript/NativescriptQueryRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {AbstractSqliteQueryRunner} from \"../sqlite-abstract/AbstractSqliteQueryRunner\";\nimport {NativescriptDriver} from \"./NativescriptDriver\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\n\n/**\n * Runs queries on a single sqlite database connection.\n */\nexport class NativescriptQueryRunner extends AbstractSqliteQueryRunner {\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: NativescriptDriver;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: NativescriptDriver) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const connection = this.driver.connection;\n\n        return new Promise<any[]>( (ok, fail) => {\n            const isInsertQuery = query.substr(0, 11) === \"INSERT INTO\";\n\n            const handler = function (err: any, result: any) {\n\n                // log slow queries if maxQueryExecution time is set\n                const maxQueryExecutionTime = connection.options.maxQueryExecutionTime;\n                const queryEndTime = +new Date();\n                const queryExecutionTime = queryEndTime - queryStartTime;\n                if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                    connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n                if (err) {\n                    connection.logger.logQueryError(err, query, parameters, this);\n                    fail(new QueryFailedError(query, parameters, err));\n                } else {\n                    // when isInsertQuery == true, result is the id\n                    ok(result);\n                }\n            };\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            const queryStartTime = +new Date();\n            this.connect().then(databaseConnection => {\n                if (isInsertQuery) {\n                    databaseConnection.execSQL(query, parameters, handler);\n                } else {\n                    databaseConnection.all(query, parameters, handler);\n                }\n            });\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Parametrizes given object of values. Used to create column=value queries.\n     */\n    protected parametrize(objectLiteral: ObjectLiteral, startIndex: number = 0): string[] {\n        return Object.keys(objectLiteral).map((key, index) => `\"${key}\"` + \"=?\");\n    }\n}"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}