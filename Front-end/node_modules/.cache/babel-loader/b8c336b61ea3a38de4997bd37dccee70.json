{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { SapQueryRunner } from \"./SapQueryRunner\";\n/**\n * Organizes communication with SAP Hana DBMS.\n *\n * todo: looks like there is no built in support for connection pooling, we need to figure out something\n */\n\nvar SapDriver =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function SapDriver(connection) {\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    this.slaves = [];\n    /**\n     * Indicates if replication is enabled.\n     */\n\n    this.isReplicated = false;\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n\n    this.treeSupport = true;\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html\n     */\n\n    this.supportedDataTypes = [\"tinyint\", \"smallint\", \"int\", \"integer\", \"bigint\", \"smalldecimal\", \"decimal\", \"dec\", \"real\", \"double\", \"float\", \"date\", \"time\", \"seconddate\", \"timestamp\", \"boolean\", \"char\", \"nchar\", \"varchar\", \"nvarchar\", \"text\", \"alphanum\", \"shorttext\", \"array\", \"varbinary\", \"blob\", \"clob\", \"nclob\", \"st_geometry\", \"st_point\"];\n    /**\n     * Gets list of spatial column data types.\n     */\n\n    this.spatialTypes = [\"st_geometry\", \"st_point\"];\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n\n    this.withLengthColumnTypes = [\"varchar\", \"nvarchar\", \"alphanum\", \"shorttext\", \"varbinary\"];\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n\n    this.withPrecisionColumnTypes = [\"decimal\"];\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n\n    this.withScaleColumnTypes = [\"decimal\"];\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n\n    this.mappedDataTypes = {\n      createDate: \"timestamp\",\n      createDateDefault: \"CURRENT_TIMESTAMP\",\n      updateDate: \"timestamp\",\n      updateDateDefault: \"CURRENT_TIMESTAMP\",\n      deleteDate: \"timestamp\",\n      deleteDateNullable: true,\n      version: \"integer\",\n      treeLevel: \"integer\",\n      migrationId: \"integer\",\n      migrationName: \"nvarchar\",\n      migrationTimestamp: \"bigint\",\n      cacheId: \"integer\",\n      cacheIdentifier: \"nvarchar\",\n      cacheTime: \"bigint\",\n      cacheDuration: \"integer\",\n      cacheQuery: \"nvarchar(5000)\",\n      cacheResult: \"text\",\n      metadataType: \"nvarchar\",\n      metadataDatabase: \"nvarchar\",\n      metadataSchema: \"nvarchar\",\n      metadataTable: \"nvarchar\",\n      metadataName: \"nvarchar\",\n      metadataValue: \"nvarchar(5000)\"\n    };\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n\n    this.dataTypeDefaults = {\n      \"char\": {\n        length: 1\n      },\n      \"nchar\": {\n        length: 1\n      },\n      \"varchar\": {\n        length: 255\n      },\n      \"nvarchar\": {\n        length: 255\n      },\n      \"shorttext\": {\n        length: 255\n      },\n      \"varbinary\": {\n        length: 255\n      },\n      \"decimal\": {\n        precision: 18,\n        scale: 0\n      }\n    };\n    /**\n     * Max length allowed by SAP HANA for aliases (identifiers).\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html\n     */\n\n    this.maxAliasLength = 128;\n    this.connection = connection;\n    this.options = connection.options;\n    this.loadDependencies();\n  } // -------------------------------------------------------------------------\n  // Public Implemented Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs connection to the database.\n   * Based on pooling options, it can either create connection immediately,\n   * either create a pool and create connection when needed.\n   */\n\n\n  SapDriver.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var dbParams, options, logger, poolErrorHandler;\n      return __generator(this, function (_a) {\n        dbParams = __assign({\n          hostName: this.options.host,\n          port: this.options.port,\n          userName: this.options.username,\n          password: this.options.password\n        }, this.options.extra);\n        if (this.options.database) dbParams.databaseName = this.options.database;\n        if (this.options.encrypt) dbParams.encrypt = this.options.encrypt;\n        if (this.options.sslValidateCertificate) dbParams.validateCertificate = this.options.sslValidateCertificate;\n        if (this.options.key) dbParams.key = this.options.key;\n        if (this.options.cert) dbParams.cert = this.options.cert;\n        if (this.options.ca) dbParams.ca = this.options.ca;\n        options = {\n          min: this.options.pool && this.options.pool.min ? this.options.pool.min : 1,\n          max: this.options.pool && this.options.pool.max ? this.options.pool.max : 10\n        };\n        if (this.options.pool && this.options.pool.checkInterval) options.checkInterval = this.options.pool.checkInterval;\n        if (this.options.pool && this.options.pool.maxWaitingRequests) options.maxWaitingRequests = this.options.pool.maxWaitingRequests;\n        if (this.options.pool && this.options.pool.requestTimeout) options.requestTimeout = this.options.pool.requestTimeout;\n        if (this.options.pool && this.options.pool.idleTimeout) options.idleTimeout = this.options.pool.idleTimeout;\n        logger = this.connection.logger;\n\n        poolErrorHandler = options.poolErrorHandler || function (error) {\n          return logger.log(\"warn\", \"SAP Hana pool raised an error. \" + error);\n        };\n\n        this.client.eventEmitter.on(\"poolError\", poolErrorHandler); // create the pool\n\n        this.master = this.client.createPool(dbParams, options);\n        this.database = this.options.database;\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Makes any action after connection (e.g. create extensions in Postgres driver).\n   */\n\n\n  SapDriver.prototype.afterConnect = function () {\n    return Promise.resolve();\n  };\n  /**\n   * Closes connection with the database.\n   */\n\n\n  SapDriver.prototype.disconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var promise;\n      return __generator(this, function (_a) {\n        promise = this.master.clear();\n        this.master = undefined;\n        return [2\n        /*return*/\n        , promise];\n      });\n    });\n  };\n  /**\n   * Creates a schema builder used to build and sync a schema.\n   */\n\n\n  SapDriver.prototype.createSchemaBuilder = function () {\n    return new RdbmsSchemaBuilder(this.connection);\n  };\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  SapDriver.prototype.createQueryRunner = function (mode) {\n    return new SapQueryRunner(this, mode);\n  };\n  /**\n   * Replaces parameters in the given sql with special escaping character\n   * and an array of parameter names to be passed to a query.\n   */\n\n\n  SapDriver.prototype.escapeQueryWithParameters = function (sql, parameters, nativeParameters) {\n    var builtParameters = Object.keys(nativeParameters).map(function (key) {\n      if (nativeParameters[key] instanceof Date) return DateUtils.mixedDateToDatetimeString(nativeParameters[key], true);\n      return nativeParameters[key];\n    });\n    if (!parameters || !Object.keys(parameters).length) return [sql, builtParameters];\n    var keys = Object.keys(parameters).map(function (parameter) {\n      return \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\";\n    }).join(\"|\");\n    sql = sql.replace(new RegExp(keys, \"g\"), function (key) {\n      var value;\n      var isArray = false;\n\n      if (key.substr(0, 4) === \":...\") {\n        isArray = true;\n        value = parameters[key.substr(4)];\n      } else {\n        value = parameters[key.substr(1)];\n      }\n\n      if (isArray) {\n        return value.map(function (v) {\n          builtParameters.push(v);\n          return \"?\"; // return \"$\" + builtParameters.length;\n        }).join(\", \");\n      } else if (value instanceof Function) {\n        return value();\n      } else if (value instanceof Date) {\n        return DateUtils.mixedDateToDatetimeString(value, true);\n      } else {\n        builtParameters.push(value);\n        return \"?\"; // return \"$\" + builtParameters.length;\n      }\n    }); // todo: make replace only in value statements, otherwise problems\n\n    return [sql, builtParameters];\n  };\n  /**\n   * Escapes a column name.\n   */\n\n\n  SapDriver.prototype.escape = function (columnName) {\n    return \"\\\"\" + columnName + \"\\\"\";\n  };\n  /**\n   * Build full table name with schema name and table name.\n   * E.g. \"mySchema\".\"myTable\"\n   */\n\n\n  SapDriver.prototype.buildTableName = function (tableName, schema) {\n    return schema ? schema + \".\" + tableName : tableName;\n  };\n  /**\n   * Prepares given value to a value to be persisted, based on its column type and metadata.\n   */\n\n\n  SapDriver.prototype.preparePersistentValue = function (value, columnMetadata) {\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n    if (value === null || value === undefined) return value;\n\n    if (columnMetadata.type === Boolean) {\n      return value === true ? 1 : 0;\n    } else if (columnMetadata.type === \"date\") {\n      return DateUtils.mixedDateToDateString(value);\n    } else if (columnMetadata.type === \"time\") {\n      return DateUtils.mixedDateToTimeString(value);\n    } else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === Date) {\n      return DateUtils.mixedDateToDatetimeString(value, true);\n    } else if (columnMetadata.type === \"seconddate\") {\n      return DateUtils.mixedDateToDatetimeString(value, false);\n    } else if (columnMetadata.type === \"simple-array\") {\n      return DateUtils.simpleArrayToString(value);\n    } else if (columnMetadata.type === \"simple-json\") {\n      return DateUtils.simpleJsonToString(value);\n    } else if (columnMetadata.type === \"simple-enum\") {\n      return DateUtils.simpleEnumToString(value);\n    } else if (columnMetadata.isArray) {\n      return function () {\n        return \"ARRAY(\" + value.map(function (it) {\n          return \"'\" + it + \"'\";\n        }) + \")\";\n      };\n    }\n\n    return value;\n  };\n  /**\n   * Prepares given value to a value to be persisted, based on its column type or metadata.\n   */\n\n\n  SapDriver.prototype.prepareHydratedValue = function (value, columnMetadata) {\n    if (value === null || value === undefined) return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n    if (columnMetadata.type === Boolean) {\n      value = value ? true : false;\n    } else if (columnMetadata.type === \"timestamp\" || columnMetadata.type === \"seconddate\" || columnMetadata.type === Date) {\n      value = DateUtils.normalizeHydratedDate(value);\n    } else if (columnMetadata.type === \"date\") {\n      value = DateUtils.mixedDateToDateString(value);\n    } else if (columnMetadata.type === \"time\") {\n      value = DateUtils.mixedTimeToString(value);\n    } else if (columnMetadata.type === \"simple-array\") {\n      value = DateUtils.stringToSimpleArray(value);\n    } else if (columnMetadata.type === \"simple-json\") {\n      value = DateUtils.stringToSimpleJson(value);\n    } else if (columnMetadata.type === \"simple-enum\") {\n      value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n    }\n\n    if (columnMetadata.transformer) value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n    return value;\n  };\n  /**\n   * Creates a database type from a given column metadata.\n   */\n\n\n  SapDriver.prototype.normalizeType = function (column) {\n    if (column.type === Number || column.type === \"int\") {\n      return \"integer\";\n    } else if (column.type === String) {\n      return \"nvarchar\";\n    } else if (column.type === Date) {\n      return \"timestamp\";\n    } else if (column.type === Boolean) {\n      return \"boolean\";\n    } else if (column.type === Buffer) {\n      return \"blob\";\n    } else if (column.type === \"uuid\") {\n      return \"nvarchar\";\n    } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\n      return \"text\";\n    } else if (column.type === \"simple-enum\") {\n      return \"nvarchar\";\n    } else {\n      return column.type || \"\";\n    }\n  };\n  /**\n   * Normalizes \"default\" value of the column.\n   */\n\n\n  SapDriver.prototype.normalizeDefault = function (columnMetadata) {\n    var defaultValue = columnMetadata.default;\n\n    if (typeof defaultValue === \"number\") {\n      return \"\" + defaultValue;\n    } else if (typeof defaultValue === \"boolean\") {\n      return defaultValue === true ? \"true\" : \"false\";\n    } else if (typeof defaultValue === \"function\") {\n      return defaultValue();\n    } else if (typeof defaultValue === \"string\") {\n      return \"'\" + defaultValue + \"'\";\n    } else {\n      return defaultValue;\n    }\n  };\n  /**\n   * Normalizes \"isUnique\" value of the column.\n   */\n\n\n  SapDriver.prototype.normalizeIsUnique = function (column) {\n    return column.entityMetadata.indices.some(function (idx) {\n      return idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column;\n    });\n  };\n  /**\n   * Returns default column lengths, which is required on column creation.\n   */\n\n\n  SapDriver.prototype.getColumnLength = function (column) {\n    if (column.length) return column.length.toString();\n    if (column.generationStrategy === \"uuid\") return \"36\";\n\n    switch (column.type) {\n      case \"varchar\":\n      case \"nvarchar\":\n      case \"shorttext\":\n      case String:\n        return \"255\";\n\n      case \"alphanum\":\n        return \"127\";\n\n      case \"varbinary\":\n        return \"255\";\n    }\n\n    return \"\";\n  };\n  /**\n   * Creates column type definition including length, precision and scale\n   */\n\n\n  SapDriver.prototype.createFullType = function (column) {\n    var type = column.type; // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n\n    if (this.getColumnLength(column)) {\n      type += \"(\" + this.getColumnLength(column) + \")\";\n    } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n      type += \"(\" + column.precision + \",\" + column.scale + \")\";\n    } else if (column.precision !== null && column.precision !== undefined) {\n      type += \"(\" + column.precision + \")\";\n    }\n\n    if (column.isArray) type += \" array\";\n    return type;\n  };\n  /**\n   * Obtains a new database connection to a master server.\n   * Used for replication.\n   * If replication is not setup then returns default connection's database connection.\n   */\n\n\n  SapDriver.prototype.obtainMasterConnection = function () {\n    return this.master.getConnection();\n  };\n  /**\n   * Obtains a new database connection to a slave server.\n   * Used for replication.\n   * If replication is not setup then returns master (default) connection's database connection.\n   */\n\n\n  SapDriver.prototype.obtainSlaveConnection = function () {\n    return this.obtainMasterConnection();\n  };\n  /**\n   * Creates generated map of values generated or returned by database after INSERT query.\n   */\n\n\n  SapDriver.prototype.createGeneratedMap = function (metadata, insertResult) {\n    var generatedMap = metadata.generatedColumns.reduce(function (map, generatedColumn) {\n      var value;\n\n      if (generatedColumn.generationStrategy === \"increment\" && insertResult) {\n        value = insertResult; // } else if (generatedColumn.generationStrategy === \"uuid\") {\n        //     console.log(\"getting db value:\", generatedColumn.databaseName);\n        //     value = generatedColumn.getEntityValue(uuidMap);\n      }\n\n      return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n    }, {});\n    return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n  };\n  /**\n   * Differentiate columns of this table and columns from the given column metadatas columns\n   * and returns only changed.\n   */\n\n\n  SapDriver.prototype.findChangedColumns = function (tableColumns, columnMetadatas) {\n    var _this = this;\n\n    return columnMetadatas.filter(function (columnMetadata) {\n      var tableColumn = tableColumns.find(function (c) {\n        return c.name === columnMetadata.databaseName;\n      });\n      if (!tableColumn) return false; // we don't need new columns, we only need exist and changed\n      // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n      // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n      // console.log(\"type:\", tableColumn.type, _this.normalizeType(columnMetadata));\n      // console.log(\"length:\", tableColumn.length, _this.getColumnLength(columnMetadata));\n      // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n      // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n      // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n      // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n      // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n      // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n      // console.log(\"isUnique:\", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));\n      // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n      // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n      // console.log(\"==========================================\");\n\n      var normalizeDefault = _this.normalizeDefault(columnMetadata);\n\n      var hanaNullComapatibleDefault = normalizeDefault == null ? undefined : normalizeDefault;\n      return tableColumn.name !== columnMetadata.databaseName || tableColumn.type !== _this.normalizeType(columnMetadata) || columnMetadata.length && tableColumn.length !== _this.getColumnLength(columnMetadata) || tableColumn.precision !== columnMetadata.precision || tableColumn.scale !== columnMetadata.scale // || tableColumn.comment !== columnMetadata.comment || // todo\n      || !tableColumn.isGenerated && hanaNullComapatibleDefault !== tableColumn.default // we included check for generated here, because generated columns already can have default values\n      || tableColumn.isPrimary !== columnMetadata.isPrimary || tableColumn.isNullable !== columnMetadata.isNullable || tableColumn.isUnique !== _this.normalizeIsUnique(columnMetadata) || columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated;\n    });\n  };\n  /**\n   * Returns true if driver supports RETURNING / OUTPUT statement.\n   */\n\n\n  SapDriver.prototype.isReturningSqlSupported = function () {\n    return false;\n  };\n  /**\n   * Returns true if driver supports uuid values generation on its own.\n   */\n\n\n  SapDriver.prototype.isUUIDGenerationSupported = function () {\n    return false;\n  };\n  /**\n   * Returns true if driver supports fulltext indices.\n   */\n\n\n  SapDriver.prototype.isFullTextColumnTypeSupported = function () {\n    return true;\n  };\n  /**\n   * Creates an escaped parameter.\n   */\n\n\n  SapDriver.prototype.createParameter = function (parameterName, index) {\n    return \"?\";\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n\n\n  SapDriver.prototype.loadDependencies = function () {\n    try {\n      this.client = PlatformTools.load(\"hdb-pool\");\n    } catch (e) {\n      // todo: better error for browser env\n      throw new DriverPackageNotInstalledError(\"SAP Hana\", \"hdb-pool\");\n    }\n\n    try {\n      PlatformTools.load(\"@sap/hana-client\");\n    } catch (e) {\n      // todo: better error for browser env\n      throw new DriverPackageNotInstalledError(\"SAP Hana\", \"@sap/hana-client\");\n    }\n  };\n\n  return SapDriver;\n}();\n\nexport { SapDriver };","map":{"version":3,"sources":["../browser/src/driver/sap/SapDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import {ColumnType, Connection, EntityMetadata, ObjectLiteral, TableColumn} from \"../..\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {ApplyValueTransformers} from \"../../util/ApplyValueTransformers\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Driver} from \"../Driver\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {SapConnectionOptions} from \"./SapConnectionOptions\";\nimport {SapQueryRunner} from \"./SapQueryRunner\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n/**\n * Organizes communication with SAP Hana DBMS.\n *\n * todo: looks like there is no built in support for connection pooling, we need to figure out something\n */\nexport class SapDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Hana Pool instance.\n     */\n    client: any;\n\n    /**\n     * Pool for master database.\n     */\n    master: any;\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: SapConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a1569875191014b507cf392724b7eb.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"tinyint\",\n        \"smallint\",\n        \"int\",\n        \"integer\",\n        \"bigint\",\n        \"smalldecimal\",\n        \"decimal\",\n        \"dec\",\n        \"real\",\n        \"double\",\n        \"float\",\n        \"date\",\n        \"time\",\n        \"seconddate\",\n        \"timestamp\",\n        \"boolean\",\n        \"char\",\n        \"nchar\",\n        \"varchar\",\n        \"nvarchar\",\n        \"text\",\n        \"alphanum\",\n        \"shorttext\",\n        \"array\",\n        \"varbinary\",\n        \"blob\",\n        \"clob\",\n        \"nclob\",\n        \"st_geometry\",\n        \"st_point\",\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [\n        \"st_geometry\",\n        \"st_point\",\n    ];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\n        \"varchar\",\n        \"nvarchar\",\n        \"alphanum\",\n        \"shorttext\",\n        \"varbinary\"\n    ];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"decimal\",\n    ];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\n        \"decimal\",\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"CURRENT_TIMESTAMP\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"CURRENT_TIMESTAMP\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"integer\",\n        treeLevel: \"integer\",\n        migrationId: \"integer\",\n        migrationName: \"nvarchar\",\n        migrationTimestamp: \"bigint\",\n        cacheId: \"integer\",\n        cacheIdentifier: \"nvarchar\",\n        cacheTime: \"bigint\",\n        cacheDuration: \"integer\",\n        cacheQuery: \"nvarchar(5000)\" as any,\n        cacheResult: \"text\",\n        metadataType: \"nvarchar\",\n        metadataDatabase: \"nvarchar\",\n        metadataSchema: \"nvarchar\",\n        metadataTable: \"nvarchar\",\n        metadataName: \"nvarchar\",\n        metadataValue: \"nvarchar(5000)\" as any,\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        \"char\": { length: 1 },\n        \"nchar\": { length: 1 },\n        \"varchar\": { length: 255 },\n        \"nvarchar\": { length: 255 },\n        \"shorttext\": { length: 255 },\n        \"varbinary\": { length: 255 },\n        \"decimal\": { precision: 18, scale: 0 },\n    };\n\n    /**\n     * Max length allowed by SAP HANA for aliases (identifiers).\n     * @see https://help.sap.com/viewer/4fe29514fd584807ac9f2a04f6754767/2.0.03/en-US/20a760537519101497e3cfe07b348f3c.html\n     */\n    maxAliasLength = 128;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as SapConnectionOptions;\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        // HANA connection info\n        const dbParams = {\n            hostName: this.options.host,\n            port: this.options.port,\n            userName: this.options.username,\n            password: this.options.password,\n            ...this.options.extra\n        };\n\n        if (this.options.database) dbParams.databaseName = this.options.database;\n        if (this.options.encrypt) dbParams.encrypt = this.options.encrypt;\n        if (this.options.sslValidateCertificate) dbParams.validateCertificate = this.options.sslValidateCertificate;\n        if (this.options.key) dbParams.key = this.options.key;\n        if (this.options.cert) dbParams.cert = this.options.cert;\n        if (this.options.ca) dbParams.ca = this.options.ca;\n\n        // pool options\n        const options: any = {\n            min: this.options.pool && this.options.pool.min ? this.options.pool.min : 1,\n            max: this.options.pool && this.options.pool.max ? this.options.pool.max : 10,\n        };\n\n        if (this.options.pool && this.options.pool.checkInterval) options.checkInterval = this.options.pool.checkInterval;\n        if (this.options.pool && this.options.pool.maxWaitingRequests) options.maxWaitingRequests = this.options.pool.maxWaitingRequests;\n        if (this.options.pool && this.options.pool.requestTimeout) options.requestTimeout = this.options.pool.requestTimeout;\n        if (this.options.pool && this.options.pool.idleTimeout) options.idleTimeout = this.options.pool.idleTimeout;\n\n        const { logger } = this.connection;\n\n        const poolErrorHandler = options.poolErrorHandler || ((error: any) => logger.log(\"warn\", `SAP Hana pool raised an error. ${error}`));\n        this.client.eventEmitter.on(\"poolError\", poolErrorHandler);\n\n        // create the pool\n        this.master = this.client.createPool(dbParams, options);\n\n        this.database = this.options.database;\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        const promise = this.master.clear();\n        this.master = undefined;\n        return promise;\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new SapQueryRunner(this, mode);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral, nativeParameters: ObjectLiteral): [string, any[]] {\n        const builtParameters: any[] = Object.keys(nativeParameters).map(key => {\n\n            if (nativeParameters[key] instanceof Date)\n                return DateUtils.mixedDateToDatetimeString(nativeParameters[key], true);\n\n            return nativeParameters[key];\n        });\n\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, builtParameters];\n\n        const keys = Object.keys(parameters).map(parameter => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string): string => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value.map((v: any) => {\n                    builtParameters.push(v);\n                    return \"?\";\n                    // return \"$\" + builtParameters.length;\n                }).join(\", \");\n\n            } else if (value instanceof Function) {\n                return value();\n\n            } else if (value instanceof Date) {\n                return DateUtils.mixedDateToDatetimeString(value, true);\n\n            } else {\n                builtParameters.push(value);\n                return \"?\";\n                // return \"$\" + builtParameters.length;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, builtParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Build full table name with schema name and table name.\n     * E.g. \"mySchema\".\"myTable\"\n     */\n    buildTableName(tableName: string, schema?: string): string {\n        return schema ? `${schema}.${tableName}` : tableName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(columnMetadata.transformer, value);\n\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedDateToTimeString(value);\n\n        } else if (columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === Date) {\n            return DateUtils.mixedDateToDatetimeString(value, true);\n\n        } else if (columnMetadata.type === \"seconddate\") {\n            return DateUtils.mixedDateToDatetimeString(value, false);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n\n        } else if (columnMetadata.type === \"simple-enum\") {\n            return DateUtils.simpleEnumToString(value);\n\n        } else if (columnMetadata.isArray) {\n            return () => `ARRAY(${value.map((it: any) => `'${it}'`)})`;\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer ? ApplyValueTransformers.transformFrom(columnMetadata.transformer, value) : value;\n\n        if (columnMetadata.type === Boolean) {\n            value = value ? true : false;\n\n        } else if (columnMetadata.type === \"timestamp\"\n            || columnMetadata.type === \"seconddate\"\n            || columnMetadata.type === Date) {\n            value = DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n\n        } else if (columnMetadata.type === \"simple-enum\") {\n            value = DateUtils.stringToSimpleEnum(value, columnMetadata);\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(columnMetadata.transformer, value);\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if (column.type === Number || column.type === \"int\") {\n            return \"integer\";\n\n        } else if (column.type === String) {\n            return \"nvarchar\";\n\n        } else if (column.type === Date) {\n            return \"timestamp\";\n\n        } else if (column.type === Boolean) {\n            return \"boolean\";\n\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\";\n\n        } else if (column.type === \"uuid\") {\n            return \"nvarchar\";\n\n        } else if (column.type === \"simple-array\" || column.type === \"simple-json\") {\n            return \"text\";\n\n        } else if (column.type === \"simple-enum\") {\n            return \"nvarchar\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string | undefined {\n        const defaultValue = columnMetadata.default;\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"true\" : \"false\";\n\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.indices.some(idx => idx.isUnique && idx.columns.length === 1 && idx.columns[0] === column);\n    }\n\n    /**\n     * Returns default column lengths, which is required on column creation.\n     */\n    getColumnLength(column: ColumnMetadata|TableColumn): string {\n        if (column.length)\n            return column.length.toString();\n\n        if (column.generationStrategy === \"uuid\")\n            return \"36\";\n\n        switch (column.type) {\n            case \"varchar\":\n            case \"nvarchar\":\n            case \"shorttext\":\n            case String:\n                return \"255\";\n            case \"alphanum\":\n                return \"127\";\n            case \"varbinary\":\n                return \"255\";\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Creates column type definition including length, precision and scale\n     */\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because SqlServer sets `varchar` and `nvarchar` length to 1 by default.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n\n        } else if (column.precision !== null && column.precision !== undefined && column.scale !== null && column.scale !== undefined) {\n            type += `(${column.precision},${column.scale})`;\n\n        } else if (column.precision !== null && column.precision !== undefined) {\n            type += `(${column.precision})`;\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return this.master.getConnection();\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        return this.obtainMasterConnection();\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        const generatedMap = metadata.generatedColumns.reduce((map, generatedColumn) => {\n            let value: any;\n            if (generatedColumn.generationStrategy === \"increment\" && insertResult) {\n                value = insertResult;\n                // } else if (generatedColumn.generationStrategy === \"uuid\") {\n                //     console.log(\"getting db value:\", generatedColumn.databaseName);\n                //     value = generatedColumn.getEntityValue(uuidMap);\n            }\n\n            return OrmUtils.mergeDeep(map, generatedColumn.createValueMap(value));\n        }, {} as ObjectLiteral);\n\n        return Object.keys(generatedMap).length > 0 ? generatedMap : undefined;\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(tableColumns: TableColumn[], columnMetadatas: ColumnMetadata[]): ColumnMetadata[] {\n        return columnMetadatas.filter(columnMetadata => {\n            const tableColumn = tableColumns.find(c => c.name === columnMetadata.databaseName);\n            if (!tableColumn)\n                return false; // we don't need new columns, we only need exist and changed\n\n            // console.log(\"table:\", columnMetadata.entityMetadata.tableName);\n            // console.log(\"name:\", tableColumn.name, columnMetadata.databaseName);\n            // console.log(\"type:\", tableColumn.type, _this.normalizeType(columnMetadata));\n            // console.log(\"length:\", tableColumn.length, _this.getColumnLength(columnMetadata));\n            // console.log(\"width:\", tableColumn.width, columnMetadata.width);\n            // console.log(\"precision:\", tableColumn.precision, columnMetadata.precision);\n            // console.log(\"scale:\", tableColumn.scale, columnMetadata.scale);\n            // console.log(\"default:\", tableColumn.default, columnMetadata.default);\n            // console.log(\"isPrimary:\", tableColumn.isPrimary, columnMetadata.isPrimary);\n            // console.log(\"isNullable:\", tableColumn.isNullable, columnMetadata.isNullable);\n            // console.log(\"isUnique:\", tableColumn.isUnique, _this.normalizeIsUnique(columnMetadata));\n            // console.log(\"isGenerated:\", tableColumn.isGenerated, columnMetadata.isGenerated);\n            // console.log((columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated));\n            // console.log(\"==========================================\");\n\n            const normalizeDefault = this.normalizeDefault(columnMetadata);\n            const hanaNullComapatibleDefault = normalizeDefault == null ? undefined : normalizeDefault;\n\n            return tableColumn.name !== columnMetadata.databaseName\n                || tableColumn.type !== this.normalizeType(columnMetadata)\n                || columnMetadata.length && tableColumn.length !== this.getColumnLength(columnMetadata)\n                || tableColumn.precision !== columnMetadata.precision\n                || tableColumn.scale !== columnMetadata.scale\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                || (!tableColumn.isGenerated && (hanaNullComapatibleDefault !== tableColumn.default)) // we included check for generated here, because generated columns already can have default values\n                || tableColumn.isPrimary !== columnMetadata.isPrimary\n                || tableColumn.isNullable !== columnMetadata.isNullable\n                || tableColumn.isUnique !== this.normalizeIsUnique(columnMetadata)\n                || (columnMetadata.generationStrategy !== \"uuid\" && tableColumn.isGenerated !== columnMetadata.isGenerated);\n        });\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\";\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.client = PlatformTools.load(\"hdb-pool\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"hdb-pool\");\n        }\n\n        try {\n            PlatformTools.load(\"@sap/hana-client\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SAP Hana\", \"@sap/hana-client\");\n        }\n    }\n\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}