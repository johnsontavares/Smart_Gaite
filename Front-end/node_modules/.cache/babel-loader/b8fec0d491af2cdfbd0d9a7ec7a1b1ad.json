{"ast":null,"code":"/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nvar PlatformTools =\n/** @class */\nfunction () {\n  function PlatformTools() {}\n  /**\n   * Gets global variable where global stuff can be stored.\n   */\n\n\n  PlatformTools.getGlobalVariable = function () {\n    if (typeof window !== \"undefined\") {\n      return window;\n    } else {\n      // NativeScript uses global, not window\n      return global;\n    }\n  };\n  /**\n   * Loads (\"require\"-s) given file or package.\n   * This operation only supports on node platform\n   */\n\n\n  PlatformTools.load = function (name) {\n    if (this.type === \"browser\") throw new Error(\"This option/function is not supported in the browser environment. Failed operation: require(\\\"\" + name + \"\\\").\");\n    return \"\";\n  };\n  /**\n   * Normalizes given path. Does \"path.normalize\".\n   */\n\n\n  PlatformTools.pathNormalize = function (pathStr) {\n    if (this.type === \"browser\") throw new Error(\"This option/function is not supported in the browser environment. Failed operation: path.normalize(\\\"\" + pathStr + \"\\\").\");\n    return \"\";\n  };\n  /**\n   * Gets file extension. Does \"path.extname\".\n   */\n\n\n  PlatformTools.pathExtname = function (pathStr) {\n    if (this.type === \"browser\") throw new Error(\"This option/function is not supported in the browser environment. Failed operation: path.extname(\\\"\" + pathStr + \"\\\").\");\n    return \"\";\n  };\n  /**\n   * Resolved given path. Does \"path.resolve\".\n   */\n\n\n  PlatformTools.pathResolve = function (pathStr) {\n    if (this.type === \"browser\") throw new Error(\"This option/function is not supported in the browser environment. Failed operation: path.resolve(\\\"\" + pathStr + \"\\\").\");\n    return \"\";\n  };\n  /**\n   * Synchronously checks if file exist. Does \"fs.existsSync\".\n   */\n\n\n  PlatformTools.fileExist = function (pathStr) {\n    if (this.type === \"browser\") throw new Error(\"This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\\\"\" + pathStr + \"\\\").\");\n    return false;\n  };\n\n  PlatformTools.dotenv = function (pathStr) {\n    if (this.type === \"browser\") throw new Error(\"This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \\\"\" + pathStr + \"\\\" }).\");\n  };\n  /**\n   * Gets environment variable.\n   */\n\n\n  PlatformTools.getEnvVariable = function (name) {\n    // if (this.type === \"browser\")\n    //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n    return undefined;\n  };\n\n  PlatformTools.readFileSync = function (filename) {\n    if (this.type === \"browser\") throw new Error(\"This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\\\"\" + filename + \"\\\").\");\n    return null;\n  };\n\n  PlatformTools.appendFileSync = function (filename, data) {\n    if (this.type === \"browser\") throw new Error(\"This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\\\"\" + filename + \"\\\").\");\n  };\n\n  PlatformTools.writeFile = function (path, data) {\n    if (this.type === \"browser\") throw new Error(\"This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\\\"\" + path + \"\\\").\");\n    return Promise.reject(null);\n  };\n  /**\n   * Highlights sql string to be print in the console.\n   */\n\n\n  PlatformTools.highlightSql = function (sql) {\n    return sql;\n  };\n  /**\n   * Highlights json string to be print in the console.\n   */\n\n\n  PlatformTools.highlightJson = function (json) {\n    return json;\n  };\n  /**\n   * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n   */\n\n\n  PlatformTools.logInfo = function (prefix, info) {\n    console.info(prefix + \" \", info);\n  };\n\n  PlatformTools.logError = function (prefix, error) {\n    console.error(prefix + \" \", error);\n  };\n\n  PlatformTools.logWarn = function (prefix, warning) {\n    console.warn(prefix + \" \", warning);\n  };\n\n  PlatformTools.log = function (message) {\n    console.log(message);\n  };\n\n  PlatformTools.warn = function (message) {\n    return message;\n  };\n  /**\n   * Type of the currently running platform.\n   */\n\n\n  PlatformTools.type = \"browser\";\n  return PlatformTools;\n}();\n\nexport { PlatformTools };\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\n\nvar EventEmitter =\n/** @class */\nfunction () {\n  function EventEmitter() {}\n\n  return EventEmitter;\n}();\n\nexport { EventEmitter };\n\nvar Readable =\n/** @class */\nfunction () {\n  function Readable() {}\n\n  return Readable;\n}();\n\nexport { Readable };\n\nvar Writable =\n/** @class */\nfunction () {\n  function Writable() {}\n\n  return Writable;\n}();\n\nexport { Writable };\n\nif (typeof window !== \"undefined\") {\n  window.Buffer = require(\"buffer/\").Buffer;\n} // NativeScript uses global, not window\n\n\nif (typeof global !== \"undefined\") {\n  global.Buffer = require(\"buffer/\").Buffer;\n}","map":{"version":3,"sources":["../browser/src/platform/BrowserPlatformTools.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Browser's implementation of the platform-specific tools.\n *\n * This file gonna replace PlatformTools for browser environment.\n * For node.js environment this class is not getting packaged.\n * Don't use methods of this class in the code, use PlatformTools methods instead.\n */\nexport class PlatformTools {\n\n    /**\n     * Type of the currently running platform.\n     */\n    static type: \"browser\"|\"node\" = \"browser\";\n\n    /**\n     * Gets global variable where global stuff can be stored.\n     */\n    static getGlobalVariable(): any {\n        if (typeof window !== \"undefined\") {\n            return window\n        } else {\n            // NativeScript uses global, not window\n            return global\n        }\n    }\n\n    /**\n     * Loads (\"require\"-s) given file or package.\n     * This operation only supports on node platform\n     */\n    static load(name: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: require(\"${name}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Normalizes given path. Does \"path.normalize\".\n     */\n    static pathNormalize(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.normalize(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Gets file extension. Does \"path.extname\".\n     */\n    static pathExtname(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.extname(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Resolved given path. Does \"path.resolve\".\n     */\n    static pathResolve(pathStr: string): string {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: path.resolve(\"${pathStr}\").`);\n\n        return \"\";\n    }\n\n    /**\n     * Synchronously checks if file exist. Does \"fs.existsSync\".\n     */\n    static fileExist(pathStr: string): boolean {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.existsSync(\"${pathStr}\").`);\n\n        return false;\n    }\n\n    static dotenv(pathStr: string): void {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: dotenv.config({ path: \"${pathStr}\" }).`);\n    }\n\n    /**\n     * Gets environment variable.\n     */\n    static getEnvVariable(name: string): any {\n        // if (this.type === \"browser\")\n        //     throw new Error(`This option/function is not supported in the browser environment. Failed operation: process.env[\"${name}\"].`);\n        return undefined;\n    }\n\n    static readFileSync(filename: string): any {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.readFileSync(\"${filename}\").`);\n        return null;\n    }\n\n    static appendFileSync(filename: string, data: any) {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.appendFileSync(\"${filename}\").`);\n    }\n\n    static writeFile(path: string, data: any): Promise<void> {\n        if (this.type === \"browser\")\n            throw new Error(`This option/function is not supported in the browser environment. Failed operation: fs.writeFile(\"${path}\").`);\n        return Promise.reject(null);\n    }\n\n    /**\n     * Highlights sql string to be print in the console.\n     */\n    static highlightSql(sql: string) {\n        return sql;\n    }\n\n    /**\n     * Highlights json string to be print in the console.\n     */\n    static highlightJson(json: string) {\n        return json;\n    }\n\n    /**\n     * Logging functions needed by AdvancedConsoleLogger (but here without chalk)\n     */\n    static logInfo(prefix: string, info: any) {\n        console.info(prefix + \" \", info);\n    }\n\n    static logError(prefix: string, error: any) {\n        console.error(prefix + \" \", error);\n    }\n\n    static logWarn(prefix: string, warning: any) {\n        console.warn(prefix + \" \", warning);\n    }\n\n    static log(message: string) {\n        console.log(message);\n    }\n\n    static warn(message: string) {\n        return message;\n    }\n}\n\n/**\n * These classes are needed for stream operations or\n * in the mongodb driver. Both aren't supported in the browser.\n */\nexport class EventEmitter {}\n\nexport class Readable {}\n\nexport class Writable {}\n\nexport interface ReadStream {}\n\n/**\n * This loads a polyfill to enable Buffers in the browser.\n */\ninterface Window {\n    Buffer: any;\n}\n\ndeclare var window: Window;\nif (typeof window !== \"undefined\") {\n    window.Buffer = require(\"buffer/\").Buffer;\n}\n// NativeScript uses global, not window\nif (typeof global !== \"undefined\") {\n    global.Buffer = require(\"buffer/\").Buffer;\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}