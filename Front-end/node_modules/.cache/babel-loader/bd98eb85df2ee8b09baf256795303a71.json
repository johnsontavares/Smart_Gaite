{"ast":null,"code":"import { __awaiter, __extends, __generator, __read, __values } from \"tslib\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { Query } from \"../Query\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\n/**\n * Runs queries on a single postgres database connection.\n */\n\nvar PostgresQueryRunner =\n/** @class */\nfunction (_super) {\n  __extends(PostgresQueryRunner, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function PostgresQueryRunner(driver, mode) {\n    var _this = _super.call(this) || this;\n\n    _this.driver = driver;\n    _this.connection = driver.connection;\n    _this.mode = mode;\n    _this.broadcaster = new Broadcaster(_this);\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates/uses database connection from the connection pool to perform further operations.\n   * Returns obtained database connection.\n   */\n\n\n  PostgresQueryRunner.prototype.connect = function () {\n    var _this = this;\n\n    if (this.databaseConnection) return Promise.resolve(this.databaseConnection);\n    if (this.databaseConnectionPromise) return this.databaseConnectionPromise;\n\n    if (this.mode === \"slave\" && this.driver.isReplicated) {\n      this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(function (_a) {\n        var _b = __read(_a, 2),\n            connection = _b[0],\n            release = _b[1];\n\n        _this.driver.connectedQueryRunners.push(_this);\n\n        _this.databaseConnection = connection;\n\n        var onErrorCallback = function () {\n          return _this.release();\n        };\n\n        _this.releaseCallback = function () {\n          _this.databaseConnection.removeListener(\"error\", onErrorCallback);\n\n          release();\n        };\n\n        _this.databaseConnection.on(\"error\", onErrorCallback);\n\n        return _this.databaseConnection;\n      });\n    } else {\n      // master\n      this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(function (_a) {\n        var _b = __read(_a, 2),\n            connection = _b[0],\n            release = _b[1];\n\n        _this.driver.connectedQueryRunners.push(_this);\n\n        _this.databaseConnection = connection;\n\n        var onErrorCallback = function () {\n          return _this.release();\n        };\n\n        _this.releaseCallback = function () {\n          _this.databaseConnection.removeListener(\"error\", onErrorCallback);\n\n          release();\n        };\n\n        _this.databaseConnection.on(\"error\", onErrorCallback);\n\n        return _this.databaseConnection;\n      });\n    }\n\n    return this.databaseConnectionPromise;\n  };\n  /**\n   * Releases used database connection.\n   * You cannot use query runner methods once its released.\n   */\n\n\n  PostgresQueryRunner.prototype.release = function () {\n    if (this.isReleased) {\n      return Promise.resolve();\n    }\n\n    this.isReleased = true;\n    if (this.releaseCallback) this.releaseCallback();\n    var index = this.driver.connectedQueryRunners.indexOf(this);\n    if (index !== -1) this.driver.connectedQueryRunners.splice(index, 1);\n    return Promise.resolve();\n  };\n  /**\n   * Starts transaction.\n   */\n\n\n  PostgresQueryRunner.prototype.startTransaction = function (isolationLevel) {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isTransactionActive) throw new TransactionAlreadyStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            this.isTransactionActive = true;\n            return [4\n            /*yield*/\n            , this.query(\"START TRANSACTION\")];\n\n          case 3:\n            _a.sent();\n\n            if (!isolationLevel) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 6:\n            _a.sent();\n\n            _a.label = 7;\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Commits transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  PostgresQueryRunner.prototype.commitTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.query(\"COMMIT\")];\n\n          case 3:\n            _a.sent();\n\n            this.isTransactionActive = false;\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Rollbacks transaction.\n   * Error will be thrown if transaction was not started.\n   */\n\n\n  PostgresQueryRunner.prototype.rollbackTransaction = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var beforeBroadcastResult, afterBroadcastResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isTransactionActive) throw new TransactionNotStartedError();\n            beforeBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n            if (!(beforeBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , Promise.all(beforeBroadcastResult.promises)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [4\n            /*yield*/\n            , this.query(\"ROLLBACK\")];\n\n          case 3:\n            _a.sent();\n\n            this.isTransactionActive = false;\n            afterBroadcastResult = new BroadcasterResult();\n            this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n            if (!(afterBroadcastResult.promises.length > 0)) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , Promise.all(afterBroadcastResult.promises)];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Executes a given SQL query.\n   */\n\n\n  PostgresQueryRunner.prototype.query = function (query, parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var databaseConnection, queryStartTime, result, maxQueryExecutionTime, queryEndTime, queryExecutionTime, err_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n            return [4\n            /*yield*/\n            , this.connect()];\n\n          case 1:\n            databaseConnection = _a.sent();\n            this.driver.connection.logger.logQuery(query, parameters, this);\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n\n            queryStartTime = +new Date();\n            return [4\n            /*yield*/\n            , databaseConnection.query(query, parameters)];\n\n          case 3:\n            result = _a.sent();\n            maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n            queryEndTime = +new Date();\n            queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime) this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n            switch (result.command) {\n              case \"DELETE\":\n              case \"UPDATE\":\n                // for UPDATE and DELETE query additionally return number of affected rows\n                return [2\n                /*return*/\n                , [result.rows, result.rowCount]];\n                break;\n\n              default:\n                return [2\n                /*return*/\n                , result.rows];\n            }\n\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            err_1 = _a.sent();\n            this.driver.connection.logger.logQueryError(err_1, query, parameters, this);\n            throw new QueryFailedError(query, parameters, err_1);\n\n          case 5:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns raw data stream.\n   */\n\n\n  PostgresQueryRunner.prototype.stream = function (query, parameters, onEnd, onError) {\n    var _this = this;\n\n    var QueryStream = this.driver.loadStreamDependency();\n    if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n    return new Promise(function (ok, fail) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var databaseConnection, stream, err_2;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n\n              return [4\n              /*yield*/\n              , this.connect()];\n\n            case 1:\n              databaseConnection = _a.sent();\n              this.driver.connection.logger.logQuery(query, parameters, this);\n              stream = databaseConnection.query(new QueryStream(query, parameters));\n              if (onEnd) stream.on(\"end\", onEnd);\n              if (onError) stream.on(\"error\", onError);\n              ok(stream);\n              return [3\n              /*break*/\n              , 3];\n\n            case 2:\n              err_2 = _a.sent();\n              fail(err_2);\n              return [3\n              /*break*/\n              , 3];\n\n            case 3:\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    });\n  };\n  /**\n   * Returns all available database names including system databases.\n   */\n\n\n  PostgresQueryRunner.prototype.getDatabases = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve([])];\n      });\n    });\n  };\n  /**\n   * Returns all available schema names including system schemas.\n   * If database parameter specified, returns schemas of that database.\n   */\n\n\n  PostgresQueryRunner.prototype.getSchemas = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , Promise.resolve([])];\n      });\n    });\n  };\n  /**\n   * Checks if database with the given name exist.\n   */\n\n\n  PostgresQueryRunner.prototype.hasDatabase = function (database) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT * FROM pg_database WHERE datname='\" + database + \"';\")];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Loads currently using database\n   */\n\n\n  PostgresQueryRunner.prototype.getCurrentDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var query;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT * FROM current_database()\")];\n\n          case 1:\n            query = _a.sent();\n            return [2\n            /*return*/\n            , query[0][\"current_database\"]];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if schema with the given name exist.\n   */\n\n\n  PostgresQueryRunner.prototype.hasSchema = function (schema) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT * FROM \\\"information_schema\\\".\\\"schemata\\\" WHERE \\\"schema_name\\\" = '\" + schema + \"'\")];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Loads currently using database schema\n   */\n\n\n  PostgresQueryRunner.prototype.getCurrentSchema = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var query;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT * FROM current_schema()\")];\n\n          case 1:\n            query = _a.sent();\n            return [2\n            /*return*/\n            , query[0][\"current_schema\"]];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if table with the given name exist in the database.\n   */\n\n\n  PostgresQueryRunner.prototype.hasTable = function (tableOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parsedTableName, sql, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parsedTableName = this.parseTableName(tableOrName);\n            sql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName;\n            return [4\n            /*yield*/\n            , this.query(sql)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if column with the given name exist in the given table.\n   */\n\n\n  PostgresQueryRunner.prototype.hasColumn = function (tableOrName, columnName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var parsedTableName, sql, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            parsedTableName = this.parseTableName(tableOrName);\n            sql = \"SELECT * FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = \" + parsedTableName.schema + \" AND \\\"table_name\\\" = \" + parsedTableName.tableName + \" AND \\\"column_name\\\" = '\" + columnName + \"'\";\n            return [4\n            /*yield*/\n            , this.query(sql)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new database.\n   * Note: Postgres does not support database creation inside a transaction block.\n   */\n\n\n  PostgresQueryRunner.prototype.createDatabase = function (database, ifNotExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      var databaseAlreadyExists, up, down;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!ifNotExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasDatabase(database)];\n\n          case 1:\n            databaseAlreadyExists = _a.sent();\n            if (databaseAlreadyExists) return [2\n            /*return*/\n            , Promise.resolve()];\n            _a.label = 2;\n\n          case 2:\n            up = \"CREATE DATABASE \\\"\" + database + \"\\\"\";\n            down = \"DROP DATABASE \\\"\" + database + \"\\\"\";\n            return [4\n            /*yield*/\n            , this.executeQueries(new Query(up), new Query(down))];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops database.\n   * Note: Postgres does not support database dropping inside a transaction block.\n   */\n\n\n  PostgresQueryRunner.prototype.dropDatabase = function (database, ifExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      var up, down;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            up = ifExist ? \"DROP DATABASE IF EXISTS \\\"\" + database + \"\\\"\" : \"DROP DATABASE \\\"\" + database + \"\\\"\";\n            down = \"CREATE DATABASE \\\"\" + database + \"\\\"\";\n            return [4\n            /*yield*/\n            , this.executeQueries(new Query(up), new Query(down))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new table schema.\n   */\n\n\n  PostgresQueryRunner.prototype.createSchema = function (schema, ifNotExist) {\n    return __awaiter(this, void 0, void 0, function () {\n      var up, down;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            up = ifNotExist ? \"CREATE SCHEMA IF NOT EXISTS \\\"\" + schema + \"\\\"\" : \"CREATE SCHEMA \\\"\" + schema + \"\\\"\";\n            down = \"DROP SCHEMA \\\"\" + schema + \"\\\" CASCADE\";\n            return [4\n            /*yield*/\n            , this.executeQueries(new Query(up), new Query(down))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops table schema.\n   */\n\n\n  PostgresQueryRunner.prototype.dropSchema = function (schemaPath, ifExist, isCascade) {\n    return __awaiter(this, void 0, void 0, function () {\n      var schema, up, down;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n            up = ifExist ? \"DROP SCHEMA IF EXISTS \\\"\" + schema + \"\\\" \" + (isCascade ? \"CASCADE\" : \"\") : \"DROP SCHEMA \\\"\" + schema + \"\\\" \" + (isCascade ? \"CASCADE\" : \"\");\n            down = \"CREATE SCHEMA \\\"\" + schema + \"\\\"\";\n            return [4\n            /*yield*/\n            , this.executeQueries(new Query(up), new Query(down))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new table.\n   */\n\n\n  PostgresQueryRunner.prototype.createTable = function (table, ifNotExist, createForeignKeys, createIndices) {\n    if (ifNotExist === void 0) {\n      ifNotExist = false;\n    }\n\n    if (createForeignKeys === void 0) {\n      createForeignKeys = true;\n    }\n\n    if (createIndices === void 0) {\n      createIndices = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isTableExist, upQueries, downQueries, enumColumns, createdEnumTypes, enumColumns_1, enumColumns_1_1, column, hasEnum, enumName, e_1_1;\n\n      var e_1, _a;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!ifNotExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasTable(table)];\n\n          case 1:\n            isTableExist = _b.sent();\n            if (isTableExist) return [2\n            /*return*/\n            , Promise.resolve()];\n            _b.label = 2;\n\n          case 2:\n            upQueries = [];\n            downQueries = [];\n            enumColumns = table.columns.filter(function (column) {\n              return column.type === \"enum\" || column.type === \"simple-enum\";\n            });\n            createdEnumTypes = [];\n            _b.label = 3;\n\n          case 3:\n            _b.trys.push([3, 8, 9, 10]);\n\n            enumColumns_1 = __values(enumColumns), enumColumns_1_1 = enumColumns_1.next();\n            _b.label = 4;\n\n          case 4:\n            if (!!enumColumns_1_1.done) return [3\n            /*break*/\n            , 7];\n            column = enumColumns_1_1.value;\n            return [4\n            /*yield*/\n            , this.hasEnumType(table, column)];\n\n          case 5:\n            hasEnum = _b.sent();\n            enumName = this.buildEnumName(table, column); // if enum with the same \"enumName\" is defined more then once, me must prevent double creation\n\n            if (!hasEnum && createdEnumTypes.indexOf(enumName) === -1) {\n              createdEnumTypes.push(enumName);\n              upQueries.push(this.createEnumTypeSql(table, column, enumName));\n              downQueries.push(this.dropEnumTypeSql(table, column, enumName));\n            }\n\n            _b.label = 6;\n\n          case 6:\n            enumColumns_1_1 = enumColumns_1.next();\n            return [3\n            /*break*/\n            , 4];\n\n          case 7:\n            return [3\n            /*break*/\n            , 10];\n\n          case 8:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 10];\n\n          case 9:\n            try {\n              if (enumColumns_1_1 && !enumColumns_1_1.done && (_a = enumColumns_1.return)) _a.call(enumColumns_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 10:\n            upQueries.push(this.createTableSql(table, createForeignKeys));\n            downQueries.push(this.dropTableSql(table)); // if createForeignKeys is true, we must drop created foreign keys in down query.\n            // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n\n            if (createForeignKeys) table.foreignKeys.forEach(function (foreignKey) {\n              return downQueries.push(_this.dropForeignKeySql(table, foreignKey));\n            });\n\n            if (createIndices) {\n              table.indices.forEach(function (index) {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name) index.name = _this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(_this.createIndexSql(table, index));\n                downQueries.push(_this.dropIndexSql(table, index));\n              });\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 11:\n            _b.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the table.\n   */\n\n\n  PostgresQueryRunner.prototype.dropTable = function (target, ifExist, dropForeignKeys, dropIndices) {\n    if (dropForeignKeys === void 0) {\n      dropForeignKeys = true;\n    }\n\n    if (dropIndices === void 0) {\n      dropIndices = true;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var isTableExist, createForeignKeys, tableName, table, upQueries, downQueries;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!ifExist) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.hasTable(target)];\n\n          case 1:\n            isTableExist = _a.sent();\n            if (!isTableExist) return [2\n            /*return*/\n            , Promise.resolve()];\n            _a.label = 2;\n\n          case 2:\n            createForeignKeys = dropForeignKeys;\n            tableName = target instanceof Table ? target.name : target;\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableName)];\n\n          case 3:\n            table = _a.sent();\n            upQueries = [];\n            downQueries = [];\n\n            if (dropIndices) {\n              table.indices.forEach(function (index) {\n                upQueries.push(_this.dropIndexSql(table, index));\n                downQueries.push(_this.createIndexSql(table, index));\n              });\n            }\n\n            if (dropForeignKeys) table.foreignKeys.forEach(function (foreignKey) {\n              return upQueries.push(_this.dropForeignKeySql(table, foreignKey));\n            });\n            upQueries.push(this.dropTableSql(table));\n            downQueries.push(this.createTableSql(table, createForeignKeys));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new view.\n   */\n\n\n  PostgresQueryRunner.prototype.createView = function (view) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries, _a, _b, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            upQueries.push(this.createViewSql(view));\n            _b = (_a = upQueries).push;\n            return [4\n            /*yield*/\n            , this.insertViewDefinitionSql(view)];\n\n          case 1:\n            _b.apply(_a, [_e.sent()]);\n\n            downQueries.push(this.dropViewSql(view));\n            _d = (_c = downQueries).push;\n            return [4\n            /*yield*/\n            , this.deleteViewDefinitionSql(view)];\n\n          case 2:\n            _d.apply(_c, [_e.sent()]);\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 3:\n            _e.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the view.\n   */\n\n\n  PostgresQueryRunner.prototype.dropView = function (target) {\n    return __awaiter(this, void 0, void 0, function () {\n      var viewName, view, upQueries, downQueries, _a, _b, _c, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            viewName = target instanceof View ? target.name : target;\n            return [4\n            /*yield*/\n            , this.getCachedView(viewName)];\n\n          case 1:\n            view = _e.sent();\n            upQueries = [];\n            downQueries = [];\n            _b = (_a = upQueries).push;\n            return [4\n            /*yield*/\n            , this.deleteViewDefinitionSql(view)];\n\n          case 2:\n            _b.apply(_a, [_e.sent()]);\n\n            upQueries.push(this.dropViewSql(view));\n            _d = (_c = downQueries).push;\n            return [4\n            /*yield*/\n            , this.insertViewDefinitionSql(view)];\n\n          case 3:\n            _d.apply(_c, [_e.sent()]);\n\n            downQueries.push(this.createViewSql(view));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _e.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Renames the given table.\n   */\n\n\n  PostgresQueryRunner.prototype.renameTable = function (oldTableOrName, newTableName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries, downQueries, oldTable, _a, newTable, oldTableName, schemaName, columnNames, oldPkName, newPkName, enumColumns, enumColumns_2, enumColumns_2_1, column, oldEnumType, e_2_1;\n\n      var e_2, _b;\n\n      var _this = this;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            upQueries = [];\n            downQueries = [];\n            if (!(oldTableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = oldTableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(oldTableOrName)];\n\n          case 2:\n            _a = _c.sent();\n            _c.label = 3;\n\n          case 3:\n            oldTable = _a;\n            newTable = oldTable.clone();\n            oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n            schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n            newTable.name = schemaName ? schemaName + \".\" + newTableName : newTableName;\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(oldTable) + \" RENAME TO \\\"\" + newTableName + \"\\\"\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" RENAME TO \\\"\" + oldTableName + \"\\\"\")); // rename column primary key constraint\n\n            if (newTable.primaryColumns.length > 0) {\n              columnNames = newTable.primaryColumns.map(function (column) {\n                return column.name;\n              });\n              oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n              newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + oldPkName + \"\\\" TO \\\"\" + newPkName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + newPkName + \"\\\" TO \\\"\" + oldPkName + \"\\\"\"));\n            } // rename sequences\n\n\n            newTable.columns.map(function (col) {\n              if (col.isGenerated && col.generationStrategy === \"increment\") {\n                var seqName = _this.buildSequenceName(oldTable, col.name, undefined, true, true);\n\n                var newSeqName = _this.buildSequenceName(newTable, col.name, undefined, true, true);\n\n                var up = schemaName ? \"ALTER SEQUENCE \\\"\" + schemaName + \"\\\".\\\"\" + seqName + \"\\\" RENAME TO \\\"\" + newSeqName + \"\\\"\" : \"ALTER SEQUENCE \\\"\" + seqName + \"\\\" RENAME TO \\\"\" + newSeqName + \"\\\"\";\n                var down = schemaName ? \"ALTER SEQUENCE \\\"\" + schemaName + \"\\\".\\\"\" + newSeqName + \"\\\" RENAME TO \\\"\" + seqName + \"\\\"\" : \"ALTER SEQUENCE \\\"\" + newSeqName + \"\\\" RENAME TO \\\"\" + seqName + \"\\\"\";\n                upQueries.push(new Query(up));\n                downQueries.push(new Query(down));\n              }\n            }); // rename unique constraints\n\n            newTable.uniques.forEach(function (unique) {\n              // build new constraint name\n              var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames); // build queries\n\n\n              upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + unique.name + \"\\\" TO \\\"\" + newUniqueName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + newUniqueName + \"\\\" TO \\\"\" + unique.name + \"\\\"\")); // replace constraint name\n\n              unique.name = newUniqueName;\n            }); // rename index constraints\n\n            newTable.indices.forEach(function (index) {\n              // build new constraint name\n              var schema = _this.extractSchema(newTable);\n\n              var newIndexName = _this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where); // build queries\n\n\n              var up = schema ? \"ALTER INDEX \\\"\" + schema + \"\\\".\\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\" : \"ALTER INDEX \\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\";\n              var down = schema ? \"ALTER INDEX \\\"\" + schema + \"\\\".\\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\" : \"ALTER INDEX \\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\";\n              upQueries.push(new Query(up));\n              downQueries.push(new Query(down)); // replace constraint name\n\n              index.name = newIndexName;\n            }); // rename foreign key constraints\n\n            newTable.foreignKeys.forEach(function (foreignKey) {\n              // build new constraint name\n              var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames); // build queries\n\n\n              upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + foreignKey.name + \"\\\" TO \\\"\" + newForeignKeyName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(newTable) + \" RENAME CONSTRAINT \\\"\" + newForeignKeyName + \"\\\" TO \\\"\" + foreignKey.name + \"\\\"\")); // replace constraint name\n\n              foreignKey.name = newForeignKeyName;\n            });\n            enumColumns = newTable.columns.filter(function (column) {\n              return column.type === \"enum\" || column.type === \"simple-enum\";\n            });\n            _c.label = 4;\n\n          case 4:\n            _c.trys.push([4, 9, 10, 11]);\n\n            enumColumns_2 = __values(enumColumns), enumColumns_2_1 = enumColumns_2.next();\n            _c.label = 5;\n\n          case 5:\n            if (!!enumColumns_2_1.done) return [3\n            /*break*/\n            , 8];\n            column = enumColumns_2_1.value; // skip renaming for user-defined enum name\n\n            if (column.enumName) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.getUserDefinedTypeName(oldTable, column)];\n\n          case 6:\n            oldEnumType = _c.sent();\n            upQueries.push(new Query(\"ALTER TYPE \\\"\" + oldEnumType.schema + \"\\\".\\\"\" + oldEnumType.name + \"\\\" RENAME TO \" + this.buildEnumName(newTable, column, false)));\n            downQueries.push(new Query(\"ALTER TYPE \" + this.buildEnumName(newTable, column) + \" RENAME TO \\\"\" + oldEnumType.name + \"\\\"\"));\n            _c.label = 7;\n\n          case 7:\n            enumColumns_2_1 = enumColumns_2.next();\n            return [3\n            /*break*/\n            , 5];\n\n          case 8:\n            return [3\n            /*break*/\n            , 11];\n\n          case 9:\n            e_2_1 = _c.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 11];\n\n          case 10:\n            try {\n              if (enumColumns_2_1 && !enumColumns_2_1.done && (_b = enumColumns_2.return)) _b.call(enumColumns_2);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 11:\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 12:\n            _c.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new column from the column in the table.\n   */\n\n\n  PostgresQueryRunner.prototype.addColumn = function (tableOrName, column) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, upQueries, downQueries, hasEnum, primaryColumns, pkName_1, columnNames_1, pkName, columnNames, columnIndex, uniqueConstraint;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            if (!(column.type === \"enum\" || column.type === \"simple-enum\")) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , this.hasEnumType(table, column)];\n\n          case 4:\n            hasEnum = _b.sent();\n\n            if (!hasEnum) {\n              upQueries.push(this.createEnumTypeSql(table, column));\n              downQueries.push(this.dropEnumTypeSql(table, column));\n            }\n\n            _b.label = 5;\n\n          case 5:\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD \" + this.buildCreateColumnSql(table, column)));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\")); // create or update primary key constraint\n\n            if (column.isPrimary) {\n              primaryColumns = clonedTable.primaryColumns; // if table already have primary key, me must drop it and recreate again\n\n              if (primaryColumns.length > 0) {\n                pkName_1 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames_1 = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName_1 + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName_1 + \"\\\" PRIMARY KEY (\" + columnNames_1 + \")\"));\n              }\n\n              primaryColumns.push(column);\n              pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNames = primaryColumns.map(function (column) {\n                return \"\\\"\" + column.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n            }\n\n            columnIndex = clonedTable.indices.find(function (index) {\n              return index.columnNames.length === 1 && index.columnNames[0] === column.name;\n            });\n\n            if (columnIndex) {\n              upQueries.push(this.createIndexSql(table, columnIndex));\n              downQueries.push(this.dropIndexSql(table, columnIndex));\n            } // create unique constraint\n\n\n            if (column.isUnique) {\n              uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                columnNames: [column.name]\n              });\n              clonedTable.uniques.push(uniqueConstraint);\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + column.name + \"\\\")\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\"));\n            } // create column's comment\n\n\n            if (column.comment) {\n              upQueries.push(new Query(\"COMMENT ON COLUMN \" + this.escapePath(table) + \".\\\"\" + column.name + \"\\\" IS \" + this.escapeComment(column.comment)));\n              downQueries.push(new Query(\"COMMENT ON COLUMN \" + this.escapePath(table) + \".\\\"\" + column.name + \"\\\" IS \" + this.escapeComment(column.comment)));\n            }\n\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 6:\n            _b.sent();\n\n            clonedTable.addColumn(column);\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new columns from the column in the table.\n   */\n\n\n  PostgresQueryRunner.prototype.addColumns = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var columns_1, columns_1_1, column, e_3_1;\n\n      var e_3, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            columns_1 = __values(columns), columns_1_1 = columns_1.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!columns_1_1.done) return [3\n            /*break*/\n            , 4];\n            column = columns_1_1.value;\n            return [4\n            /*yield*/\n            , this.addColumn(tableOrName, column)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            columns_1_1 = columns_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_3_1 = _b.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (columns_1_1 && !columns_1_1.done && (_a = columns_1.return)) _a.call(columns_1);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Renames column in the given table.\n   */\n\n\n  PostgresQueryRunner.prototype.renameColumn = function (tableOrName, oldTableColumnOrName, newTableColumnOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, oldColumn, newColumn;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (c) {\n              return c.name === oldTableColumnOrName;\n            });\n            if (!oldColumn) throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n\n            if (newTableColumnOrName instanceof TableColumn) {\n              newColumn = newTableColumnOrName;\n            } else {\n              newColumn = oldColumn.clone();\n              newColumn.name = newTableColumnOrName;\n            }\n\n            return [2\n            /*return*/\n            , this.changeColumn(table, oldColumn, newColumn)];\n        }\n      });\n    });\n  };\n  /**\n   * Changes a column in the table.\n   */\n\n\n  PostgresQueryRunner.prototype.changeColumn = function (tableOrName, oldTableColumnOrName, newColumn) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, upQueries, downQueries, defaultValueChanged, oldColumn, oldEnumType, primaryColumns, columnNames, oldPkName, newPkName, schema, seqName, newSeqName, up, down, oldTableColumn, arraySuffix, newEnumName, oldEnumName, oldEnumNameWithoutSchema, oldEnumNameWithSchema_old, oldEnumNameWithoutSchema_old, upType, downType, primaryColumns, pkName, columnNames, column, pkName, columnNames, primaryColumn, column, pkName, columnNames, uniqueConstraint, uniqueConstraint;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = [];\n            defaultValueChanged = false;\n            oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(function (column) {\n              return column.name === oldTableColumnOrName;\n            });\n            if (!oldColumn) throw new Error(\"Column \\\"\" + oldTableColumnOrName + \"\\\" was not found in the \\\"\" + table.name + \"\\\" table.\");\n            if (!(oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length || newColumn.isArray !== oldColumn.isArray)) return [3\n            /*break*/\n            , 6]; // To avoid data conversion, we just recreate column\n\n            return [4\n            /*yield*/\n            , this.dropColumn(table, oldColumn)];\n\n          case 4:\n            // To avoid data conversion, we just recreate column\n            _b.sent();\n\n            return [4\n            /*yield*/\n            , this.addColumn(table, newColumn)];\n\n          case 5:\n            _b.sent(); // update cloned table\n\n\n            clonedTable = table.clone();\n            return [3\n            /*break*/\n            , 10];\n\n          case 6:\n            if (!(oldColumn.name !== newColumn.name)) return [3\n            /*break*/\n            , 9]; // rename column\n\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" RENAME COLUMN \\\"\" + oldColumn.name + \"\\\" TO \\\"\" + newColumn.name + \"\\\"\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" RENAME COLUMN \\\"\" + newColumn.name + \"\\\" TO \\\"\" + oldColumn.name + \"\\\"\"));\n            if (!(oldColumn.type === \"enum\" || oldColumn.type === \"simple-enum\")) return [3\n            /*break*/\n            , 8];\n            return [4\n            /*yield*/\n            , this.getUserDefinedTypeName(table, oldColumn)];\n\n          case 7:\n            oldEnumType = _b.sent();\n            upQueries.push(new Query(\"ALTER TYPE \\\"\" + oldEnumType.schema + \"\\\".\\\"\" + oldEnumType.name + \"\\\" RENAME TO \" + this.buildEnumName(table, newColumn, false)));\n            downQueries.push(new Query(\"ALTER TYPE \" + this.buildEnumName(table, newColumn) + \" RENAME TO \\\"\" + oldEnumType.name + \"\\\"\"));\n            _b.label = 8;\n\n          case 8:\n            // rename column primary key constraint\n            if (oldColumn.isPrimary === true) {\n              primaryColumns = clonedTable.primaryColumns;\n              columnNames = primaryColumns.map(function (column) {\n                return column.name;\n              });\n              oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames); // replace old column name with new column name\n\n              columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n              columnNames.push(newColumn.name);\n              newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + oldPkName + \"\\\" TO \\\"\" + newPkName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + newPkName + \"\\\" TO \\\"\" + oldPkName + \"\\\"\"));\n            } // rename column sequence\n\n\n            if (oldColumn.isGenerated === true && newColumn.generationStrategy === \"increment\") {\n              schema = this.extractSchema(table);\n              seqName = this.buildSequenceName(table, oldColumn.name, undefined, true, true);\n              newSeqName = this.buildSequenceName(table, newColumn.name, undefined, true, true);\n              up = schema ? \"ALTER SEQUENCE \\\"\" + schema + \"\\\".\\\"\" + seqName + \"\\\" RENAME TO \\\"\" + newSeqName + \"\\\"\" : \"ALTER SEQUENCE \\\"\" + seqName + \"\\\" RENAME TO \\\"\" + newSeqName + \"\\\"\";\n              down = schema ? \"ALTER SEQUENCE \\\"\" + schema + \"\\\".\\\"\" + newSeqName + \"\\\" RENAME TO \\\"\" + seqName + \"\\\"\" : \"ALTER SEQUENCE \\\"\" + newSeqName + \"\\\" RENAME TO \\\"\" + seqName + \"\\\"\";\n              upQueries.push(new Query(up));\n              downQueries.push(new Query(down));\n            } // rename unique constraints\n\n\n            clonedTable.findColumnUniques(oldColumn).forEach(function (unique) {\n              // build new constraint name\n              unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n              unique.columnNames.push(newColumn.name);\n\n              var newUniqueName = _this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames); // build queries\n\n\n              upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + unique.name + \"\\\" TO \\\"\" + newUniqueName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + newUniqueName + \"\\\" TO \\\"\" + unique.name + \"\\\"\")); // replace constraint name\n\n              unique.name = newUniqueName;\n            }); // rename index constraints\n\n            clonedTable.findColumnIndices(oldColumn).forEach(function (index) {\n              // build new constraint name\n              index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n              index.columnNames.push(newColumn.name);\n\n              var schema = _this.extractSchema(table);\n\n              var newIndexName = _this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where); // build queries\n\n\n              var up = schema ? \"ALTER INDEX \\\"\" + schema + \"\\\".\\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\" : \"ALTER INDEX \\\"\" + index.name + \"\\\" RENAME TO \\\"\" + newIndexName + \"\\\"\";\n              var down = schema ? \"ALTER INDEX \\\"\" + schema + \"\\\".\\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\" : \"ALTER INDEX \\\"\" + newIndexName + \"\\\" RENAME TO \\\"\" + index.name + \"\\\"\";\n              upQueries.push(new Query(up));\n              downQueries.push(new Query(down)); // replace constraint name\n\n              index.name = newIndexName;\n            }); // rename foreign key constraints\n\n            clonedTable.findColumnForeignKeys(oldColumn).forEach(function (foreignKey) {\n              // build new constraint name\n              foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n              foreignKey.columnNames.push(newColumn.name);\n\n              var newForeignKeyName = _this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames); // build queries\n\n\n              upQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + foreignKey.name + \"\\\" TO \\\"\" + newForeignKeyName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + _this.escapePath(table) + \" RENAME CONSTRAINT \\\"\" + newForeignKeyName + \"\\\" TO \\\"\" + foreignKey.name + \"\\\"\")); // replace constraint name\n\n              foreignKey.name = newForeignKeyName;\n            });\n            oldTableColumn = clonedTable.columns.find(function (column) {\n              return column.name === oldColumn.name;\n            });\n            clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn)].name = newColumn.name;\n            oldColumn.name = newColumn.name;\n            _b.label = 9;\n\n          case 9:\n            if (newColumn.precision !== oldColumn.precision || newColumn.scale !== oldColumn.scale) {\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" TYPE \" + this.driver.createFullType(newColumn)));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" TYPE \" + this.driver.createFullType(oldColumn)));\n            }\n\n            if ((newColumn.type === \"enum\" || newColumn.type === \"simple-enum\") && (oldColumn.type === \"enum\" || oldColumn.type === \"simple-enum\") && (!OrmUtils.isArraysEqual(newColumn.enum, oldColumn.enum) || newColumn.enumName !== oldColumn.enumName)) {\n              arraySuffix = newColumn.isArray ? \"[]\" : \"\";\n              newEnumName = this.buildEnumName(table, newColumn);\n              oldEnumName = this.buildEnumName(table, oldColumn);\n              oldEnumNameWithoutSchema = this.buildEnumName(table, oldColumn, false);\n              oldEnumNameWithSchema_old = this.buildEnumName(table, oldColumn, true, false, true);\n              oldEnumNameWithoutSchema_old = this.buildEnumName(table, oldColumn, false, false, true); // rename old ENUM\n\n              upQueries.push(new Query(\"ALTER TYPE \" + oldEnumName + \" RENAME TO \" + oldEnumNameWithoutSchema_old));\n              downQueries.push(new Query(\"ALTER TYPE \" + oldEnumNameWithSchema_old + \" RENAME TO \" + oldEnumNameWithoutSchema)); // create new ENUM\n\n              upQueries.push(this.createEnumTypeSql(table, newColumn, newEnumName));\n              downQueries.push(this.dropEnumTypeSql(table, newColumn, newEnumName)); // if column have default value, we must drop it to avoid issues with type casting\n\n              if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                // mark default as changed to prevent double update\n                defaultValueChanged = true;\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" DROP DEFAULT\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" SET DEFAULT \" + oldColumn.default));\n              }\n\n              upType = \"\" + newEnumName + arraySuffix + \" USING \\\"\" + newColumn.name + \"\\\"::\\\"text\\\"::\" + newEnumName + arraySuffix;\n              downType = \"\" + oldEnumNameWithSchema_old + arraySuffix + \" USING \\\"\" + newColumn.name + \"\\\"::\\\"text\\\"::\" + oldEnumNameWithSchema_old + arraySuffix; // update column to use new type\n\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" TYPE \" + upType));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" TYPE \" + downType)); // restore column default or create new one\n\n              if (newColumn.default !== null && newColumn.default !== undefined) {\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT \" + newColumn.default));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" DROP DEFAULT\"));\n              } // remove old ENUM\n\n\n              upQueries.push(this.dropEnumTypeSql(table, oldColumn, oldEnumNameWithSchema_old));\n              downQueries.push(this.createEnumTypeSql(table, oldColumn, oldEnumNameWithSchema_old));\n            }\n\n            if (oldColumn.isNullable !== newColumn.isNullable) {\n              if (newColumn.isNullable) {\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" DROP NOT NULL\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" SET NOT NULL\"));\n              } else {\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" SET NOT NULL\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + oldColumn.name + \"\\\" DROP NOT NULL\"));\n              }\n            }\n\n            if (oldColumn.comment !== newColumn.comment) {\n              upQueries.push(new Query(\"COMMENT ON COLUMN \" + this.escapePath(table) + \".\\\"\" + oldColumn.name + \"\\\" IS \" + this.escapeComment(newColumn.comment)));\n              downQueries.push(new Query(\"COMMENT ON COLUMN \" + this.escapePath(table) + \".\\\"\" + newColumn.name + \"\\\" IS \" + this.escapeComment(oldColumn.comment)));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n              primaryColumns = clonedTable.primaryColumns; // if primary column state changed, we must always drop existed constraint.\n\n              if (primaryColumns.length > 0) {\n                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              }\n\n              if (newColumn.isPrimary === true) {\n                primaryColumns.push(newColumn);\n                column = clonedTable.columns.find(function (column) {\n                  return column.name === newColumn.name;\n                });\n                column.isPrimary = true;\n                pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames = primaryColumns.map(function (column) {\n                  return \"\\\"\" + column.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n              } else {\n                primaryColumn = primaryColumns.find(function (c) {\n                  return c.name === newColumn.name;\n                });\n                primaryColumns.splice(primaryColumns.indexOf(primaryColumn), 1);\n                column = clonedTable.columns.find(function (column) {\n                  return column.name === newColumn.name;\n                });\n                column.isPrimary = false; // if we have another primary keys, we must recreate constraint.\n\n                if (primaryColumns.length > 0) {\n                  pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                    return column.name;\n                  }));\n                  columnNames = primaryColumns.map(function (column) {\n                    return \"\\\"\" + column.name + \"\\\"\";\n                  }).join(\", \");\n                  upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n                  downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n                }\n              }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n              if (newColumn.isUnique === true) {\n                uniqueConstraint = new TableUnique({\n                  name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                  columnNames: [newColumn.name]\n                });\n                clonedTable.uniques.push(uniqueConstraint);\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\"));\n              } else {\n                uniqueConstraint = clonedTable.uniques.find(function (unique) {\n                  return unique.columnNames.length === 1 && !!unique.columnNames.find(function (columnName) {\n                    return columnName === newColumn.name;\n                  });\n                });\n                clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint), 1);\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\"\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\\\"\" + newColumn.name + \"\\\")\"));\n              }\n            }\n\n            if (oldColumn.isGenerated !== newColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") {\n              if (newColumn.isGenerated === true) {\n                upQueries.push(new Query(\"CREATE SEQUENCE \" + this.buildSequenceName(table, newColumn) + \" OWNED BY \" + this.escapePath(table) + \".\\\"\" + newColumn.name + \"\\\"\"));\n                downQueries.push(new Query(\"DROP SEQUENCE \" + this.buildSequenceName(table, newColumn)));\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT nextval('\" + this.buildSequenceName(table, newColumn, undefined, true) + \"')\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" DROP DEFAULT\"));\n              } else {\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" DROP DEFAULT\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT nextval('\" + this.buildSequenceName(table, newColumn, undefined, true) + \"')\"));\n                upQueries.push(new Query(\"DROP SEQUENCE \" + this.buildSequenceName(table, newColumn)));\n                downQueries.push(new Query(\"CREATE SEQUENCE \" + this.buildSequenceName(table, newColumn) + \" OWNED BY \" + this.escapePath(table) + \".\\\"\" + newColumn.name + \"\\\"\"));\n              }\n            } // the default might have changed when the enum changed\n\n\n            if (newColumn.default !== oldColumn.default && !defaultValueChanged) {\n              if (newColumn.default !== null && newColumn.default !== undefined) {\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT \" + newColumn.default));\n\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                  downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT \" + oldColumn.default));\n                } else {\n                  downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" DROP DEFAULT\"));\n                }\n              } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" DROP DEFAULT\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" SET DEFAULT \" + oldColumn.default));\n              }\n            }\n\n            if ((newColumn.spatialFeatureType || \"\").toLowerCase() !== (oldColumn.spatialFeatureType || \"\").toLowerCase() || newColumn.srid !== oldColumn.srid) {\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" TYPE \" + this.driver.createFullType(newColumn)));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ALTER COLUMN \\\"\" + newColumn.name + \"\\\" TYPE \" + this.driver.createFullType(oldColumn)));\n            }\n\n            _b.label = 10;\n\n          case 10:\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 11:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Changes a column in the table.\n   */\n\n\n  PostgresQueryRunner.prototype.changeColumns = function (tableOrName, changedColumns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var changedColumns_1, changedColumns_1_1, _a, oldColumn, newColumn, e_4_1;\n\n      var e_4, _b;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            _c.trys.push([0, 5, 6, 7]);\n\n            changedColumns_1 = __values(changedColumns), changedColumns_1_1 = changedColumns_1.next();\n            _c.label = 1;\n\n          case 1:\n            if (!!changedColumns_1_1.done) return [3\n            /*break*/\n            , 4];\n            _a = changedColumns_1_1.value, oldColumn = _a.oldColumn, newColumn = _a.newColumn;\n            return [4\n            /*yield*/\n            , this.changeColumn(tableOrName, oldColumn, newColumn)];\n\n          case 2:\n            _c.sent();\n\n            _c.label = 3;\n\n          case 3:\n            changedColumns_1_1 = changedColumns_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_4_1 = _c.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (changedColumns_1_1 && !changedColumns_1_1.done && (_b = changedColumns_1.return)) _b.call(changedColumns_1);\n            } finally {\n              if (e_4) throw e_4.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops column in the table.\n   */\n\n\n  PostgresQueryRunner.prototype.dropColumn = function (tableOrName, columnOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, column, clonedTable, upQueries, downQueries, pkName, columnNames, tableColumn, pkName_2, columnNames_2, columnIndex, columnCheck, columnUnique, hasEnum, enumType, escapedEnumName;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n            if (!column) throw new Error(\"Column \\\"\" + columnOrName + \"\\\" was not found in table \\\"\" + table.name + \"\\\"\");\n            clonedTable = table.clone();\n            upQueries = [];\n            downQueries = []; // drop primary key constraint\n\n            if (column.isPrimary) {\n              pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNames = clonedTable.primaryColumns.map(function (primaryColumn) {\n                return \"\\\"\" + primaryColumn.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNames + \")\"));\n              tableColumn = clonedTable.findColumnByName(column.name);\n              tableColumn.isPrimary = false; // if primary key have multiple columns, we must recreate it without dropped column\n\n              if (clonedTable.primaryColumns.length > 0) {\n                pkName_2 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(function (column) {\n                  return column.name;\n                }));\n                columnNames_2 = clonedTable.primaryColumns.map(function (primaryColumn) {\n                  return \"\\\"\" + primaryColumn.name + \"\\\"\";\n                }).join(\", \");\n                upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" ADD CONSTRAINT \\\"\" + pkName_2 + \"\\\" PRIMARY KEY (\" + columnNames_2 + \")\"));\n                downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(clonedTable) + \" DROP CONSTRAINT \\\"\" + pkName_2 + \"\\\"\"));\n              }\n            }\n\n            columnIndex = clonedTable.indices.find(function (index) {\n              return index.columnNames.length === 1 && index.columnNames[0] === column.name;\n            });\n\n            if (columnIndex) {\n              clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n              upQueries.push(this.dropIndexSql(table, columnIndex));\n              downQueries.push(this.createIndexSql(table, columnIndex));\n            }\n\n            columnCheck = clonedTable.checks.find(function (check) {\n              return !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name;\n            });\n\n            if (columnCheck) {\n              clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n              upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n              downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n            }\n\n            columnUnique = clonedTable.uniques.find(function (unique) {\n              return unique.columnNames.length === 1 && unique.columnNames[0] === column.name;\n            });\n\n            if (columnUnique) {\n              clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n              upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n              downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n            }\n\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP COLUMN \\\"\" + column.name + \"\\\"\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD \" + this.buildCreateColumnSql(table, column)));\n            if (!(column.type === \"enum\" || column.type === \"simple-enum\")) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.hasEnumType(table, column)];\n\n          case 4:\n            hasEnum = _b.sent();\n            if (!hasEnum) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.getUserDefinedTypeName(table, column)];\n\n          case 5:\n            enumType = _b.sent();\n            escapedEnumName = \"\\\"\" + enumType.schema + \"\\\".\\\"\" + enumType.name + \"\\\"\";\n            upQueries.push(this.dropEnumTypeSql(table, column, escapedEnumName));\n            downQueries.push(this.createEnumTypeSql(table, column, escapedEnumName));\n            _b.label = 6;\n\n          case 6:\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 7:\n            _b.sent();\n\n            clonedTable.removeColumn(column);\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the columns in the table.\n   */\n\n\n  PostgresQueryRunner.prototype.dropColumns = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var columns_2, columns_2_1, column, e_5_1;\n\n      var e_5, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            columns_2 = __values(columns), columns_2_1 = columns_2.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!columns_2_1.done) return [3\n            /*break*/\n            , 4];\n            column = columns_2_1.value;\n            return [4\n            /*yield*/\n            , this.dropColumn(tableOrName, column)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            columns_2_1 = columns_2.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_5_1 = _b.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (columns_2_1 && !columns_2_1.done && (_a = columns_2.return)) _a.call(columns_2);\n            } finally {\n              if (e_5) throw e_5.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new primary key.\n   */\n\n\n  PostgresQueryRunner.prototype.createPrimaryKey = function (tableOrName, columnNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            up = this.createPrimaryKeySql(table, columnNames); // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n\n            clonedTable.columns.forEach(function (column) {\n              if (columnNames.find(function (columnName) {\n                return columnName === column.name;\n              })) column.isPrimary = true;\n            });\n            down = this.dropPrimaryKeySql(clonedTable);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Updates composite primary keys.\n   */\n\n\n  PostgresQueryRunner.prototype.updatePrimaryKeys = function (tableOrName, columns) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, clonedTable, columnNames, upQueries, downQueries, primaryColumns, pkName_3, columnNamesString_1, pkName, columnNamesString;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            clonedTable = table.clone();\n            columnNames = columns.map(function (column) {\n              return column.name;\n            });\n            upQueries = [];\n            downQueries = [];\n            primaryColumns = clonedTable.primaryColumns;\n\n            if (primaryColumns.length > 0) {\n              pkName_3 = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(function (column) {\n                return column.name;\n              }));\n              columnNamesString_1 = primaryColumns.map(function (column) {\n                return \"\\\"\" + column.name + \"\\\"\";\n              }).join(\", \");\n              upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName_3 + \"\\\"\"));\n              downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName_3 + \"\\\" PRIMARY KEY (\" + columnNamesString_1 + \")\"));\n            } // update columns in table.\n\n\n            clonedTable.columns.filter(function (column) {\n              return columnNames.indexOf(column.name) !== -1;\n            }).forEach(function (column) {\n              return column.isPrimary = true;\n            });\n            pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n            columnNamesString = columnNames.map(function (columnName) {\n              return \"\\\"\" + columnName + \"\\\"\";\n            }).join(\", \");\n            upQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + pkName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\"));\n            downQueries.push(new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + pkName + \"\\\"\"));\n            return [4\n            /*yield*/\n            , this.executeQueries(upQueries, downQueries)];\n\n          case 4:\n            _b.sent();\n\n            this.replaceCachedTable(table, clonedTable);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a primary key.\n   */\n\n\n  PostgresQueryRunner.prototype.dropPrimaryKey = function (tableOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            up = this.dropPrimaryKeySql(table);\n            down = this.createPrimaryKeySql(table, table.primaryColumns.map(function (column) {\n              return column.name;\n            }));\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.primaryColumns.forEach(function (column) {\n              column.isPrimary = false;\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates new unique constraint.\n   */\n\n\n  PostgresQueryRunner.prototype.createUniqueConstraint = function (tableOrName, uniqueConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.\n\n            if (!uniqueConstraint.name) uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n            up = this.createUniqueConstraintSql(table, uniqueConstraint);\n            down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addUniqueConstraint(uniqueConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates new unique constraints.\n   */\n\n\n  PostgresQueryRunner.prototype.createUniqueConstraints = function (tableOrName, uniqueConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uniqueConstraints_1, uniqueConstraints_1_1, uniqueConstraint, e_6_1;\n\n      var e_6, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            uniqueConstraints_1 = __values(uniqueConstraints), uniqueConstraints_1_1 = uniqueConstraints_1.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!uniqueConstraints_1_1.done) return [3\n            /*break*/\n            , 4];\n            uniqueConstraint = uniqueConstraints_1_1.value;\n            return [4\n            /*yield*/\n            , this.createUniqueConstraint(tableOrName, uniqueConstraint)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            uniqueConstraints_1_1 = uniqueConstraints_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_6_1 = _b.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (uniqueConstraints_1_1 && !uniqueConstraints_1_1.done && (_a = uniqueConstraints_1.return)) _a.call(uniqueConstraints_1);\n            } finally {\n              if (e_6) throw e_6.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops unique constraint.\n   */\n\n\n  PostgresQueryRunner.prototype.dropUniqueConstraint = function (tableOrName, uniqueOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, uniqueConstraint, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(function (u) {\n              return u.name === uniqueOrName;\n            });\n            if (!uniqueConstraint) throw new Error(\"Supplied unique constraint was not found in table \" + table.name);\n            up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n            down = this.createUniqueConstraintSql(table, uniqueConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeUniqueConstraint(uniqueConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops unique constraints.\n   */\n\n\n  PostgresQueryRunner.prototype.dropUniqueConstraints = function (tableOrName, uniqueConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var uniqueConstraints_2, uniqueConstraints_2_1, uniqueConstraint, e_7_1;\n\n      var e_7, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            uniqueConstraints_2 = __values(uniqueConstraints), uniqueConstraints_2_1 = uniqueConstraints_2.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!uniqueConstraints_2_1.done) return [3\n            /*break*/\n            , 4];\n            uniqueConstraint = uniqueConstraints_2_1.value;\n            return [4\n            /*yield*/\n            , this.dropUniqueConstraint(tableOrName, uniqueConstraint)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            uniqueConstraints_2_1 = uniqueConstraints_2.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_7_1 = _b.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (uniqueConstraints_2_1 && !uniqueConstraints_2_1.done && (_a = uniqueConstraints_2.return)) _a.call(uniqueConstraints_2);\n            } finally {\n              if (e_7) throw e_7.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates new check constraint.\n   */\n\n\n  PostgresQueryRunner.prototype.createCheckConstraint = function (tableOrName, checkConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.\n\n            if (!checkConstraint.name) checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression);\n            up = this.createCheckConstraintSql(table, checkConstraint);\n            down = this.dropCheckConstraintSql(table, checkConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addCheckConstraint(checkConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates new check constraints.\n   */\n\n\n  PostgresQueryRunner.prototype.createCheckConstraints = function (tableOrName, checkConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = checkConstraints.map(function (checkConstraint) {\n              return _this.createCheckConstraint(tableOrName, checkConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops check constraint.\n   */\n\n\n  PostgresQueryRunner.prototype.dropCheckConstraint = function (tableOrName, checkOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, checkConstraint, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(function (c) {\n              return c.name === checkOrName;\n            });\n            if (!checkConstraint) throw new Error(\"Supplied check constraint was not found in table \" + table.name);\n            up = this.dropCheckConstraintSql(table, checkConstraint);\n            down = this.createCheckConstraintSql(table, checkConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeCheckConstraint(checkConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops check constraints.\n   */\n\n\n  PostgresQueryRunner.prototype.dropCheckConstraints = function (tableOrName, checkConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = checkConstraints.map(function (checkConstraint) {\n              return _this.dropCheckConstraint(tableOrName, checkConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates new exclusion constraint.\n   */\n\n\n  PostgresQueryRunner.prototype.createExclusionConstraint = function (tableOrName, exclusionConstraint) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new unique constraint may be passed without name. In this case we generate unique name manually.\n\n            if (!exclusionConstraint.name) exclusionConstraint.name = this.connection.namingStrategy.exclusionConstraintName(table.name, exclusionConstraint.expression);\n            up = this.createExclusionConstraintSql(table, exclusionConstraint);\n            down = this.dropExclusionConstraintSql(table, exclusionConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addExclusionConstraint(exclusionConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates new exclusion constraints.\n   */\n\n\n  PostgresQueryRunner.prototype.createExclusionConstraints = function (tableOrName, exclusionConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = exclusionConstraints.map(function (exclusionConstraint) {\n              return _this.createExclusionConstraint(tableOrName, exclusionConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops exclusion constraint.\n   */\n\n\n  PostgresQueryRunner.prototype.dropExclusionConstraint = function (tableOrName, exclusionOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, exclusionConstraint, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            exclusionConstraint = exclusionOrName instanceof TableExclusion ? exclusionOrName : table.exclusions.find(function (c) {\n              return c.name === exclusionOrName;\n            });\n            if (!exclusionConstraint) throw new Error(\"Supplied exclusion constraint was not found in table \" + table.name);\n            up = this.dropExclusionConstraintSql(table, exclusionConstraint);\n            down = this.createExclusionConstraintSql(table, exclusionConstraint);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeExclusionConstraint(exclusionConstraint);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops exclusion constraints.\n   */\n\n\n  PostgresQueryRunner.prototype.dropExclusionConstraints = function (tableOrName, exclusionConstraints) {\n    return __awaiter(this, void 0, void 0, function () {\n      var promises;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            promises = exclusionConstraints.map(function (exclusionConstraint) {\n              return _this.dropExclusionConstraint(tableOrName, exclusionConstraint);\n            });\n            return [4\n            /*yield*/\n            , Promise.all(promises)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new foreign key.\n   */\n\n\n  PostgresQueryRunner.prototype.createForeignKey = function (tableOrName, foreignKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new FK may be passed without name. In this case we generate FK name manually.\n\n            if (!foreignKey.name) foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n            up = this.createForeignKeySql(table, foreignKey);\n            down = this.dropForeignKeySql(table, foreignKey);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addForeignKey(foreignKey);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new foreign keys.\n   */\n\n\n  PostgresQueryRunner.prototype.createForeignKeys = function (tableOrName, foreignKeys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var foreignKeys_1, foreignKeys_1_1, foreignKey, e_8_1;\n\n      var e_8, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            foreignKeys_1 = __values(foreignKeys), foreignKeys_1_1 = foreignKeys_1.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!foreignKeys_1_1.done) return [3\n            /*break*/\n            , 4];\n            foreignKey = foreignKeys_1_1.value;\n            return [4\n            /*yield*/\n            , this.createForeignKey(tableOrName, foreignKey)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            foreignKeys_1_1 = foreignKeys_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_8_1 = _b.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (foreignKeys_1_1 && !foreignKeys_1_1.done && (_a = foreignKeys_1.return)) _a.call(foreignKeys_1);\n            } finally {\n              if (e_8) throw e_8.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a foreign key from the table.\n   */\n\n\n  PostgresQueryRunner.prototype.dropForeignKey = function (tableOrName, foreignKeyOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, foreignKey, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(function (fk) {\n              return fk.name === foreignKeyOrName;\n            });\n            if (!foreignKey) throw new Error(\"Supplied foreign key was not found in table \" + table.name);\n            up = this.dropForeignKeySql(table, foreignKey);\n            down = this.createForeignKeySql(table, foreignKey);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeForeignKey(foreignKey);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops a foreign keys from the table.\n   */\n\n\n  PostgresQueryRunner.prototype.dropForeignKeys = function (tableOrName, foreignKeys) {\n    return __awaiter(this, void 0, void 0, function () {\n      var foreignKeys_2, foreignKeys_2_1, foreignKey, e_9_1;\n\n      var e_9, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            foreignKeys_2 = __values(foreignKeys), foreignKeys_2_1 = foreignKeys_2.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!foreignKeys_2_1.done) return [3\n            /*break*/\n            , 4];\n            foreignKey = foreignKeys_2_1.value;\n            return [4\n            /*yield*/\n            , this.dropForeignKey(tableOrName, foreignKey)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            foreignKeys_2_1 = foreignKeys_2.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_9_1 = _b.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (foreignKeys_2_1 && !foreignKeys_2_1.done && (_a = foreignKeys_2.return)) _a.call(foreignKeys_2);\n            } finally {\n              if (e_9) throw e_9.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new index.\n   */\n\n\n  PostgresQueryRunner.prototype.createIndex = function (tableOrName, index) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a; // new index may be passed without name. In this case we generate index name manually.\n\n            if (!index.name) index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n            up = this.createIndexSql(table, index);\n            down = this.dropIndexSql(table, index);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.addIndex(index);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new indices\n   */\n\n\n  PostgresQueryRunner.prototype.createIndices = function (tableOrName, indices) {\n    return __awaiter(this, void 0, void 0, function () {\n      var indices_1, indices_1_1, index, e_10_1;\n\n      var e_10, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            indices_1 = __values(indices), indices_1_1 = indices_1.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!indices_1_1.done) return [3\n            /*break*/\n            , 4];\n            index = indices_1_1.value;\n            return [4\n            /*yield*/\n            , this.createIndex(tableOrName, index)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            indices_1_1 = indices_1.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_10_1 = _b.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (indices_1_1 && !indices_1_1.done && (_a = indices_1.return)) _a.call(indices_1);\n            } finally {\n              if (e_10) throw e_10.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an index from the table.\n   */\n\n\n  PostgresQueryRunner.prototype.dropIndex = function (tableOrName, indexOrName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, _a, index, up, down;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (!(tableOrName instanceof Table)) return [3\n            /*break*/\n            , 1];\n            _a = tableOrName;\n            return [3\n            /*break*/\n            , 3];\n\n          case 1:\n            return [4\n            /*yield*/\n            , this.getCachedTable(tableOrName)];\n\n          case 2:\n            _a = _b.sent();\n            _b.label = 3;\n\n          case 3:\n            table = _a;\n            index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(function (i) {\n              return i.name === indexOrName;\n            });\n            if (!index) throw new Error(\"Supplied index was not found in table \" + table.name);\n            up = this.dropIndexSql(table, index);\n            down = this.createIndexSql(table, index);\n            return [4\n            /*yield*/\n            , this.executeQueries(up, down)];\n\n          case 4:\n            _b.sent();\n\n            table.removeIndex(index);\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops an indices from the table.\n   */\n\n\n  PostgresQueryRunner.prototype.dropIndices = function (tableOrName, indices) {\n    return __awaiter(this, void 0, void 0, function () {\n      var indices_2, indices_2_1, index, e_11_1;\n\n      var e_11, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 5, 6, 7]);\n\n            indices_2 = __values(indices), indices_2_1 = indices_2.next();\n            _b.label = 1;\n\n          case 1:\n            if (!!indices_2_1.done) return [3\n            /*break*/\n            , 4];\n            index = indices_2_1.value;\n            return [4\n            /*yield*/\n            , this.dropIndex(tableOrName, index)];\n\n          case 2:\n            _b.sent();\n\n            _b.label = 3;\n\n          case 3:\n            indices_2_1 = indices_2.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_11_1 = _b.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (indices_2_1 && !indices_2_1.done && (_a = indices_2.return)) _a.call(indices_2);\n            } finally {\n              if (e_11) throw e_11.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Clears all table contents.\n   * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n   */\n\n\n  PostgresQueryRunner.prototype.clearTable = function (tableName) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"TRUNCATE TABLE \" + this.escapePath(tableName))];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Removes all tables from the currently connected database.\n   */\n\n\n  PostgresQueryRunner.prototype.clearDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var schemas, schemaNamesString, selectViewDropsQuery, dropViewQueries, selectMatViewDropsQuery, dropMatViewQueries, selectTableDropsQuery, dropTableQueries, error_1, rollbackError_1;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            schemas = [];\n            this.connection.entityMetadatas.filter(function (metadata) {\n              return metadata.schema;\n            }).forEach(function (metadata) {\n              var isSchemaExist = !!schemas.find(function (schema) {\n                return schema === metadata.schema;\n              });\n              if (!isSchemaExist) schemas.push(metadata.schema);\n            });\n            schemas.push(this.driver.options.schema || \"current_schema()\");\n            schemaNamesString = schemas.map(function (name) {\n              return name === \"current_schema()\" ? name : \"'\" + name + \"'\";\n            }).join(\", \");\n            return [4\n            /*yield*/\n            , this.startTransaction()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 11,, 16]);\n\n            selectViewDropsQuery = \"SELECT 'DROP VIEW IF EXISTS \\\"' || schemaname || '\\\".\\\"' || viewname || '\\\" CASCADE;' as \\\"query\\\" \" + (\"FROM \\\"pg_views\\\" WHERE \\\"schemaname\\\" IN (\" + schemaNamesString + \") AND \\\"viewname\\\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')\");\n            return [4\n            /*yield*/\n            , this.query(selectViewDropsQuery)];\n\n          case 3:\n            dropViewQueries = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(dropViewQueries.map(function (q) {\n              return _this.query(q[\"query\"]);\n            }))];\n\n          case 4:\n            _a.sent();\n\n            selectMatViewDropsQuery = \"SELECT 'DROP MATERIALIZED VIEW IF EXISTS \\\"' || schemaname || '\\\".\\\"' || matviewname || '\\\" CASCADE;' as \\\"query\\\" \" + (\"FROM \\\"pg_matviews\\\" WHERE \\\"schemaname\\\" IN (\" + schemaNamesString + \")\");\n            return [4\n            /*yield*/\n            , this.query(selectMatViewDropsQuery)];\n\n          case 5:\n            dropMatViewQueries = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(dropMatViewQueries.map(function (q) {\n              return _this.query(q[\"query\"]);\n            }))];\n\n          case 6:\n            _a.sent();\n\n            selectTableDropsQuery = \"SELECT 'DROP TABLE IF EXISTS \\\"' || schemaname || '\\\".\\\"' || tablename || '\\\" CASCADE;' as \\\"query\\\" FROM \\\"pg_tables\\\" WHERE \\\"schemaname\\\" IN (\" + schemaNamesString + \") AND \\\"tablename\\\" NOT IN ('spatial_ref_sys')\";\n            return [4\n            /*yield*/\n            , this.query(selectTableDropsQuery)];\n\n          case 7:\n            dropTableQueries = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(dropTableQueries.map(function (q) {\n              return _this.query(q[\"query\"]);\n            }))];\n\n          case 8:\n            _a.sent(); // drop enum types\n\n\n            return [4\n            /*yield*/\n            , this.dropEnumTypes(schemaNamesString)];\n\n          case 9:\n            // drop enum types\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.commitTransaction()];\n\n          case 10:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 16];\n\n          case 11:\n            error_1 = _a.sent();\n            _a.label = 12;\n\n          case 12:\n            _a.trys.push([12, 14,, 15]);\n\n            return [4\n            /*yield*/\n            , this.rollbackTransaction()];\n\n          case 13:\n            _a.sent();\n\n            return [3\n            /*break*/\n            , 15];\n\n          case 14:\n            rollbackError_1 = _a.sent();\n            return [3\n            /*break*/\n            , 15];\n\n          case 15:\n            throw error_1;\n\n          case 16:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n\n  PostgresQueryRunner.prototype.loadViews = function (viewNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var hasTable, currentSchema, viewsCondition, query, dbViews;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.hasTable(this.getTypeormMetadataTableName())];\n\n          case 1:\n            hasTable = _a.sent();\n            if (!hasTable) return [2\n            /*return*/\n            , Promise.resolve([])];\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 2:\n            currentSchema = _a.sent();\n            viewsCondition = viewNames.map(function (viewName) {\n              var _a = __read(viewName.split(\".\"), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              if (!name) {\n                name = schema;\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return \"(\\\"t\\\".\\\"schema\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"name\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            query = \"SELECT \\\"t\\\".* FROM \" + this.escapePath(this.getTypeormMetadataTableName()) + \" \\\"t\\\" \" + \"INNER JOIN \\\"pg_catalog\\\".\\\"pg_class\\\" \\\"c\\\" ON \\\"c\\\".\\\"relname\\\" = \\\"t\\\".\\\"name\\\" \" + \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"c\\\".\\\"relnamespace\\\" AND \\\"n\\\".\\\"nspname\\\" = \\\"t\\\".\\\"schema\\\" \" + (\"WHERE \\\"t\\\".\\\"type\\\" IN ('VIEW', 'MATERIALIZED_VIEW') \" + (viewsCondition ? \"AND (\" + viewsCondition + \")\" : \"\"));\n            return [4\n            /*yield*/\n            , this.query(query)];\n\n          case 3:\n            dbViews = _a.sent();\n            return [2\n            /*return*/\n            , dbViews.map(function (dbView) {\n              var view = new View();\n              var schema = dbView[\"schema\"] === currentSchema && !_this.driver.options.schema ? undefined : dbView[\"schema\"];\n              view.name = _this.driver.buildTableName(dbView[\"name\"], schema);\n              view.expression = dbView[\"value\"];\n              view.materialized = dbView[\"type\"] === \"MATERIALIZED_VIEW\";\n              return view;\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Loads all tables (with given names) from the database and creates a Table from them.\n   */\n\n\n  PostgresQueryRunner.prototype.loadTables = function (tableNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, tablesCondition, tablesSql, columnsSql, constraintsCondition, constraintsSql, indicesSql, foreignKeysCondition, hasRelispartitionColumn, isPartitionCondition, foreignKeysSql, _a, dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            // if no tables given then no need to proceed\n            if (!tableNames || !tableNames.length) return [2\n            /*return*/\n            , []];\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            tablesCondition = tableNames.map(function (tableName) {\n              var _a = __read(tableName.split(\".\"), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              if (!name) {\n                name = schema;\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return \"(\\\"table_schema\\\" = '\" + schema + \"' AND \\\"table_name\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            tablesSql = \"SELECT * FROM \\\"information_schema\\\".\\\"tables\\\" WHERE \" + tablesCondition;\n            columnsSql = \"SELECT columns.*, pg_catalog.col_description(('\\\"' || table_catalog || '\\\".\\\"' || table_schema || '\\\".\\\"' || table_name || '\\\"')::regclass::oid, ordinal_position) AS description, \" + \"('\\\"' || \\\"udt_schema\\\" || '\\\".\\\"' || \\\"udt_name\\\" || '\\\"')::\\\"regtype\\\" AS \\\"regtype\\\", pg_catalog.format_type(\\\"col_attr\\\".\\\"atttypid\\\", \\\"col_attr\\\".\\\"atttypmod\\\") AS \\\"format_type\\\" \" + \"FROM \\\"information_schema\\\".\\\"columns\\\" \" + \"LEFT JOIN \\\"pg_catalog\\\".\\\"pg_attribute\\\" AS \\\"col_attr\\\" ON \\\"col_attr\\\".\\\"attname\\\" = \\\"columns\\\".\\\"column_name\\\" \" + \"AND \\\"col_attr\\\".\\\"attrelid\\\" = ( \" + \"SELECT \\\"cls\\\".\\\"oid\\\" FROM \\\"pg_catalog\\\".\\\"pg_class\\\" AS \\\"cls\\\" \" + \"LEFT JOIN \\\"pg_catalog\\\".\\\"pg_namespace\\\" AS \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cls\\\".\\\"relnamespace\\\" \" + \"WHERE \\\"cls\\\".\\\"relname\\\" = \\\"columns\\\".\\\"table_name\\\" \" + \"AND \\\"ns\\\".\\\"nspname\\\" = \\\"columns\\\".\\\"table_schema\\\" \" + \") \" + \"WHERE \" + tablesCondition;\n            constraintsCondition = tableNames.map(function (tableName) {\n              var _a = __read(tableName.split(\".\"), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              if (!name) {\n                name = schema;\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"t\\\".\\\"relname\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            constraintsSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"cnst\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \" + \"pg_get_constraintdef(\\\"cnst\\\".\\\"oid\\\") AS \\\"expression\\\", \" + \"CASE \\\"cnst\\\".\\\"contype\\\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \\\"constraint_type\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\" \" + \"FROM \\\"pg_constraint\\\" \\\"cnst\\\" \" + \"INNER JOIN \\\"pg_class\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"conrelid\\\" \" + \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"cnst\\\".\\\"connamespace\\\" \" + \"LEFT JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"cnst\\\".\\\"conrelid\\\" AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"cnst\\\".\\\"conkey\\\") \" + (\"WHERE \\\"t\\\".\\\"relkind\\\" IN ('r', 'p') AND (\" + constraintsCondition + \")\");\n            indicesSql = \"SELECT \\\"ns\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"t\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"i\\\".\\\"relname\\\" AS \\\"constraint_name\\\", \\\"a\\\".\\\"attname\\\" AS \\\"column_name\\\", \" + \"CASE \\\"ix\\\".\\\"indisunique\\\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \\\"is_unique\\\", pg_get_expr(\\\"ix\\\".\\\"indpred\\\", \\\"ix\\\".\\\"indrelid\\\") AS \\\"condition\\\", \" + \"\\\"types\\\".\\\"typname\\\" AS \\\"type_name\\\" \" + \"FROM \\\"pg_class\\\" \\\"t\\\" \" + \"INNER JOIN \\\"pg_index\\\" \\\"ix\\\" ON \\\"ix\\\".\\\"indrelid\\\" = \\\"t\\\".\\\"oid\\\" \" + \"INNER JOIN \\\"pg_attribute\\\" \\\"a\\\" ON \\\"a\\\".\\\"attrelid\\\" = \\\"t\\\".\\\"oid\\\"  AND \\\"a\\\".\\\"attnum\\\" = ANY (\\\"ix\\\".\\\"indkey\\\") \" + \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"ns\\\".\\\"oid\\\" = \\\"t\\\".\\\"relnamespace\\\" \" + \"INNER JOIN \\\"pg_class\\\" \\\"i\\\" ON \\\"i\\\".\\\"oid\\\" = \\\"ix\\\".\\\"indexrelid\\\" \" + \"INNER JOIN \\\"pg_type\\\" \\\"types\\\" ON \\\"types\\\".\\\"oid\\\" = \\\"a\\\".\\\"atttypid\\\" \" + \"LEFT JOIN \\\"pg_constraint\\\" \\\"cnst\\\" ON \\\"cnst\\\".\\\"conname\\\" = \\\"i\\\".\\\"relname\\\" \" + (\"WHERE \\\"t\\\".\\\"relkind\\\" IN ('r', 'p') AND \\\"cnst\\\".\\\"contype\\\" IS NULL AND (\" + constraintsCondition + \")\");\n            foreignKeysCondition = tableNames.map(function (tableName) {\n              var _a = __read(tableName.split(\".\"), 2),\n                  schema = _a[0],\n                  name = _a[1];\n\n              if (!name) {\n                name = schema;\n                schema = _this.driver.options.schema || currentSchema;\n              }\n\n              return \"(\\\"ns\\\".\\\"nspname\\\" = '\" + schema + \"' AND \\\"cl\\\".\\\"relname\\\" = '\" + name + \"')\";\n            }).join(\" OR \");\n            return [4\n            /*yield*/\n            , this.hasSupportForPartitionedTables()];\n\n          case 2:\n            hasRelispartitionColumn = _b.sent();\n            isPartitionCondition = hasRelispartitionColumn ? \" AND \\\"cl\\\".\\\"relispartition\\\" = 'f'\" : \"\";\n            foreignKeysSql = \"SELECT \\\"con\\\".\\\"conname\\\" AS \\\"constraint_name\\\", \\\"con\\\".\\\"nspname\\\" AS \\\"table_schema\\\", \\\"con\\\".\\\"relname\\\" AS \\\"table_name\\\", \\\"att2\\\".\\\"attname\\\" AS \\\"column_name\\\", \" + \"\\\"ns\\\".\\\"nspname\\\" AS \\\"referenced_table_schema\\\", \\\"cl\\\".\\\"relname\\\" AS \\\"referenced_table_name\\\", \\\"att\\\".\\\"attname\\\" AS \\\"referenced_column_name\\\", \\\"con\\\".\\\"confdeltype\\\" AS \\\"on_delete\\\", \" + \"\\\"con\\\".\\\"confupdtype\\\" AS \\\"on_update\\\", \\\"con\\\".\\\"condeferrable\\\" AS \\\"deferrable\\\", \\\"con\\\".\\\"condeferred\\\" AS \\\"deferred\\\" \" + \"FROM ( \" + \"SELECT UNNEST (\\\"con1\\\".\\\"conkey\\\") AS \\\"parent\\\", UNNEST (\\\"con1\\\".\\\"confkey\\\") AS \\\"child\\\", \\\"con1\\\".\\\"confrelid\\\", \\\"con1\\\".\\\"conrelid\\\", \\\"con1\\\".\\\"conname\\\", \\\"con1\\\".\\\"contype\\\", \\\"ns\\\".\\\"nspname\\\", \" + \"\\\"cl\\\".\\\"relname\\\", \\\"con1\\\".\\\"condeferrable\\\", \" + \"CASE WHEN \\\"con1\\\".\\\"condeferred\\\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, \" + \"CASE \\\"con1\\\".\\\"confdeltype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confdeltype\\\", \" + \"CASE \\\"con1\\\".\\\"confupdtype\\\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \\\"confupdtype\\\" \" + \"FROM \\\"pg_class\\\" \\\"cl\\\" \" + \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" + \"INNER JOIN \\\"pg_constraint\\\" \\\"con1\\\" ON \\\"con1\\\".\\\"conrelid\\\" = \\\"cl\\\".\\\"oid\\\" \" + (\"WHERE \\\"con1\\\".\\\"contype\\\" = 'f' AND (\" + foreignKeysCondition + \") \") + \") \\\"con\\\" \" + \"INNER JOIN \\\"pg_attribute\\\" \\\"att\\\" ON \\\"att\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"confrelid\\\" AND \\\"att\\\".\\\"attnum\\\" = \\\"con\\\".\\\"child\\\" \" + (\"INNER JOIN \\\"pg_class\\\" \\\"cl\\\" ON \\\"cl\\\".\\\"oid\\\" = \\\"con\\\".\\\"confrelid\\\" \" + isPartitionCondition) + \"INNER JOIN \\\"pg_namespace\\\" \\\"ns\\\" ON \\\"cl\\\".\\\"relnamespace\\\" = \\\"ns\\\".\\\"oid\\\" \" + \"INNER JOIN \\\"pg_attribute\\\" \\\"att2\\\" ON \\\"att2\\\".\\\"attrelid\\\" = \\\"con\\\".\\\"conrelid\\\" AND \\\"att2\\\".\\\"attnum\\\" = \\\"con\\\".\\\"parent\\\"\";\n            return [4\n            /*yield*/\n            , Promise.all([this.query(tablesSql), this.query(columnsSql), this.query(constraintsSql), this.query(indicesSql), this.query(foreignKeysSql)])];\n\n          case 3:\n            _a = __read.apply(void 0, [_b.sent(), 5]), dbTables = _a[0], dbColumns = _a[1], dbConstraints = _a[2], dbIndices = _a[3], dbForeignKeys = _a[4]; // if tables were not found in the db, no need to proceed\n\n            if (!dbTables.length) return [2\n            /*return*/\n            , []]; // create tables for loaded tables\n\n            return [2\n            /*return*/\n            , Promise.all(dbTables.map(function (dbTable) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var table, getSchemaFromKey, schema, tableFullName, _a, tableUniqueConstraints, tableCheckConstraints, tableExclusionConstraints, tableForeignKeyConstraints, tableIndexConstraints;\n\n                var _this = this;\n\n                return __generator(this, function (_b) {\n                  switch (_b.label) {\n                    case 0:\n                      table = new Table();\n\n                      getSchemaFromKey = function (dbObject, key) {\n                        return dbObject[key] === currentSchema && (!_this.driver.options.schema || _this.driver.options.schema === currentSchema) ? undefined : dbObject[key];\n                      };\n\n                      schema = getSchemaFromKey(dbTable, \"table_schema\");\n                      table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n                      tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]); // create columns from the loaded columns\n\n                      _a = table;\n                      return [4\n                      /*yield*/\n                      , Promise.all(dbColumns.filter(function (dbColumn) {\n                        return _this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName;\n                      }).map(function (dbColumn) {\n                        return __awaiter(_this, void 0, void 0, function () {\n                          var columnConstraints, tableColumn, name_1, builtEnumName, enumName, sql, results, type, geometryColumnSql, results, geographyColumnSql, results, length_1, match, uniqueConstraint, isConstraintComposite;\n\n                          var _this = this;\n\n                          return __generator(this, function (_a) {\n                            switch (_a.label) {\n                              case 0:\n                                columnConstraints = dbConstraints.filter(function (dbConstraint) {\n                                  return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\n                                });\n                                tableColumn = new TableColumn();\n                                tableColumn.name = dbColumn[\"column_name\"];\n                                tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n\n                                if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\" || tableColumn.type === \"float\") {\n                                  // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                                  // we set 'undefined' in to unspecified property to avoid changing column on sync\n                                  if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                    tableColumn.precision = dbColumn[\"numeric_precision\"];\n                                  } else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                    tableColumn.precision = undefined;\n                                  }\n\n                                  if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                                    tableColumn.scale = dbColumn[\"numeric_scale\"];\n                                  } else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                                    tableColumn.scale = undefined;\n                                  }\n                                }\n\n                                if (tableColumn.type === \"interval\" || tableColumn.type === \"time without time zone\" || tableColumn.type === \"time with time zone\" || tableColumn.type === \"timestamp without time zone\" || tableColumn.type === \"timestamp with time zone\") {\n                                  tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"]) ? dbColumn[\"datetime_precision\"] : undefined;\n                                }\n\n                                if (!(dbColumn[\"data_type\"] === \"USER-DEFINED\" || dbColumn[\"data_type\"] === \"ARRAY\")) return [3\n                                /*break*/\n                                , 3];\n                                return [4\n                                /*yield*/\n                                , this.getUserDefinedTypeName(table, tableColumn) // check if `enumName` is specified by user\n                                ];\n\n                              case 1:\n                                name_1 = _a.sent().name;\n                                builtEnumName = this.buildEnumName(table, tableColumn, false, true);\n                                enumName = builtEnumName !== name_1 ? name_1 : undefined;\n                                sql = \"SELECT \\\"e\\\".\\\"enumlabel\\\" AS \\\"value\\\" FROM \\\"pg_enum\\\" \\\"e\\\" \" + \"INNER JOIN \\\"pg_type\\\" \\\"t\\\" ON \\\"t\\\".\\\"oid\\\" = \\\"e\\\".\\\"enumtypid\\\" \" + \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" + (\"WHERE \\\"n\\\".\\\"nspname\\\" = '\" + dbTable[\"table_schema\"] + \"' AND \\\"t\\\".\\\"typname\\\" = '\" + (enumName || name_1) + \"'\");\n                                return [4\n                                /*yield*/\n                                , this.query(sql)];\n\n                              case 2:\n                                results = _a.sent();\n\n                                if (results.length) {\n                                  tableColumn.type = \"enum\";\n                                  tableColumn.enum = results.map(function (result) {\n                                    return result[\"value\"];\n                                  });\n                                  tableColumn.enumName = enumName;\n                                }\n\n                                if (dbColumn[\"data_type\"] === \"ARRAY\") {\n                                  tableColumn.isArray = true;\n                                  type = tableColumn.type.replace(\"[]\", \"\");\n                                  tableColumn.type = this.connection.driver.normalizeType({\n                                    type: type\n                                  });\n                                }\n\n                                _a.label = 3;\n\n                              case 3:\n                                if (!(tableColumn.type === \"geometry\")) return [3\n                                /*break*/\n                                , 5];\n                                geometryColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geometry_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geometry_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + dbTable[\"table_name\"] + \"'\";\n                                return [4\n                                /*yield*/\n                                , this.query(geometryColumnSql)];\n\n                              case 4:\n                                results = _a.sent();\n                                tableColumn.spatialFeatureType = results[0].type;\n                                tableColumn.srid = results[0].srid;\n                                _a.label = 5;\n\n                              case 5:\n                                if (!(tableColumn.type === \"geography\")) return [3\n                                /*break*/\n                                , 7];\n                                geographyColumnSql = \"SELECT * FROM (\\n                        SELECT\\n                          \\\"f_table_schema\\\" \\\"table_schema\\\",\\n                          \\\"f_table_name\\\" \\\"table_name\\\",\\n                          \\\"f_geography_column\\\" \\\"column_name\\\",\\n                          \\\"srid\\\",\\n                          \\\"type\\\"\\n                        FROM \\\"geography_columns\\\"\\n                      ) AS _\\n                      WHERE (\" + tablesCondition + \") AND \\\"column_name\\\" = '\" + tableColumn.name + \"' AND \\\"table_name\\\" = '\" + dbTable[\"table_name\"] + \"'\";\n                                return [4\n                                /*yield*/\n                                , this.query(geographyColumnSql)];\n\n                              case 6:\n                                results = _a.sent();\n                                tableColumn.spatialFeatureType = results[0].type;\n                                tableColumn.srid = results[0].srid;\n                                _a.label = 7;\n\n                              case 7:\n                                // check only columns that have length property\n                                if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type) !== -1) {\n                                  if (tableColumn.isArray) {\n                                    match = /\\((\\d+)\\)/.exec(dbColumn[\"format_type\"]);\n                                    length_1 = match ? match[1] : undefined;\n                                  } else if (dbColumn[\"character_maximum_length\"]) {\n                                    length_1 = dbColumn[\"character_maximum_length\"].toString();\n                                  }\n\n                                  if (length_1) {\n                                    tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length_1) ? length_1 : \"\";\n                                  }\n                                }\n\n                                tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                                tableColumn.isPrimary = !!columnConstraints.find(function (constraint) {\n                                  return constraint[\"constraint_type\"] === \"PRIMARY\";\n                                });\n                                uniqueConstraint = columnConstraints.find(function (constraint) {\n                                  return constraint[\"constraint_type\"] === \"UNIQUE\";\n                                });\n                                isConstraintComposite = uniqueConstraint ? !!dbConstraints.find(function (dbConstraint) {\n                                  return dbConstraint[\"constraint_type\"] === \"UNIQUE\" && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"] && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"];\n                                }) : false;\n                                tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n\n                                if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\n                                  if (dbColumn[\"column_default\"].replace(/\"/gi, \"\") === \"nextval('\" + this.buildSequenceName(table, dbColumn[\"column_name\"], currentSchema, true) + \"'::regclass)\") {\n                                    tableColumn.isGenerated = true;\n                                    tableColumn.generationStrategy = \"increment\";\n                                  } else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\" || /^uuid_generate_v\\d\\(\\)/.test(dbColumn[\"column_default\"])) {\n                                    tableColumn.isGenerated = true;\n                                    tableColumn.generationStrategy = \"uuid\";\n                                  } else if (dbColumn[\"column_default\"] === \"now()\" || dbColumn[\"column_default\"].indexOf(\"'now'::text\") !== -1) {\n                                    tableColumn.default = dbColumn[\"column_default\"];\n                                  } else {\n                                    tableColumn.default = dbColumn[\"column_default\"].replace(/::[\\w\\s\\[\\]\\\"]+/g, \"\");\n                                    tableColumn.default = tableColumn.default.replace(/^(-?\\d+)$/, \"'$1'\");\n                                  }\n                                }\n\n                                tableColumn.comment = dbColumn[\"description\"] ? dbColumn[\"description\"] : undefined;\n                                if (dbColumn[\"character_set_name\"]) tableColumn.charset = dbColumn[\"character_set_name\"];\n                                if (dbColumn[\"collation_name\"]) tableColumn.collation = dbColumn[\"collation_name\"];\n                                return [2\n                                /*return*/\n                                , tableColumn];\n                            }\n                          });\n                        });\n                      }))];\n\n                    case 1:\n                      // create columns from the loaded columns\n                      _a.columns = _b.sent();\n                      tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                        return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"constraint_type\"] === \"UNIQUE\";\n                      }), function (dbConstraint) {\n                        return dbConstraint[\"constraint_name\"];\n                      });\n                      table.uniques = tableUniqueConstraints.map(function (constraint) {\n                        var uniques = dbConstraints.filter(function (dbC) {\n                          return dbC[\"constraint_name\"] === constraint[\"constraint_name\"];\n                        });\n                        return new TableUnique({\n                          name: constraint[\"constraint_name\"],\n                          columnNames: uniques.map(function (u) {\n                            return u[\"column_name\"];\n                          })\n                        });\n                      });\n                      tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                        return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"constraint_type\"] === \"CHECK\";\n                      }), function (dbConstraint) {\n                        return dbConstraint[\"constraint_name\"];\n                      });\n                      table.checks = tableCheckConstraints.map(function (constraint) {\n                        var checks = dbConstraints.filter(function (dbC) {\n                          return dbC[\"constraint_name\"] === constraint[\"constraint_name\"];\n                        });\n                        return new TableCheck({\n                          name: constraint[\"constraint_name\"],\n                          columnNames: checks.map(function (c) {\n                            return c[\"column_name\"];\n                          }),\n                          expression: constraint[\"expression\"].replace(/^\\s*CHECK\\s*\\((.*)\\)\\s*$/i, \"$1\")\n                        });\n                      });\n                      tableExclusionConstraints = OrmUtils.uniq(dbConstraints.filter(function (dbConstraint) {\n                        return _this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"constraint_type\"] === \"EXCLUDE\";\n                      }), function (dbConstraint) {\n                        return dbConstraint[\"constraint_name\"];\n                      });\n                      table.exclusions = tableExclusionConstraints.map(function (constraint) {\n                        return new TableExclusion({\n                          name: constraint[\"constraint_name\"],\n                          expression: constraint[\"expression\"].substring(8) // trim EXCLUDE from start of expression\n\n                        });\n                      });\n                      tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(function (dbForeignKey) {\n                        return _this.driver.buildTableName(dbForeignKey[\"table_name\"], dbForeignKey[\"table_schema\"]) === tableFullName;\n                      }), function (dbForeignKey) {\n                        return dbForeignKey[\"constraint_name\"];\n                      });\n                      table.foreignKeys = tableForeignKeyConstraints.map(function (dbForeignKey) {\n                        var foreignKeys = dbForeignKeys.filter(function (dbFk) {\n                          return dbFk[\"constraint_name\"] === dbForeignKey[\"constraint_name\"];\n                        }); // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n\n                        var schema = getSchemaFromKey(dbForeignKey, \"referenced_table_schema\");\n\n                        var referencedTableName = _this.driver.buildTableName(dbForeignKey[\"referenced_table_name\"], schema);\n\n                        return new TableForeignKey({\n                          name: dbForeignKey[\"constraint_name\"],\n                          columnNames: foreignKeys.map(function (dbFk) {\n                            return dbFk[\"column_name\"];\n                          }),\n                          referencedTableName: referencedTableName,\n                          referencedColumnNames: foreignKeys.map(function (dbFk) {\n                            return dbFk[\"referenced_column_name\"];\n                          }),\n                          onDelete: dbForeignKey[\"on_delete\"],\n                          onUpdate: dbForeignKey[\"on_update\"],\n                          deferrable: dbForeignKey[\"deferrable\"] ? dbForeignKey[\"deferred\"] : undefined\n                        });\n                      });\n                      tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(function (dbIndex) {\n                        return _this.driver.buildTableName(dbIndex[\"table_name\"], dbIndex[\"table_schema\"]) === tableFullName;\n                      }), function (dbIndex) {\n                        return dbIndex[\"constraint_name\"];\n                      });\n                      table.indices = tableIndexConstraints.map(function (constraint) {\n                        var indices = dbIndices.filter(function (index) {\n                          return index[\"table_schema\"] === constraint[\"table_schema\"] && index[\"table_name\"] === constraint[\"table_name\"] && index[\"constraint_name\"] === constraint[\"constraint_name\"];\n                        });\n                        return new TableIndex({\n                          table: table,\n                          name: constraint[\"constraint_name\"],\n                          columnNames: indices.map(function (i) {\n                            return i[\"column_name\"];\n                          }),\n                          isUnique: constraint[\"is_unique\"] === \"TRUE\",\n                          where: constraint[\"condition\"],\n                          isSpatial: indices.every(function (i) {\n                            return _this.driver.spatialTypes.indexOf(i[\"type_name\"]) >= 0;\n                          }),\n                          isFulltext: false\n                        });\n                      });\n                      return [2\n                      /*return*/\n                      , table];\n                  }\n                });\n              });\n            }))];\n        }\n      });\n    });\n  };\n  /**\n   * Builds create table sql.\n   */\n\n\n  PostgresQueryRunner.prototype.createTableSql = function (table, createForeignKeys) {\n    var _this = this;\n\n    var columnDefinitions = table.columns.map(function (column) {\n      return _this.buildCreateColumnSql(table, column);\n    }).join(\", \");\n    var sql = \"CREATE TABLE \" + this.escapePath(table) + \" (\" + columnDefinitions;\n    table.columns.filter(function (column) {\n      return column.isUnique;\n    }).forEach(function (column) {\n      var isUniqueExist = table.uniques.some(function (unique) {\n        return unique.columnNames.length === 1 && unique.columnNames[0] === column.name;\n      });\n      if (!isUniqueExist) table.uniques.push(new TableUnique({\n        name: _this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n        columnNames: [column.name]\n      }));\n    });\n\n    if (table.uniques.length > 0) {\n      var uniquesSql = table.uniques.map(function (unique) {\n        var uniqueName = unique.name ? unique.name : _this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n        var columnNames = unique.columnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        return \"CONSTRAINT \\\"\" + uniqueName + \"\\\" UNIQUE (\" + columnNames + \")\";\n      }).join(\", \");\n      sql += \", \" + uniquesSql;\n    }\n\n    if (table.checks.length > 0) {\n      var checksSql = table.checks.map(function (check) {\n        var checkName = check.name ? check.name : _this.connection.namingStrategy.checkConstraintName(table.name, check.expression);\n        return \"CONSTRAINT \\\"\" + checkName + \"\\\" CHECK (\" + check.expression + \")\";\n      }).join(\", \");\n      sql += \", \" + checksSql;\n    }\n\n    if (table.exclusions.length > 0) {\n      var exclusionsSql = table.exclusions.map(function (exclusion) {\n        var exclusionName = exclusion.name ? exclusion.name : _this.connection.namingStrategy.exclusionConstraintName(table.name, exclusion.expression);\n        return \"CONSTRAINT \\\"\" + exclusionName + \"\\\" EXCLUDE \" + exclusion.expression;\n      }).join(\", \");\n      sql += \", \" + exclusionsSql;\n    }\n\n    if (table.foreignKeys.length > 0 && createForeignKeys) {\n      var foreignKeysSql = table.foreignKeys.map(function (fk) {\n        var columnNames = fk.columnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        if (!fk.name) fk.name = _this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n        var referencedColumnNames = fk.referencedColumnNames.map(function (columnName) {\n          return \"\\\"\" + columnName + \"\\\"\";\n        }).join(\", \");\n        var constraint = \"CONSTRAINT \\\"\" + fk.name + \"\\\" FOREIGN KEY (\" + columnNames + \") REFERENCES \" + _this.escapePath(fk.referencedTableName) + \" (\" + referencedColumnNames + \")\";\n        if (fk.onDelete) constraint += \" ON DELETE \" + fk.onDelete;\n        if (fk.onUpdate) constraint += \" ON UPDATE \" + fk.onUpdate;\n        if (fk.deferrable) constraint += \" DEFERRABLE \" + fk.deferrable;\n        return constraint;\n      }).join(\", \");\n      sql += \", \" + foreignKeysSql;\n    }\n\n    var primaryColumns = table.columns.filter(function (column) {\n      return column.isPrimary;\n    });\n\n    if (primaryColumns.length > 0) {\n      var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(function (column) {\n        return column.name;\n      }));\n      var columnNames = primaryColumns.map(function (column) {\n        return \"\\\"\" + column.name + \"\\\"\";\n      }).join(\", \");\n      sql += \", CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNames + \")\";\n    }\n\n    sql += \")\";\n    table.columns.filter(function (it) {\n      return it.comment;\n    }).forEach(function (it) {\n      return sql += \"; COMMENT ON COLUMN \" + _this.escapePath(table) + \".\\\"\" + it.name + \"\\\" IS \" + _this.escapeComment(it.comment);\n    });\n    return new Query(sql);\n  };\n  /**\n   * Builds drop table sql.\n   */\n\n\n  PostgresQueryRunner.prototype.dropTableSql = function (tableOrPath) {\n    return new Query(\"DROP TABLE \" + this.escapePath(tableOrPath));\n  };\n\n  PostgresQueryRunner.prototype.createViewSql = function (view) {\n    var materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n    var viewName = this.escapePath(view);\n\n    if (typeof view.expression === \"string\") {\n      return new Query(\"CREATE \" + materializedClause + \"VIEW \" + viewName + \" AS \" + view.expression);\n    } else {\n      return new Query(\"CREATE \" + materializedClause + \"VIEW \" + viewName + \" AS \" + view.expression(this.connection).getQuery());\n    }\n  };\n\n  PostgresQueryRunner.prototype.insertViewDefinitionSql = function (view) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, splittedName, schema, name, type, expression, _a, query, parameters;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            splittedName = view.name.split(\".\");\n            schema = this.driver.options.schema || currentSchema;\n            name = view.name;\n\n            if (splittedName.length === 2) {\n              schema = splittedName[0];\n              name = splittedName[1];\n            }\n\n            type = view.materialized ? \"MATERIALIZED_VIEW\" : \"VIEW\";\n            expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n            _a = __read(this.connection.createQueryBuilder().insert().into(this.getTypeormMetadataTableName()).values({\n              type: type,\n              schema: schema,\n              name: name,\n              value: expression\n            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n            return [2\n            /*return*/\n            , new Query(query, parameters)];\n        }\n      });\n    });\n  };\n  /**\n   * Builds drop view sql.\n   */\n\n\n  PostgresQueryRunner.prototype.dropViewSql = function (view) {\n    var materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n    return new Query(\"DROP \" + materializedClause + \"VIEW \" + this.escapePath(view));\n  };\n  /**\n   * Builds remove view sql.\n   */\n\n\n  PostgresQueryRunner.prototype.deleteViewDefinitionSql = function (view) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, splittedName, schema, name, type, qb, _a, query, parameters;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            splittedName = view.name.split(\".\");\n            schema = this.driver.options.schema || currentSchema;\n            name = view.name;\n\n            if (splittedName.length === 2) {\n              schema = splittedName[0];\n              name = splittedName[1];\n            }\n\n            type = view.materialized ? \"MATERIALIZED_VIEW\" : \"VIEW\";\n            qb = this.connection.createQueryBuilder();\n            _a = __read(qb.delete().from(this.getTypeormMetadataTableName()).where(qb.escape(\"type\") + \" = :type\", {\n              type: type\n            }).andWhere(qb.escape(\"schema\") + \" = :schema\", {\n              schema: schema\n            }).andWhere(qb.escape(\"name\") + \" = :name\", {\n              name: name\n            }).getQueryAndParameters(), 2), query = _a[0], parameters = _a[1];\n            return [2\n            /*return*/\n            , new Query(query, parameters)];\n        }\n      });\n    });\n  };\n  /**\n   * Extracts schema name from given Table object or table name string.\n   */\n\n\n  PostgresQueryRunner.prototype.extractSchema = function (target) {\n    var tableName = target instanceof Table ? target.name : target;\n    return tableName.indexOf(\".\") === -1 ? this.driver.options.schema : tableName.split(\".\")[0];\n  };\n  /**\n   * Drops ENUM type from given schemas.\n   */\n\n\n  PostgresQueryRunner.prototype.dropEnumTypes = function (schemaNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var selectDropsQuery, dropQueries;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            selectDropsQuery = \"SELECT 'DROP TYPE IF EXISTS \\\"' || n.nspname || '\\\".\\\"' || t.typname || '\\\" CASCADE;' as \\\"query\\\" FROM \\\"pg_type\\\" \\\"t\\\" \" + \"INNER JOIN \\\"pg_enum\\\" \\\"e\\\" ON \\\"e\\\".\\\"enumtypid\\\" = \\\"t\\\".\\\"oid\\\" \" + \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" + (\"WHERE \\\"n\\\".\\\"nspname\\\" IN (\" + schemaNames + \") GROUP BY \\\"n\\\".\\\"nspname\\\", \\\"t\\\".\\\"typname\\\"\");\n            return [4\n            /*yield*/\n            , this.query(selectDropsQuery)];\n\n          case 1:\n            dropQueries = _a.sent();\n            return [4\n            /*yield*/\n            , Promise.all(dropQueries.map(function (q) {\n              return _this.query(q[\"query\"]);\n            }))];\n\n          case 2:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if enum with the given name exist in the database.\n   */\n\n\n  PostgresQueryRunner.prototype.hasEnumType = function (table, column) {\n    return __awaiter(this, void 0, void 0, function () {\n      var schema, enumName, sql, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            schema = this.parseTableName(table).schema;\n            enumName = this.buildEnumName(table, column, false, true);\n            sql = \"SELECT \\\"n\\\".\\\"nspname\\\", \\\"t\\\".\\\"typname\\\" FROM \\\"pg_type\\\" \\\"t\\\" \" + \"INNER JOIN \\\"pg_namespace\\\" \\\"n\\\" ON \\\"n\\\".\\\"oid\\\" = \\\"t\\\".\\\"typnamespace\\\" \" + (\"WHERE \\\"n\\\".\\\"nspname\\\" = \" + schema + \" AND \\\"t\\\".\\\"typname\\\" = '\" + enumName + \"'\");\n            return [4\n            /*yield*/\n            , this.query(sql)];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n  /**\n   * Builds create ENUM type sql.\n   */\n\n\n  PostgresQueryRunner.prototype.createEnumTypeSql = function (table, column, enumName) {\n    if (!enumName) enumName = this.buildEnumName(table, column);\n    var enumValues = column.enum.map(function (value) {\n      return \"'\" + value.replace(\"'\", \"''\") + \"'\";\n    }).join(\", \");\n    return new Query(\"CREATE TYPE \" + enumName + \" AS ENUM(\" + enumValues + \")\");\n  };\n  /**\n   * Builds create ENUM type sql.\n   */\n\n\n  PostgresQueryRunner.prototype.dropEnumTypeSql = function (table, column, enumName) {\n    if (!enumName) enumName = this.buildEnumName(table, column);\n    return new Query(\"DROP TYPE \" + enumName);\n  };\n  /**\n   * Builds create index sql.\n   */\n\n\n  PostgresQueryRunner.prototype.createIndexSql = function (table, index) {\n    var columns = index.columnNames.map(function (columnName) {\n      return \"\\\"\" + columnName + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"CREATE \" + (index.isUnique ? \"UNIQUE \" : \"\") + \"INDEX \\\"\" + index.name + \"\\\" ON \" + this.escapePath(table) + \" \" + (index.isSpatial ? \"USING GiST \" : \"\") + \"(\" + columns + \") \" + (index.where ? \"WHERE \" + index.where : \"\"));\n  };\n  /**\n   * Builds drop index sql.\n   */\n\n\n  PostgresQueryRunner.prototype.dropIndexSql = function (table, indexOrName) {\n    var indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n    var schema = this.extractSchema(table);\n    return schema ? new Query(\"DROP INDEX \\\"\" + schema + \"\\\".\\\"\" + indexName + \"\\\"\") : new Query(\"DROP INDEX \\\"\" + indexName + \"\\\"\");\n  };\n  /**\n   * Builds create primary key sql.\n   */\n\n\n  PostgresQueryRunner.prototype.createPrimaryKeySql = function (table, columnNames) {\n    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n    var columnNamesString = columnNames.map(function (columnName) {\n      return \"\\\"\" + columnName + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + primaryKeyName + \"\\\" PRIMARY KEY (\" + columnNamesString + \")\");\n  };\n  /**\n   * Builds drop primary key sql.\n   */\n\n\n  PostgresQueryRunner.prototype.dropPrimaryKeySql = function (table) {\n    var columnNames = table.primaryColumns.map(function (column) {\n      return column.name;\n    });\n    var primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + primaryKeyName + \"\\\"\");\n  };\n  /**\n   * Builds create unique constraint sql.\n   */\n\n\n  PostgresQueryRunner.prototype.createUniqueConstraintSql = function (table, uniqueConstraint) {\n    var columnNames = uniqueConstraint.columnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\", \");\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + uniqueConstraint.name + \"\\\" UNIQUE (\" + columnNames + \")\");\n  };\n  /**\n   * Builds drop unique constraint sql.\n   */\n\n\n  PostgresQueryRunner.prototype.dropUniqueConstraintSql = function (table, uniqueOrName) {\n    var uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + uniqueName + \"\\\"\");\n  };\n  /**\n   * Builds create check constraint sql.\n   */\n\n\n  PostgresQueryRunner.prototype.createCheckConstraintSql = function (table, checkConstraint) {\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + checkConstraint.name + \"\\\" CHECK (\" + checkConstraint.expression + \")\");\n  };\n  /**\n   * Builds drop check constraint sql.\n   */\n\n\n  PostgresQueryRunner.prototype.dropCheckConstraintSql = function (table, checkOrName) {\n    var checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + checkName + \"\\\"\");\n  };\n  /**\n   * Builds create exclusion constraint sql.\n   */\n\n\n  PostgresQueryRunner.prototype.createExclusionConstraintSql = function (table, exclusionConstraint) {\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + exclusionConstraint.name + \"\\\" EXCLUDE \" + exclusionConstraint.expression);\n  };\n  /**\n   * Builds drop exclusion constraint sql.\n   */\n\n\n  PostgresQueryRunner.prototype.dropExclusionConstraintSql = function (table, exclusionOrName) {\n    var exclusionName = exclusionOrName instanceof TableExclusion ? exclusionOrName.name : exclusionOrName;\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + exclusionName + \"\\\"\");\n  };\n  /**\n   * Builds create foreign key sql.\n   */\n\n\n  PostgresQueryRunner.prototype.createForeignKeySql = function (table, foreignKey) {\n    var columnNames = foreignKey.columnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\", \");\n    var referencedColumnNames = foreignKey.referencedColumnNames.map(function (column) {\n      return \"\\\"\" + column + \"\\\"\";\n    }).join(\",\");\n    var sql = \"ALTER TABLE \" + this.escapePath(table) + \" ADD CONSTRAINT \\\"\" + foreignKey.name + \"\\\" FOREIGN KEY (\" + columnNames + \") \" + (\"REFERENCES \" + this.escapePath(foreignKey.referencedTableName) + \"(\" + referencedColumnNames + \")\");\n    if (foreignKey.onDelete) sql += \" ON DELETE \" + foreignKey.onDelete;\n    if (foreignKey.onUpdate) sql += \" ON UPDATE \" + foreignKey.onUpdate;\n    if (foreignKey.deferrable) sql += \" DEFERRABLE \" + foreignKey.deferrable;\n    return new Query(sql);\n  };\n  /**\n   * Builds drop foreign key sql.\n   */\n\n\n  PostgresQueryRunner.prototype.dropForeignKeySql = function (table, foreignKeyOrName) {\n    var foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n    return new Query(\"ALTER TABLE \" + this.escapePath(table) + \" DROP CONSTRAINT \\\"\" + foreignKeyName + \"\\\"\");\n  };\n  /**\n   * Builds sequence name from given table and column.\n   */\n\n\n  PostgresQueryRunner.prototype.buildSequenceName = function (table, columnOrName, currentSchema, disableEscape, skipSchema) {\n    var columnName = columnOrName instanceof TableColumn ? columnOrName.name : columnOrName;\n    var schema = undefined;\n    var tableName = undefined;\n\n    if (table.name.indexOf(\".\") === -1) {\n      tableName = table.name;\n    } else {\n      schema = table.name.split(\".\")[0];\n      tableName = table.name.split(\".\")[1];\n    }\n\n    var seqName = tableName + \"_\" + columnName + \"_seq\";\n    if (seqName.length > this.connection.driver.maxAliasLength) // note doesn't yet handle corner cases where .length differs from number of UTF-8 bytes\n      seqName = tableName.substring(0, 29) + \"_\" + columnName.substring(0, Math.max(29, 63 - tableName.length - 5)) + \"_seq\";\n\n    if (schema && schema !== currentSchema && !skipSchema) {\n      return disableEscape ? schema + \".\" + seqName : \"\\\"\" + schema + \"\\\".\\\"\" + seqName + \"\\\"\";\n    } else {\n      return disableEscape ? \"\" + seqName : \"\\\"\" + seqName + \"\\\"\";\n    }\n  };\n  /**\n   * Builds ENUM type name from given table and column.\n   */\n\n\n  PostgresQueryRunner.prototype.buildEnumName = function (table, column, withSchema, disableEscape, toOld) {\n    if (withSchema === void 0) {\n      withSchema = true;\n    }\n\n    var schema = table.name.indexOf(\".\") === -1 ? this.driver.options.schema : table.name.split(\".\")[0];\n    var tableName = table.name.indexOf(\".\") === -1 ? table.name : table.name.split(\".\")[1];\n    var enumName = column.enumName ? column.enumName : tableName + \"_\" + column.name.toLowerCase() + \"_enum\";\n    if (schema && withSchema) enumName = schema + \".\" + enumName;\n    if (toOld) enumName = enumName + \"_old\";\n    return enumName.split(\".\").map(function (i) {\n      return disableEscape ? i : \"\\\"\" + i + \"\\\"\";\n    }).join(\".\");\n  };\n\n  PostgresQueryRunner.prototype.getUserDefinedTypeName = function (table, column) {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, _a, schema, name, result, udtName;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _b.sent();\n            _a = __read(table.name.split(\".\"), 2), schema = _a[0], name = _a[1];\n\n            if (!name) {\n              name = schema;\n              schema = this.driver.options.schema || currentSchema;\n            }\n\n            return [4\n            /*yield*/\n            , this.query(\"SELECT \\\"udt_schema\\\", \\\"udt_name\\\" \" + (\"FROM \\\"information_schema\\\".\\\"columns\\\" WHERE \\\"table_schema\\\" = '\" + schema + \"' AND \\\"table_name\\\" = '\" + name + \"' AND \\\"column_name\\\"='\" + column.name + \"'\"))];\n\n          case 2:\n            result = _b.sent();\n            udtName = result[0][\"udt_name\"];\n\n            if (udtName.indexOf(\"_\") === 0) {\n              udtName = udtName.substr(1, udtName.length);\n            }\n\n            return [2\n            /*return*/\n            , {\n              schema: result[0][\"udt_schema\"],\n              name: udtName\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * Escapes a given comment so it's safe to include in a query.\n   */\n\n\n  PostgresQueryRunner.prototype.escapeComment = function (comment) {\n    if (!comment || comment.length === 0) {\n      return \"NULL\";\n    }\n\n    comment = comment.replace(/'/g, \"''\").replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n\n    return \"'\" + comment + \"'\";\n  };\n  /**\n   * Escapes given table or view path.\n   */\n\n\n  PostgresQueryRunner.prototype.escapePath = function (target, disableEscape) {\n    var tableName = target instanceof Table || target instanceof View ? target.name : target;\n    tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? this.driver.options.schema + \".\" + tableName : tableName;\n    return tableName.split(\".\").map(function (i) {\n      return disableEscape ? i : \"\\\"\" + i + \"\\\"\";\n    }).join(\".\");\n  };\n  /**\n   * Returns object with table schema and table name.\n   */\n\n\n  PostgresQueryRunner.prototype.parseTableName = function (target) {\n    var tableName = target instanceof Table ? target.name : target;\n\n    if (tableName.indexOf(\".\") === -1) {\n      return {\n        schema: this.driver.options.schema ? \"'\" + this.driver.options.schema + \"'\" : \"current_schema()\",\n        tableName: \"'\" + tableName + \"'\"\n      };\n    } else {\n      return {\n        schema: \"'\" + tableName.split(\".\")[0] + \"'\",\n        tableName: \"'\" + tableName.split(\".\")[1] + \"'\"\n      };\n    }\n  };\n  /**\n   * Builds a query for create column.\n   */\n\n\n  PostgresQueryRunner.prototype.buildCreateColumnSql = function (table, column) {\n    var c = \"\\\"\" + column.name + \"\\\"\";\n\n    if (column.isGenerated === true && column.generationStrategy !== \"uuid\") {\n      if (column.type === \"integer\" || column.type === \"int\" || column.type === \"int4\") c += \" SERIAL\";\n      if (column.type === \"smallint\" || column.type === \"int2\") c += \" SMALLSERIAL\";\n      if (column.type === \"bigint\" || column.type === \"int8\") c += \" BIGSERIAL\";\n    }\n\n    if (column.type === \"enum\" || column.type === \"simple-enum\") {\n      c += \" \" + this.buildEnumName(table, column);\n      if (column.isArray) c += \" array\";\n    } else if (!column.isGenerated || column.type === \"uuid\") {\n      c += \" \" + this.connection.driver.createFullType(column);\n    }\n\n    if (column.charset) c += \" CHARACTER SET \\\"\" + column.charset + \"\\\"\";\n    if (column.collation) c += \" COLLATE \\\"\" + column.collation + \"\\\"\";\n    if (column.isNullable !== true) c += \" NOT NULL\";\n    if (column.default !== undefined && column.default !== null) c += \" DEFAULT \" + column.default;\n    if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default) c += \" DEFAULT \" + this.driver.uuidGenerator;\n    return c;\n  };\n  /**\n   * Checks if the PostgreSQL server has support for partitioned tables\n   */\n\n\n  PostgresQueryRunner.prototype.hasSupportForPartitionedTables = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.query(\"SELECT TRUE FROM information_schema.columns WHERE table_name = 'pg_class' and column_name = 'relispartition'\")];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result.length ? true : false];\n        }\n      });\n    });\n  };\n\n  return PostgresQueryRunner;\n}(BaseQueryRunner);\n\nexport { PostgresQueryRunner };","map":{"version":3,"sources":["../browser/src/driver/postgres/PostgresQueryRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {QueryFailedError} from \"../../error/QueryFailedError\";\nimport {QueryRunnerAlreadyReleasedError} from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport {TransactionAlreadyStartedError} from \"../../error/TransactionAlreadyStartedError\";\nimport {TransactionNotStartedError} from \"../../error/TransactionNotStartedError\";\nimport {ColumnType} from \"../../index\";\nimport {ReadStream} from \"../../platform/PlatformTools\";\nimport {BaseQueryRunner} from \"../../query-runner/BaseQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {TableIndexOptions} from \"../../schema-builder/options/TableIndexOptions\";\nimport {Table} from \"../../schema-builder/table/Table\";\nimport {TableCheck} from \"../../schema-builder/table/TableCheck\";\nimport {TableColumn} from \"../../schema-builder/table/TableColumn\";\nimport {TableExclusion} from \"../../schema-builder/table/TableExclusion\";\nimport {TableForeignKey} from \"../../schema-builder/table/TableForeignKey\";\nimport {TableIndex} from \"../../schema-builder/table/TableIndex\";\nimport {TableUnique} from \"../../schema-builder/table/TableUnique\";\nimport {View} from \"../../schema-builder/view/View\";\nimport {Broadcaster} from \"../../subscriber/Broadcaster\";\nimport {OrmUtils} from \"../../util/OrmUtils\";\nimport {Query} from \"../Query\";\nimport {IsolationLevel} from \"../types/IsolationLevel\";\nimport {PostgresDriver} from \"./PostgresDriver\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\nimport {BroadcasterResult} from \"../../subscriber/BroadcasterResult\";\n\n/**\n * Runs queries on a single postgres database connection.\n */\nexport class PostgresQueryRunner extends BaseQueryRunner implements QueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: PostgresDriver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    /**\n     * Special callback provided by a driver used to release a created connection.\n     */\n    protected releaseCallback: Function;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: PostgresDriver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.mode = mode;\n        this.broadcaster = new Broadcaster(this);\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<any> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated)  {\n            this.databaseConnectionPromise = this.driver.obtainSlaveConnection().then(([connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n\n                const onErrorCallback = () => this.release();\n                this.releaseCallback = () => {\n                    this.databaseConnection.removeListener(\"error\", onErrorCallback);\n                    release();\n                };\n                this.databaseConnection.on(\"error\", onErrorCallback);\n\n                return this.databaseConnection;\n            });\n\n        } else { // master\n            this.databaseConnectionPromise = this.driver.obtainMasterConnection().then(([connection, release]: any[]) => {\n                this.driver.connectedQueryRunners.push(this);\n                this.databaseConnection = connection;\n\n                const onErrorCallback = () => this.release();\n                this.releaseCallback = () => {\n                    this.databaseConnection.removeListener(\"error\", onErrorCallback);\n                    release();\n                };\n                this.databaseConnection.on(\"error\", onErrorCallback);\n\n                return this.databaseConnection;\n            });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        if (this.isReleased) {\n            return Promise.resolve();\n        }\n\n        this.isReleased = true;\n        if (this.releaseCallback)\n            this.releaseCallback();\n\n        const index = this.driver.connectedQueryRunners.indexOf(this);\n        if (index !== -1) this.driver.connectedQueryRunners.splice(index, 1);\n\n        return Promise.resolve();\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n        await this.query(\"START TRANSACTION\");\n        if (isolationLevel) {\n            await this.query(\"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel);\n        }\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive)\n            throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(beforeBroadcastResult);\n        if (beforeBroadcastResult.promises.length > 0) await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(afterBroadcastResult);\n        if (afterBroadcastResult.promises.length > 0) await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    async query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        const databaseConnection = await this.connect();\n\n        this.driver.connection.logger.logQuery(query, parameters, this);\n        try {\n            const queryStartTime = +new Date();\n            const result = await databaseConnection.query(query, parameters);\n            // log slow queries if maxQueryExecution time is set\n            const maxQueryExecutionTime = this.driver.connection.options.maxQueryExecutionTime;\n            const queryEndTime = +new Date();\n            const queryExecutionTime = queryEndTime - queryStartTime;\n            if (maxQueryExecutionTime && queryExecutionTime > maxQueryExecutionTime)\n                this.driver.connection.logger.logQuerySlow(queryExecutionTime, query, parameters, this);\n\n            switch (result.command) {\n                case \"DELETE\":\n                case \"UPDATE\":\n                    // for UPDATE and DELETE query additionally return number of affected rows\n                    return [result.rows, result.rowCount];\n                    break;\n                default:\n                    return result.rows;\n            }\n        } catch (err) {\n            this.driver.connection.logger.logQueryError(err, query, parameters, this);\n            throw new QueryFailedError(query, parameters, err);\n        }\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(query: string, parameters?: any[], onEnd?: Function, onError?: Function): Promise<ReadStream> {\n        const QueryStream = this.driver.loadStreamDependency();\n        if (this.isReleased)\n            throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect();\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const stream = databaseConnection.query(new QueryStream(query, parameters));\n                if (onEnd) stream.on(\"end\", onEnd);\n                if (onError) stream.on(\"error\", onError);\n                ok(stream);\n\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        const result = await this.query(`SELECT * FROM pg_database WHERE datname='${database}';`);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Loads currently using database\n     */\n    async getCurrentDatabase(): Promise<string> {\n        const query = await this.query(`SELECT * FROM current_database()`);\n        return query[0][\"current_database\"];\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        const result = await this.query(`SELECT * FROM \"information_schema\".\"schemata\" WHERE \"schema_name\" = '${schema}'`);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Loads currently using database schema\n     */\n    async getCurrentSchema(): Promise<string> {\n        const query = await this.query(`SELECT * FROM current_schema()`);\n        return query[0][\"current_schema\"];\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table|string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"information_schema\".\"tables\" WHERE \"table_schema\" = ${parsedTableName.schema} AND \"table_name\" = ${parsedTableName.tableName}`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(tableOrName: Table|string, columnName: string): Promise<boolean> {\n        const parsedTableName = this.parseTableName(tableOrName);\n        const sql = `SELECT * FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = ${parsedTableName.schema} AND \"table_name\" = ${parsedTableName.tableName} AND \"column_name\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     * Note: Postgres does not support database creation inside a transaction block.\n     */\n    async createDatabase(database: string, ifNotExist?: boolean): Promise<void> {\n        if (ifNotExist) {\n            const databaseAlreadyExists = await this.hasDatabase(database);\n\n            if (databaseAlreadyExists)\n                return Promise.resolve();\n        }\n\n        const up = `CREATE DATABASE \"${database}\"`;\n        const down = `DROP DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops database.\n     * Note: Postgres does not support database dropping inside a transaction block.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        const up = ifExist ? `DROP DATABASE IF EXISTS \"${database}\"` : `DROP DATABASE \"${database}\"`;\n        const down = `CREATE DATABASE \"${database}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\n        const up = ifNotExist ? `CREATE SCHEMA IF NOT EXISTS \"${schema}\"` : `CREATE SCHEMA \"${schema}\"`;\n        const down = `DROP SCHEMA \"${schema}\" CASCADE`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(schemaPath: string, ifExist?: boolean, isCascade?: boolean): Promise<void> {\n        const schema = schemaPath.indexOf(\".\") === -1 ? schemaPath : schemaPath.split(\".\")[0];\n        const up = ifExist ? `DROP SCHEMA IF EXISTS \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}` : `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\n        const down = `CREATE SCHEMA \"${schema}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(table: Table, ifNotExist: boolean = false, createForeignKeys: boolean = true, createIndices: boolean = true): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table have column with ENUM type, we must create this type in postgres.\n        const enumColumns = table.columns.filter(column => column.type === \"enum\" || column.type === \"simple-enum\")\n        const createdEnumTypes: string[] = []\n        for (const column of enumColumns) {\n            // TODO: Should also check if values of existing type matches expected ones\n            const hasEnum = await this.hasEnumType(table, column);\n            const enumName = this.buildEnumName(table, column)\n\n            // if enum with the same \"enumName\" is defined more then once, me must prevent double creation\n            if (!hasEnum && createdEnumTypes.indexOf(enumName) === -1) {\n                createdEnumTypes.push(enumName)\n                upQueries.push(this.createEnumTypeSql(table, column, enumName));\n                downQueries.push(this.dropEnumTypeSql(table, column, enumName));\n            }\n        }\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach(foreignKey => downQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        if (createIndices) {\n            table.indices.forEach(index => {\n\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(table, index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(target: Table|string, ifExist?: boolean, dropForeignKeys: boolean = true, dropIndices: boolean = true): Promise<void> {// It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(target);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const tableName = target instanceof Table ? target.name : target;\n        const table = await this.getCachedTable(tableName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n\n        if (dropIndices) {\n            table.indices.forEach(index => {\n                upQueries.push(this.dropIndexSql(table, index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        if (dropForeignKeys)\n            table.foreignKeys.forEach(foreignKey => upQueries.push(this.dropForeignKeySql(table, foreignKey)));\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View|string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(await this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(await this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(oldTableOrName: Table|string, newTableName: string): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable = oldTableOrName instanceof Table ? oldTableOrName : await this.getCachedTable(oldTableOrName);\n        const newTable = oldTable.clone();\n        const oldTableName = oldTable.name.indexOf(\".\") === -1 ? oldTable.name : oldTable.name.split(\".\")[1];\n        const schemaName = oldTable.name.indexOf(\".\") === -1 ? undefined : oldTable.name.split(\".\")[0];\n        newTable.name = schemaName ? `${schemaName}.${newTableName}` : newTableName;\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(oldTable)} RENAME TO \"${newTableName}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME TO \"${oldTableName}\"`));\n\n        // rename column primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(column => column.name);\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(oldTable, columnNames);\n            const newPkName = this.connection.namingStrategy.primaryKeyName(newTable, columnNames);\n\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n        }\n\n        // rename sequences\n        newTable.columns.map(col => {\n            if (col.isGenerated && col.generationStrategy === \"increment\") {\n                const seqName = this.buildSequenceName(oldTable, col.name, undefined, true, true);\n                const newSeqName = this.buildSequenceName(newTable, col.name, undefined, true, true);\n\n                const up = schemaName ? `ALTER SEQUENCE \"${schemaName}\".\"${seqName}\" RENAME TO \"${newSeqName}\"` : `ALTER SEQUENCE \"${seqName}\" RENAME TO \"${newSeqName}\"`;\n                const down = schemaName ? `ALTER SEQUENCE \"${schemaName}\".\"${newSeqName}\" RENAME TO \"${seqName}\"` : `ALTER SEQUENCE \"${newSeqName}\" RENAME TO \"${seqName}\"`;\n\n                upQueries.push(new Query(up));\n                downQueries.push(new Query(down));\n            }\n        });\n\n        // rename unique constraints\n        newTable.uniques.forEach(unique => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(newTable, unique.columnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach(index => {\n            // build new constraint name\n            const schema = this.extractSchema(newTable);\n            const newIndexName = this.connection.namingStrategy.indexName(newTable, index.columnNames, index.where);\n\n            // build queries\n            const up = schema ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"` : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\n            const down = schema ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"` : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\n            upQueries.push(new Query(up));\n            downQueries.push(new Query(down));\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach(foreignKey => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(newTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n            // build queries\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(newTable)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        // rename ENUM types\n        const enumColumns = newTable.columns.filter(column => column.type === \"enum\" || column.type === \"simple-enum\");\n        for (let column of enumColumns) {\n            // skip renaming for user-defined enum name\n            if (column.enumName) continue;\n\n            const oldEnumType = await this.getUserDefinedTypeName(oldTable, column);\n            upQueries.push(new Query(`ALTER TYPE \"${oldEnumType.schema}\".\"${oldEnumType.name}\" RENAME TO ${this.buildEnumName(newTable, column, false)}`));\n            downQueries.push(new Query(`ALTER TYPE ${this.buildEnumName(newTable, column)} RENAME TO \"${oldEnumType.name}\"`));\n        }\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(tableOrName: Table|string, column: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\n            const hasEnum = await this.hasEnumType(table, column);\n            if (!hasEnum) {\n                upQueries.push(this.createEnumTypeSql(table, column));\n                downQueries.push(this.dropEnumTypeSql(table, column));\n            }\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(table, columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                columnNames: [column.name]\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n        }\n\n        // create column's comment\n        if (column.comment) {\n            upQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${column.name}\" IS ${this.escapeComment(column.comment)}`));\n            downQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${column.name}\" IS ${this.escapeComment(column.comment)}`));\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newTableColumnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const oldColumn = oldTableColumnOrName instanceof TableColumn ? oldTableColumnOrName : table.columns.find(c => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        let newColumn;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        return this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(tableOrName: Table|string, oldTableColumnOrName: TableColumn|string, newColumn: TableColumn): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        let defaultValueChanged = false\n\n        const oldColumn = oldTableColumnOrName instanceof TableColumn\n            ? oldTableColumnOrName\n            : table.columns.find(column => column.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(`Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`);\n\n        if (oldColumn.type !== newColumn.type || oldColumn.length !== newColumn.length || newColumn.isArray !== oldColumn.isArray) {\n            // To avoid data conversion, we just recreate column\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n\n        } else {\n            if (oldColumn.name !== newColumn.name) {\n                // rename column\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${oldColumn.name}\" TO \"${newColumn.name}\"`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME COLUMN \"${newColumn.name}\" TO \"${oldColumn.name}\"`));\n\n                // rename ENUM type\n                if (oldColumn.type === \"enum\" || oldColumn.type === \"simple-enum\") {\n                    const oldEnumType = await this.getUserDefinedTypeName(table, oldColumn);\n                    upQueries.push(new Query(`ALTER TYPE \"${oldEnumType.schema}\".\"${oldEnumType.name}\" RENAME TO ${this.buildEnumName(table, newColumn, false)}`));\n                    downQueries.push(new Query(`ALTER TYPE ${this.buildEnumName(table, newColumn)} RENAME TO \"${oldEnumType.name}\"`));\n                }\n\n                // rename column primary key constraint\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(column => column.name);\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(clonedTable, columnNames);\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`));\n                }\n\n                // rename column sequence\n                if (oldColumn.isGenerated === true && newColumn.generationStrategy === \"increment\") {\n                    const schema = this.extractSchema(table);\n\n                    // building sequence name. Sequence without schema needed because it must be supplied in RENAME TO without\n                    // schema name, but schema needed in ALTER SEQUENCE argument.\n                    const seqName = this.buildSequenceName(table, oldColumn.name, undefined, true, true);\n                    const newSeqName = this.buildSequenceName(table, newColumn.name, undefined, true, true);\n\n                    const up = schema ? `ALTER SEQUENCE \"${schema}\".\"${seqName}\" RENAME TO \"${newSeqName}\"` : `ALTER SEQUENCE \"${seqName}\" RENAME TO \"${newSeqName}\"`;\n                    const down = schema ? `ALTER SEQUENCE \"${schema}\".\"${newSeqName}\" RENAME TO \"${seqName}\"` : `ALTER SEQUENCE \"${newSeqName}\" RENAME TO \"${seqName}\"`;\n                    upQueries.push(new Query(up));\n                    downQueries.push(new Query(down));\n                }\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach(unique => {\n                    // build new constraint name\n                    unique.columnNames.splice(unique.columnNames.indexOf(oldColumn.name), 1);\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(clonedTable, unique.columnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`));\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach(index => {\n                    // build new constraint name\n                    index.columnNames.splice(index.columnNames.indexOf(oldColumn.name), 1);\n                    index.columnNames.push(newColumn.name);\n                    const schema = this.extractSchema(table);\n                    const newIndexName = this.connection.namingStrategy.indexName(clonedTable, index.columnNames, index.where);\n\n                    // build queries\n                    const up = schema ? `ALTER INDEX \"${schema}\".\"${index.name}\" RENAME TO \"${newIndexName}\"` : `ALTER INDEX \"${index.name}\" RENAME TO \"${newIndexName}\"`;\n                    const down = schema ? `ALTER INDEX \"${schema}\".\"${newIndexName}\" RENAME TO \"${index.name}\"` : `ALTER INDEX \"${newIndexName}\" RENAME TO \"${index.name}\"`;\n                    upQueries.push(new Query(up));\n                    downQueries.push(new Query(down));\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable.findColumnForeignKeys(oldColumn).forEach(foreignKey => {\n                    // build new constraint name\n                    foreignKey.columnNames.splice(foreignKey.columnNames.indexOf(oldColumn.name), 1);\n                    foreignKey.columnNames.push(newColumn.name);\n                    const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(clonedTable, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n                    // build queries\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`));\n\n                    // replace constraint name\n                    foreignKey.name = newForeignKeyName;\n                });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(column => column.name === oldColumn.name);\n                clonedTable.columns[clonedTable.columns.indexOf(oldTableColumn!)].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (newColumn.precision !== oldColumn.precision || newColumn.scale !== oldColumn.scale) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(newColumn)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(oldColumn)}`));\n            }\n\n            if (\n                (newColumn.type === \"enum\" || newColumn.type === \"simple-enum\")\n                && (oldColumn.type === \"enum\" || oldColumn.type === \"simple-enum\")\n                && (!OrmUtils.isArraysEqual(newColumn.enum!, oldColumn.enum!) || newColumn.enumName !== oldColumn.enumName)\n            ) {\n                const arraySuffix = newColumn.isArray ? \"[]\" : \"\";\n\n                // \"public\".\"new_enum\"\n                const newEnumName = this.buildEnumName(table, newColumn);\n\n                // \"public\".\"old_enum\"\n                const oldEnumName = this.buildEnumName(table, oldColumn);\n\n                // \"old_enum\"\n                const oldEnumNameWithoutSchema = this.buildEnumName(table, oldColumn, false);\n\n                //\"public\".\"old_enum_old\"\n                const oldEnumNameWithSchema_old = this.buildEnumName(table, oldColumn, true, false, true);\n\n                //\"old_enum_old\"\n                const oldEnumNameWithoutSchema_old = this.buildEnumName(table, oldColumn, false, false, true);\n\n                // rename old ENUM\n                upQueries.push(new Query(`ALTER TYPE ${oldEnumName} RENAME TO ${oldEnumNameWithoutSchema_old}`));\n                downQueries.push(new Query(`ALTER TYPE ${oldEnumNameWithSchema_old} RENAME TO ${oldEnumNameWithoutSchema}`));\n\n                // create new ENUM\n                upQueries.push(this.createEnumTypeSql(table, newColumn, newEnumName));\n                downQueries.push(this.dropEnumTypeSql(table, newColumn, newEnumName));\n\n                // if column have default value, we must drop it to avoid issues with type casting\n                if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    // mark default as changed to prevent double update\n                    defaultValueChanged = true\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                }\n\n                // build column types\n                const upType = `${newEnumName}${arraySuffix} USING \"${newColumn.name}\"::\"text\"::${newEnumName}${arraySuffix}`;\n                const downType = `${oldEnumNameWithSchema_old}${arraySuffix} USING \"${newColumn.name}\"::\"text\"::${oldEnumNameWithSchema_old}${arraySuffix}`;\n\n                // update column to use new type\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${upType}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${downType}`));\n\n                // restore column default or create new one\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                }\n\n                // remove old ENUM\n                upQueries.push(this.dropEnumTypeSql(table, oldColumn, oldEnumNameWithSchema_old));\n                downQueries.push(this.createEnumTypeSql(table, oldColumn, oldEnumNameWithSchema_old));\n            }\n\n            if (oldColumn.isNullable !== newColumn.isNullable) {\n                if (newColumn.isNullable) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                } else {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" SET NOT NULL`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${oldColumn.name}\" DROP NOT NULL`));\n                }\n            }\n\n            if (oldColumn.comment !== newColumn.comment) {\n                upQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${oldColumn.name}\" IS ${this.escapeComment(newColumn.comment)}`));\n                downQueries.push(new Query(`COMMENT ON COLUMN ${this.escapePath(table)}.\"${newColumn.name}\" IS ${this.escapeComment(oldColumn.comment)}`));\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                    const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n                } else {\n                    const primaryColumn = primaryColumns.find(c => c.name === newColumn.name);\n                    primaryColumns.splice(primaryColumns.indexOf(primaryColumn!), 1);\n\n                    // update column in table\n                    const column = clonedTable.columns.find(column => column.name === newColumn.name);\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n                        const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n                        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [newColumn.name]),\n                        columnNames: [newColumn.name]\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint.name}\"`));\n\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(unique => {\n                        return unique.columnNames.length === 1 && !!unique.columnNames.find(columnName => columnName === newColumn.name);\n                    });\n                    clonedTable.uniques.splice(clonedTable.uniques.indexOf(uniqueConstraint!), 1);\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueConstraint!.name}\"`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint!.name}\" UNIQUE (\"${newColumn.name}\")`));\n                }\n            }\n\n            if (oldColumn.isGenerated !== newColumn.isGenerated && newColumn.generationStrategy !== \"uuid\") {\n                if (newColumn.isGenerated === true) {\n                    upQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, newColumn)} OWNED BY ${this.escapePath(table)}.\"${newColumn.name}\"`));\n                    downQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, newColumn)}`));\n\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT nextval('${this.buildSequenceName(table, newColumn, undefined, true)}')`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n\n                } else {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT nextval('${this.buildSequenceName(table, newColumn, undefined, true)}')`));\n\n                    upQueries.push(new Query(`DROP SEQUENCE ${this.buildSequenceName(table, newColumn)}`));\n                    downQueries.push(new Query(`CREATE SEQUENCE ${this.buildSequenceName(table, newColumn)} OWNED BY ${this.escapePath(table)}.\"${newColumn.name}\"`));\n                }\n            }\n\n            // the default might have changed when the enum changed\n            if (newColumn.default !== oldColumn.default && !defaultValueChanged) {\n                if (newColumn.default !== null && newColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${newColumn.default}`));\n\n                    if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                    } else {\n                        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    }\n\n                } else if (oldColumn.default !== null && oldColumn.default !== undefined) {\n                    upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" DROP DEFAULT`));\n                    downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" SET DEFAULT ${oldColumn.default}`));\n                }\n            }\n\n            if ((newColumn.spatialFeatureType || \"\").toLowerCase() !== (oldColumn.spatialFeatureType || \"\").toLowerCase() || newColumn.srid !== oldColumn.srid) {\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(newColumn)}`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ALTER COLUMN \"${newColumn.name}\" TYPE ${this.driver.createFullType(oldColumn)}`));\n            }\n\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(tableOrName: Table|string, changedColumns: { newColumn: TableColumn, oldColumn: TableColumn }[]): Promise<void> {\n        for (const {oldColumn, newColumn} of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(tableOrName: Table|string, columnOrName: TableColumn|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const column = columnOrName instanceof TableColumn ? columnOrName : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(`Column \"${columnOrName}\" was not found in table \"${table.name}\"`);\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n            const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, clonedTable.primaryColumns.map(column => column.name));\n                const columnNames = clonedTable.primaryColumns.map(primaryColumn => `\"${primaryColumn.name}\"`).join(\", \");\n                upQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`));\n                downQueries.push(new Query(`ALTER TABLE ${this.escapePath(clonedTable)} DROP CONSTRAINT \"${pkName}\"`));\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(index => index.columnNames.length === 1 && index.columnNames[0] === column.name);\n        if (columnIndex) {\n            clonedTable.indices.splice(clonedTable.indices.indexOf(columnIndex), 1);\n            upQueries.push(this.dropIndexSql(table, columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(check => !!check.columnNames && check.columnNames.length === 1 && check.columnNames[0] === column.name);\n        if (columnCheck) {\n            clonedTable.checks.splice(clonedTable.checks.indexOf(columnCheck), 1);\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n        if (columnUnique) {\n            clonedTable.uniques.splice(clonedTable.uniques.indexOf(columnUnique), 1);\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(this.createUniqueConstraintSql(table, columnUnique));\n        }\n\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP COLUMN \"${column.name}\"`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD ${this.buildCreateColumnSql(table, column)}`));\n\n        // drop enum type\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\n            const hasEnum = await this.hasEnumType(table, column);\n            if (hasEnum) {\n                const enumType = await this.getUserDefinedTypeName(table, column);\n                const escapedEnumName = `\"${enumType.schema}\".\"${enumType.name}\"`;\n                upQueries.push(this.dropEnumTypeSql(table, column, escapedEnumName));\n                downQueries.push(this.createEnumTypeSql(table, column, escapedEnumName));\n            }\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(tableOrName: Table|string, columnNames: string[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach(column => {\n            if (columnNames.find(columnName => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(tableOrName: Table|string, columns: TableColumn[]): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const columnNames = columns.map(column => column.name);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, primaryColumns.map(column => column.name));\n            const columnNamesString = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n            downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter(column => columnNames.indexOf(column.name) !== -1)\n            .forEach(column => column.isPrimary = true);\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(clonedTable.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        upQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`));\n        downQueries.push(new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${pkName}\"`));\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(table, table.primaryColumns.map(column => column.name));\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach(column => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates new unique constraint.\n     */\n    async createUniqueConstraint(tableOrName: Table|string, uniqueConstraint: TableUnique): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(table.name, uniqueConstraint.columnNames);\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates new unique constraints.\n     */\n    async createUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        for (const uniqueConstraint of uniqueConstraints) {\n            await this.createUniqueConstraint(tableOrName, uniqueConstraint);\n        }\n    }\n\n    /**\n     * Drops unique constraint.\n     */\n    async dropUniqueConstraint(tableOrName: Table|string, uniqueOrName: TableUnique|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const uniqueConstraint = uniqueOrName instanceof TableUnique ? uniqueOrName : table.uniques.find(u => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(`Supplied unique constraint was not found in table ${table.name}`);\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Drops unique constraints.\n     */\n    async dropUniqueConstraints(tableOrName: Table|string, uniqueConstraints: TableUnique[]): Promise<void> {\n        for (const uniqueConstraint of uniqueConstraints) {\n            await this.dropUniqueConstraint(tableOrName, uniqueConstraint);\n        }\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(tableOrName: Table|string, checkConstraint: TableCheck): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(table.name, checkConstraint.expression!);\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.createCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(tableOrName: Table|string, checkOrName: TableCheck|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const checkConstraint = checkOrName instanceof TableCheck ? checkOrName : table.checks.find(c => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(`Supplied check constraint was not found in table ${table.name}`);\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(tableOrName: Table|string, checkConstraints: TableCheck[]): Promise<void> {\n        const promises = checkConstraints.map(checkConstraint => this.dropCheckConstraint(tableOrName, checkConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates new exclusion constraint.\n     */\n    async createExclusionConstraint(tableOrName: Table|string, exclusionConstraint: TableExclusion): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!exclusionConstraint.name)\n            exclusionConstraint.name = this.connection.namingStrategy.exclusionConstraintName(table.name, exclusionConstraint.expression!);\n\n        const up = this.createExclusionConstraintSql(table, exclusionConstraint);\n        const down = this.dropExclusionConstraintSql(table, exclusionConstraint);\n        await this.executeQueries(up, down);\n        table.addExclusionConstraint(exclusionConstraint);\n    }\n\n    /**\n     * Creates new exclusion constraints.\n     */\n    async createExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        const promises = exclusionConstraints.map(exclusionConstraint => this.createExclusionConstraint(tableOrName, exclusionConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(tableOrName: Table|string, exclusionOrName: TableExclusion|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const exclusionConstraint = exclusionOrName instanceof TableExclusion ? exclusionOrName : table.exclusions.find(c => c.name === exclusionOrName);\n        if (!exclusionConstraint)\n            throw new Error(`Supplied exclusion constraint was not found in table ${table.name}`);\n\n        const up = this.dropExclusionConstraintSql(table, exclusionConstraint);\n        const down = this.createExclusionConstraintSql(table, exclusionConstraint);\n        await this.executeQueries(up, down);\n        table.removeExclusionConstraint(exclusionConstraint);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(tableOrName: Table|string, exclusionConstraints: TableExclusion[]): Promise<void> {\n        const promises = exclusionConstraints.map(exclusionConstraint => this.dropExclusionConstraint(tableOrName, exclusionConstraint));\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(tableOrName: Table|string, foreignKey: TableForeignKey): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(table.name, foreignKey.columnNames, foreignKey.referencedTableName, foreignKey.referencedColumnNames);\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        for (const foreignKey of foreignKeys) {\n            await this.createForeignKey(tableOrName, foreignKey);\n        }\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(tableOrName: Table|string, foreignKeyOrName: TableForeignKey|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const foreignKey = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName : table.foreignKeys.find(fk => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(`Supplied foreign key was not found in table ${table.name}`);\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(tableOrName: Table|string, foreignKeys: TableForeignKey[]): Promise<void> {\n        for (const foreignKey of foreignKeys) {\n            await this.dropForeignKey(tableOrName, foreignKey);\n        }\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(tableOrName: Table|string, index: TableIndex): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(table.name, index.columnNames, index.where);\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        for (const index of indices) {\n            await this.createIndex(tableOrName, index);\n        }\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(tableOrName: Table|string, indexOrName: TableIndex|string): Promise<void> {\n        const table = tableOrName instanceof Table ? tableOrName : await this.getCachedTable(tableOrName);\n        const index = indexOrName instanceof TableIndex ? indexOrName : table.indices.find(i => i.name === indexOrName);\n        if (!index)\n            throw new Error(`Supplied index was not found in table ${table.name}`);\n\n        const up = this.dropIndexSql(table, index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(tableOrName: Table|string, indices: TableIndex[]): Promise<void> {\n        for (const index of indices) {\n            await this.dropIndex(tableOrName, index);\n        }\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE ${this.escapePath(tableName)}`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        const schemas: string[] = [];\n        this.connection.entityMetadatas\n            .filter(metadata => metadata.schema)\n            .forEach(metadata => {\n                const isSchemaExist = !!schemas.find(schema => schema === metadata.schema);\n                if (!isSchemaExist)\n                    schemas.push(metadata.schema!);\n            });\n        schemas.push(this.driver.options.schema || \"current_schema()\");\n        const schemaNamesString = schemas.map(name => {\n            return name === \"current_schema()\" ? name : \"'\" + name + \"'\";\n        }).join(\", \");\n\n        await this.startTransaction();\n        try {\n            // drop views\n            const selectViewDropsQuery = `SELECT 'DROP VIEW IF EXISTS \"' || schemaname || '\".\"' || viewname || '\" CASCADE;' as \"query\" ` +\n             `FROM \"pg_views\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"viewname\" NOT IN ('geography_columns', 'geometry_columns', 'raster_columns', 'raster_overviews')`;\n            const dropViewQueries: ObjectLiteral[] = await this.query(selectViewDropsQuery);\n            await Promise.all(dropViewQueries.map(q => this.query(q[\"query\"])));\n\n            // drop materialized views\n            const selectMatViewDropsQuery = `SELECT 'DROP MATERIALIZED VIEW IF EXISTS \"' || schemaname || '\".\"' || matviewname || '\" CASCADE;' as \"query\" ` +\n             `FROM \"pg_matviews\" WHERE \"schemaname\" IN (${schemaNamesString})`;\n            const dropMatViewQueries: ObjectLiteral[] = await this.query(selectMatViewDropsQuery);\n            await Promise.all(dropMatViewQueries.map(q => this.query(q[\"query\"])));\n\n            // ignore spatial_ref_sys; it's a special table supporting PostGIS\n            // TODO generalize this as this.driver.ignoreTables\n\n            // drop tables\n            const selectTableDropsQuery = `SELECT 'DROP TABLE IF EXISTS \"' || schemaname || '\".\"' || tablename || '\" CASCADE;' as \"query\" FROM \"pg_tables\" WHERE \"schemaname\" IN (${schemaNamesString}) AND \"tablename\" NOT IN ('spatial_ref_sys')`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(selectTableDropsQuery);\n            await Promise.all(dropTableQueries.map(q => this.query(q[\"query\"])));\n\n            // drop enum types\n            await this.dropEnumTypes(schemaNamesString);\n\n            await this.commitTransaction();\n\n        } catch (error) {\n            try { // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(this.getTypeormMetadataTableName());\n        if (!hasTable)\n            return Promise.resolve([]);\n\n        const currentSchema = await this.getCurrentSchema()\n        const viewsCondition = viewNames.map(viewName => {\n            let [schema, name] = viewName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${name}')`;\n        }).join(\" OR \");\n\n        const query = `SELECT \"t\".* FROM ${this.escapePath(this.getTypeormMetadataTableName())} \"t\" ` +\n            `INNER JOIN \"pg_catalog\".\"pg_class\" \"c\" ON \"c\".\"relname\" = \"t\".\"name\" ` +\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"c\".\"relnamespace\" AND \"n\".\"nspname\" = \"t\".\"schema\" ` +\n            `WHERE \"t\".\"type\" IN ('VIEW', 'MATERIALIZED_VIEW') ${viewsCondition ? `AND (${viewsCondition})` : \"\"}`;\n\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            const schema = dbView[\"schema\"] === currentSchema && !this.driver.options.schema ? undefined : dbView[\"schema\"];\n            view.name = this.driver.buildTableName(dbView[\"name\"], schema);\n            view.expression = dbView[\"value\"];\n            view.materialized = dbView[\"type\"] === \"MATERIALIZED_VIEW\";\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length)\n            return [];\n\n        const currentSchema = await this.getCurrentSchema()\n\n        const tablesCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"table_schema\" = '${schema}' AND \"table_name\" = '${name}')`;\n        }).join(\" OR \");\n        const tablesSql = `SELECT * FROM \"information_schema\".\"tables\" WHERE ` + tablesCondition;\n\n        /**\n         * Uses standard SQL information_schema.columns table and postgres-specific\n         * pg_catalog.pg_attribute table to get column information.\n         * @see https://stackoverflow.com/a/19541865\n         */\n        const columnsSql = `SELECT columns.*, pg_catalog.col_description(('\"' || table_catalog || '\".\"' || table_schema || '\".\"' || table_name || '\"')::regclass::oid, ordinal_position) AS description, ` +\n                `('\"' || \"udt_schema\" || '\".\"' || \"udt_name\" || '\"')::\"regtype\" AS \"regtype\", pg_catalog.format_type(\"col_attr\".\"atttypid\", \"col_attr\".\"atttypmod\") AS \"format_type\" ` +\n            `FROM \"information_schema\".\"columns\" ` +\n            `LEFT JOIN \"pg_catalog\".\"pg_attribute\" AS \"col_attr\" ON \"col_attr\".\"attname\" = \"columns\".\"column_name\" ` +\n                `AND \"col_attr\".\"attrelid\" = ( ` +\n                    `SELECT \"cls\".\"oid\" FROM \"pg_catalog\".\"pg_class\" AS \"cls\" ` +\n                    `LEFT JOIN \"pg_catalog\".\"pg_namespace\" AS \"ns\" ON \"ns\".\"oid\" = \"cls\".\"relnamespace\" ` +\n                    `WHERE \"cls\".\"relname\" = \"columns\".\"table_name\" ` +\n                    `AND \"ns\".\"nspname\" = \"columns\".\"table_schema\" `+\n                `) ` +\n            `WHERE ` + tablesCondition;\n\n        const constraintsCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"ns\".\"nspname\" = '${schema}' AND \"t\".\"relname\" = '${name}')`;\n        }).join(\" OR \");\n\n        const constraintsSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"cnst\".\"conname\" AS \"constraint_name\", ` +\n            `pg_get_constraintdef(\"cnst\".\"oid\") AS \"expression\", ` +\n            `CASE \"cnst\".\"contype\" WHEN 'p' THEN 'PRIMARY' WHEN 'u' THEN 'UNIQUE' WHEN 'c' THEN 'CHECK' WHEN 'x' THEN 'EXCLUDE' END AS \"constraint_type\", \"a\".\"attname\" AS \"column_name\" ` +\n            `FROM \"pg_constraint\" \"cnst\" ` +\n            `INNER JOIN \"pg_class\" \"t\" ON \"t\".\"oid\" = \"cnst\".\"conrelid\" ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"cnst\".\"connamespace\" ` +\n            `LEFT JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"cnst\".\"conrelid\" AND \"a\".\"attnum\" = ANY (\"cnst\".\"conkey\") ` +\n            `WHERE \"t\".\"relkind\" IN ('r', 'p') AND (${constraintsCondition})`;\n\n        const indicesSql = `SELECT \"ns\".\"nspname\" AS \"table_schema\", \"t\".\"relname\" AS \"table_name\", \"i\".\"relname\" AS \"constraint_name\", \"a\".\"attname\" AS \"column_name\", ` +\n            `CASE \"ix\".\"indisunique\" WHEN 't' THEN 'TRUE' ELSE'FALSE' END AS \"is_unique\", pg_get_expr(\"ix\".\"indpred\", \"ix\".\"indrelid\") AS \"condition\", ` +\n            `\"types\".\"typname\" AS \"type_name\" ` +\n            `FROM \"pg_class\" \"t\" ` +\n            `INNER JOIN \"pg_index\" \"ix\" ON \"ix\".\"indrelid\" = \"t\".\"oid\" ` +\n            `INNER JOIN \"pg_attribute\" \"a\" ON \"a\".\"attrelid\" = \"t\".\"oid\"  AND \"a\".\"attnum\" = ANY (\"ix\".\"indkey\") ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"ns\".\"oid\" = \"t\".\"relnamespace\" ` +\n            `INNER JOIN \"pg_class\" \"i\" ON \"i\".\"oid\" = \"ix\".\"indexrelid\" ` +\n            `INNER JOIN \"pg_type\" \"types\" ON \"types\".\"oid\" = \"a\".\"atttypid\" ` +\n            `LEFT JOIN \"pg_constraint\" \"cnst\" ON \"cnst\".\"conname\" = \"i\".\"relname\" ` +\n            `WHERE \"t\".\"relkind\" IN ('r', 'p') AND \"cnst\".\"contype\" IS NULL AND (${constraintsCondition})`;\n\n        const foreignKeysCondition = tableNames.map(tableName => {\n            let [schema, name] = tableName.split(\".\");\n            if (!name) {\n                name = schema;\n                schema = this.driver.options.schema || currentSchema;\n            }\n            return `(\"ns\".\"nspname\" = '${schema}' AND \"cl\".\"relname\" = '${name}')`;\n        }).join(\" OR \");\n\n        const hasRelispartitionColumn = await this.hasSupportForPartitionedTables();\n        const isPartitionCondition = hasRelispartitionColumn ? ` AND \"cl\".\"relispartition\" = 'f'` : \"\";\n\n        const foreignKeysSql = `SELECT \"con\".\"conname\" AS \"constraint_name\", \"con\".\"nspname\" AS \"table_schema\", \"con\".\"relname\" AS \"table_name\", \"att2\".\"attname\" AS \"column_name\", ` +\n            `\"ns\".\"nspname\" AS \"referenced_table_schema\", \"cl\".\"relname\" AS \"referenced_table_name\", \"att\".\"attname\" AS \"referenced_column_name\", \"con\".\"confdeltype\" AS \"on_delete\", ` +\n            `\"con\".\"confupdtype\" AS \"on_update\", \"con\".\"condeferrable\" AS \"deferrable\", \"con\".\"condeferred\" AS \"deferred\" ` +\n            `FROM ( ` +\n            `SELECT UNNEST (\"con1\".\"conkey\") AS \"parent\", UNNEST (\"con1\".\"confkey\") AS \"child\", \"con1\".\"confrelid\", \"con1\".\"conrelid\", \"con1\".\"conname\", \"con1\".\"contype\", \"ns\".\"nspname\", ` +\n            `\"cl\".\"relname\", \"con1\".\"condeferrable\", ` +\n            `CASE WHEN \"con1\".\"condeferred\" THEN 'INITIALLY DEFERRED' ELSE 'INITIALLY IMMEDIATE' END as condeferred, ` +\n            `CASE \"con1\".\"confdeltype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confdeltype\", ` +\n            `CASE \"con1\".\"confupdtype\" WHEN 'a' THEN 'NO ACTION' WHEN 'r' THEN 'RESTRICT' WHEN 'c' THEN 'CASCADE' WHEN 'n' THEN 'SET NULL' WHEN 'd' THEN 'SET DEFAULT' END as \"confupdtype\" ` +\n            `FROM \"pg_class\" \"cl\" ` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\n            `INNER JOIN \"pg_constraint\" \"con1\" ON \"con1\".\"conrelid\" = \"cl\".\"oid\" ` +\n            `WHERE \"con1\".\"contype\" = 'f' AND (${foreignKeysCondition}) ` +\n            `) \"con\" ` +\n            `INNER JOIN \"pg_attribute\" \"att\" ON \"att\".\"attrelid\" = \"con\".\"confrelid\" AND \"att\".\"attnum\" = \"con\".\"child\" ` +\n            `INNER JOIN \"pg_class\" \"cl\" ON \"cl\".\"oid\" = \"con\".\"confrelid\" ${isPartitionCondition}` +\n            `INNER JOIN \"pg_namespace\" \"ns\" ON \"cl\".\"relnamespace\" = \"ns\".\"oid\" ` +\n            `INNER JOIN \"pg_attribute\" \"att2\" ON \"att2\".\"attrelid\" = \"con\".\"conrelid\" AND \"att2\".\"attnum\" = \"con\".\"parent\"`;\n\n        const [dbTables, dbColumns, dbConstraints, dbIndices, dbForeignKeys]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(constraintsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n        ]);\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length)\n            return [];\n\n        // create tables for loaded tables\n        return Promise.all(dbTables.map(async dbTable => {\n            const table = new Table();\n\n            const getSchemaFromKey = (dbObject: any, key: string) => {\n                return dbObject[key] === currentSchema && (!this.driver.options.schema || this.driver.options.schema === currentSchema)\n                    ? undefined\n                    : dbObject[key]\n            };\n            // We do not need to join schema name, when database is by default.\n            // In this case we need local variable `tableFullName` for below comparison.\n            const schema = getSchemaFromKey(dbTable, \"table_schema\");\n            table.name = this.driver.buildTableName(dbTable[\"table_name\"], schema);\n            const tableFullName = this.driver.buildTableName(dbTable[\"table_name\"], dbTable[\"table_schema\"]);\n\n            // create columns from the loaded columns\n            table.columns = await Promise.all(dbColumns\n                .filter(dbColumn => this.driver.buildTableName(dbColumn[\"table_name\"], dbColumn[\"table_schema\"]) === tableFullName)\n                .map(async dbColumn => {\n\n                    const columnConstraints = dbConstraints.filter(dbConstraint => {\n                        return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName && dbConstraint[\"column_name\"] === dbColumn[\"column_name\"];\n                    });\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"column_name\"];\n                    tableColumn.type = dbColumn[\"regtype\"].toLowerCase();\n\n                    if (tableColumn.type === \"numeric\" || tableColumn.type === \"decimal\" || tableColumn.type === \"float\") {\n                        // If one of these properties was set, and another was not, Postgres sets '0' in to unspecified property\n                        // we set 'undefined' in to unspecified property to avoid changing column on sync\n                        if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                            tableColumn.precision = dbColumn[\"numeric_precision\"];\n                        } else if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                            tableColumn.precision = undefined;\n                        }\n                        if (dbColumn[\"numeric_scale\"] !== null && !this.isDefaultColumnScale(table, tableColumn, dbColumn[\"numeric_scale\"])) {\n                            tableColumn.scale = dbColumn[\"numeric_scale\"];\n                        } else if (dbColumn[\"numeric_precision\"] !== null && !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"numeric_precision\"])) {\n                            tableColumn.scale = undefined;\n                        }\n                    }\n\n                    if (tableColumn.type === \"interval\"\n                        || tableColumn.type === \"time without time zone\"\n                        || tableColumn.type === \"time with time zone\"\n                        || tableColumn.type === \"timestamp without time zone\"\n                        || tableColumn.type === \"timestamp with time zone\") {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(table, tableColumn, dbColumn[\"datetime_precision\"]) ? dbColumn[\"datetime_precision\"] : undefined;\n                    }\n\n                    // check if column has user-defined data type.\n                    // NOTE: if ENUM type defined with \"array:true\" it comes with ARRAY type instead of USER-DEFINED\n                    if (dbColumn[\"data_type\"] === \"USER-DEFINED\" || dbColumn[\"data_type\"] === \"ARRAY\") {\n                        const { name } = await this.getUserDefinedTypeName(table, tableColumn)\n\n                        // check if `enumName` is specified by user\n                        const builtEnumName = this.buildEnumName(table, tableColumn, false, true)\n                        const enumName = builtEnumName !== name ? name : undefined\n\n                        // check if type is ENUM\n                        const sql = `SELECT \"e\".\"enumlabel\" AS \"value\" FROM \"pg_enum\" \"e\" ` +\n                            `INNER JOIN \"pg_type\" \"t\" ON \"t\".\"oid\" = \"e\".\"enumtypid\" ` +\n                            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\n                            `WHERE \"n\".\"nspname\" = '${dbTable[\"table_schema\"]}' AND \"t\".\"typname\" = '${enumName || name}'`;\n                        const results: ObjectLiteral[] = await this.query(sql);\n\n                        if (results.length) {\n                            tableColumn.type = \"enum\";\n                            tableColumn.enum = results.map(result => result[\"value\"]);\n                            tableColumn.enumName = enumName\n                        }\n\n                        if (dbColumn[\"data_type\"] === \"ARRAY\") {\n                            tableColumn.isArray = true;\n                            const type = tableColumn.type.replace(\"[]\", \"\");\n                            tableColumn.type = this.connection.driver.normalizeType({type: type});\n                        }\n                    }\n\n                    if (tableColumn.type === \"geometry\") {\n                        const geometryColumnSql = `SELECT * FROM (\n                        SELECT\n                          \"f_table_schema\" \"table_schema\",\n                          \"f_table_name\" \"table_name\",\n                          \"f_geometry_column\" \"column_name\",\n                          \"srid\",\n                          \"type\"\n                        FROM \"geometry_columns\"\n                      ) AS _\n                      WHERE (${tablesCondition}) AND \"column_name\" = '${tableColumn.name}' AND \"table_name\" = '${dbTable[\"table_name\"]}'`;\n\n                        const results: ObjectLiteral[] = await this.query(geometryColumnSql);\n                        tableColumn.spatialFeatureType = results[0].type;\n                        tableColumn.srid = results[0].srid;\n                    }\n\n                    if (tableColumn.type === \"geography\") {\n                        const geographyColumnSql = `SELECT * FROM (\n                        SELECT\n                          \"f_table_schema\" \"table_schema\",\n                          \"f_table_name\" \"table_name\",\n                          \"f_geography_column\" \"column_name\",\n                          \"srid\",\n                          \"type\"\n                        FROM \"geography_columns\"\n                      ) AS _\n                      WHERE (${tablesCondition}) AND \"column_name\" = '${tableColumn.name}' AND \"table_name\" = '${dbTable[\"table_name\"]}'`;\n\n                        const results: ObjectLiteral[] = await this.query(geographyColumnSql);\n                        tableColumn.spatialFeatureType = results[0].type;\n                        tableColumn.srid = results[0].srid;\n                    }\n\n                    // check only columns that have length property\n                    if (this.driver.withLengthColumnTypes.indexOf(tableColumn.type as ColumnType) !== -1) {\n                      let length;\n                      if (tableColumn.isArray) {\n                        const match = /\\((\\d+)\\)/.exec(dbColumn[\"format_type\"]);\n                        length = match ? match[1] : undefined;\n                      } else if (dbColumn[\"character_maximum_length\"]) {\n                        length = dbColumn[\"character_maximum_length\"].toString();\n                      }\n                      if (length) {\n                        tableColumn.length = !this.isDefaultColumnLength(table, tableColumn, length) ? length : \"\";\n                      }\n                    }\n                    tableColumn.isNullable = dbColumn[\"is_nullable\"] === \"YES\";\n                    tableColumn.isPrimary = !!columnConstraints.find(constraint => constraint[\"constraint_type\"] === \"PRIMARY\");\n\n                    const uniqueConstraint = columnConstraints.find(constraint => constraint[\"constraint_type\"] === \"UNIQUE\");\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(dbConstraint => dbConstraint[\"constraint_type\"] === \"UNIQUE\"\n                            && dbConstraint[\"constraint_name\"] === uniqueConstraint[\"constraint_name\"]\n                            && dbConstraint[\"column_name\"] !== dbColumn[\"column_name\"])\n                        : false;\n                    tableColumn.isUnique = !!uniqueConstraint && !isConstraintComposite;\n\n                    if (dbColumn[\"column_default\"] !== null && dbColumn[\"column_default\"] !== undefined) {\n                        if (dbColumn[\"column_default\"].replace(/\"/gi, \"\") === `nextval('${this.buildSequenceName(table, dbColumn[\"column_name\"], currentSchema, true)}'::regclass)`) {\n                            tableColumn.isGenerated = true;\n                            tableColumn.generationStrategy = \"increment\";\n                        } else if (dbColumn[\"column_default\"] === \"gen_random_uuid()\" || /^uuid_generate_v\\d\\(\\)/.test(dbColumn[\"column_default\"])) {\n                            tableColumn.isGenerated = true;\n                            tableColumn.generationStrategy = \"uuid\";\n                        } else if (dbColumn[\"column_default\"] === \"now()\" || dbColumn[\"column_default\"].indexOf(\"'now'::text\") !== -1) {\n                            tableColumn.default = dbColumn[\"column_default\"];\n                        } else {\n                            tableColumn.default = dbColumn[\"column_default\"].replace(/::[\\w\\s\\[\\]\\\"]+/g, \"\");\n                            tableColumn.default = tableColumn.default.replace(/^(-?\\d+)$/, \"'$1'\");\n                        }\n                    }\n\n                    tableColumn.comment = dbColumn[\"description\"] ? dbColumn[\"description\"] : undefined;\n                    if (dbColumn[\"character_set_name\"])\n                        tableColumn.charset = dbColumn[\"character_set_name\"];\n                    if (dbColumn[\"collation_name\"])\n                        tableColumn.collation = dbColumn[\"collation_name\"];\n                    return tableColumn;\n                }));\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                    && dbConstraint[\"constraint_type\"] === \"UNIQUE\";\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\n\n            table.uniques = tableUniqueConstraints.map(constraint => {\n                const uniques = dbConstraints.filter(dbC => dbC[\"constraint_name\"] === constraint[\"constraint_name\"]);\n                return new TableUnique({\n                    name: constraint[\"constraint_name\"],\n                    columnNames: uniques.map(u => u[\"column_name\"])\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                    && dbConstraint[\"constraint_type\"] === \"CHECK\";\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\n\n            table.checks = tableCheckConstraints.map(constraint => {\n                const checks = dbConstraints.filter(dbC => dbC[\"constraint_name\"] === constraint[\"constraint_name\"]);\n                return new TableCheck({\n                    name: constraint[\"constraint_name\"],\n                    columnNames: checks.map(c => c[\"column_name\"]),\n                    expression: constraint[\"expression\"].replace(/^\\s*CHECK\\s*\\((.*)\\)\\s*$/i, \"$1\")\n                });\n            });\n\n            // find exclusion constraints of table, group them by constraint name and build TableExclusion.\n            const tableExclusionConstraints = OrmUtils.uniq(dbConstraints.filter(dbConstraint => {\n                return this.driver.buildTableName(dbConstraint[\"table_name\"], dbConstraint[\"table_schema\"]) === tableFullName\n                    && dbConstraint[\"constraint_type\"] === \"EXCLUDE\";\n            }), dbConstraint => dbConstraint[\"constraint_name\"]);\n\n            table.exclusions = tableExclusionConstraints.map(constraint => {\n                return new TableExclusion({\n                    name: constraint[\"constraint_name\"],\n                    expression: constraint[\"expression\"].substring(8) // trim EXCLUDE from start of expression\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(dbForeignKeys.filter(dbForeignKey => {\n                return this.driver.buildTableName(dbForeignKey[\"table_name\"], dbForeignKey[\"table_schema\"]) === tableFullName;\n            }), dbForeignKey => dbForeignKey[\"constraint_name\"]);\n\n            table.foreignKeys = tableForeignKeyConstraints.map(dbForeignKey => {\n                const foreignKeys = dbForeignKeys.filter(dbFk => dbFk[\"constraint_name\"] === dbForeignKey[\"constraint_name\"]);\n\n                // if referenced table located in currently used schema, we don't need to concat schema name to table name.\n                const schema = getSchemaFromKey(dbForeignKey, \"referenced_table_schema\");\n                const referencedTableName = this.driver.buildTableName(dbForeignKey[\"referenced_table_name\"], schema);\n\n                return new TableForeignKey({\n                    name: dbForeignKey[\"constraint_name\"],\n                    columnNames: foreignKeys.map(dbFk => dbFk[\"column_name\"]),\n                    referencedTableName: referencedTableName,\n                    referencedColumnNames: foreignKeys.map(dbFk => dbFk[\"referenced_column_name\"]),\n                    onDelete: dbForeignKey[\"on_delete\"],\n                    onUpdate: dbForeignKey[\"on_update\"],\n                    deferrable: dbForeignKey[\"deferrable\"] ? dbForeignKey[\"deferred\"] : undefined,\n                });\n            });\n\n            // find index constraints of table, group them by constraint name and build TableIndex.\n            const tableIndexConstraints = OrmUtils.uniq(dbIndices.filter(dbIndex => {\n                return this.driver.buildTableName(dbIndex[\"table_name\"], dbIndex[\"table_schema\"]) === tableFullName;\n            }), dbIndex => dbIndex[\"constraint_name\"]);\n\n            table.indices = tableIndexConstraints.map(constraint => {\n                const indices = dbIndices.filter(index => {\n                    return index[\"table_schema\"] === constraint[\"table_schema\"]\n                        && index[\"table_name\"] === constraint[\"table_name\"]\n                        && index[\"constraint_name\"] === constraint[\"constraint_name\"];\n                });\n                return new TableIndex(<TableIndexOptions>{\n                    table: table,\n                    name: constraint[\"constraint_name\"],\n                    columnNames: indices.map(i => i[\"column_name\"]),\n                    isUnique: constraint[\"is_unique\"] === \"TRUE\",\n                    where: constraint[\"condition\"],\n                    isSpatial: indices.every(i => this.driver.spatialTypes.indexOf(i[\"type_name\"]) >= 0),\n                    isFulltext: false\n                });\n            });\n\n            return table;\n        }));\n    }\n\n    /**\n     * Builds create table sql.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns.map(column => this.buildCreateColumnSql(table, column)).join(\", \");\n        let sql = `CREATE TABLE ${this.escapePath(table)} (${columnDefinitions}`;\n\n        table.columns\n            .filter(column => column.isUnique)\n            .forEach(column => {\n                const isUniqueExist = table.uniques.some(unique => unique.columnNames.length === 1 && unique.columnNames[0] === column.name);\n                if (!isUniqueExist)\n                    table.uniques.push(new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(table.name, [column.name]),\n                        columnNames: [column.name]\n                    }));\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques.map(unique => {\n                const uniqueName = unique.name ? unique.name : this.connection.namingStrategy.uniqueConstraintName(table.name, unique.columnNames);\n                const columnNames = unique.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n            }).join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks.map(check => {\n                const checkName = check.name ? check.name : this.connection.namingStrategy.checkConstraintName(table.name, check.expression!);\n                return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n            }).join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.exclusions.length > 0) {\n            const exclusionsSql = table.exclusions.map(exclusion => {\n                const exclusionName = exclusion.name ? exclusion.name : this.connection.namingStrategy.exclusionConstraintName(table.name, exclusion.expression!);\n                return `CONSTRAINT \"${exclusionName}\" EXCLUDE ${exclusion.expression}`;\n            }).join(\", \");\n\n            sql += `, ${exclusionsSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys.map(fk => {\n                const columnNames = fk.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n                if (!fk.name)\n                    fk.name = this.connection.namingStrategy.foreignKeyName(table.name, fk.columnNames, fk.referencedTableName, fk.referencedColumnNames);\n                const referencedColumnNames = fk.referencedColumnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n\n                let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES ${this.escapePath(fk.referencedTableName)} (${referencedColumnNames})`;\n                if (fk.onDelete)\n                    constraint += ` ON DELETE ${fk.onDelete}`;\n                if (fk.onUpdate)\n                    constraint += ` ON UPDATE ${fk.onUpdate}`;\n                if (fk.deferrable)\n                    constraint += ` DEFERRABLE ${fk.deferrable}`;\n\n                return constraint;\n            }).join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(column => column.isPrimary);\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, primaryColumns.map(column => column.name));\n            const columnNames = primaryColumns.map(column => `\"${column.name}\"`).join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        table.columns\n            .filter(it => it.comment)\n            .forEach(it => sql += `; COMMENT ON COLUMN ${this.escapePath(table)}.\"${it.name}\" IS ${this.escapeComment(it.comment)}`);\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(tableOrPath: Table|string): Query {\n        return new Query(`DROP TABLE ${this.escapePath(tableOrPath)}`);\n    }\n\n    protected createViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        const viewName = this.escapePath(view);\n\n        if (typeof view.expression === \"string\") {\n            return new Query(`CREATE ${materializedClause}VIEW ${viewName} AS ${view.expression}`);\n        } else {\n            return new Query(`CREATE ${materializedClause}VIEW ${viewName} AS ${view.expression(this.connection).getQuery()}`);\n        }\n    }\n\n    protected async insertViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema()\n        const splittedName = view.name.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = view.name;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const type = view.materialized ? \"MATERIALIZED_VIEW\" : \"VIEW\"\n        const expression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n        const [query, parameters] = this.connection.createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: type, schema: schema, name: name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        return new Query(`DROP ${materializedClause}VIEW ${this.escapePath(view)}`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected async deleteViewDefinitionSql(view: View): Promise<Query> {\n        const currentSchema = await this.getCurrentSchema()\n        const splittedName = view.name.split(\".\");\n        let schema = this.driver.options.schema || currentSchema;\n        let name = view.name;\n        if (splittedName.length === 2) {\n            schema = splittedName[0];\n            name = splittedName[1];\n        }\n\n        const type = view.materialized ? \"MATERIALIZED_VIEW\" : \"VIEW\"\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb.delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = :type`, { type })\n            .andWhere(`${qb.escape(\"schema\")} = :schema`, { schema })\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Extracts schema name from given Table object or table name string.\n     */\n    protected extractSchema(target: Table|string): string|undefined {\n        const tableName = target instanceof Table ? target.name : target;\n        return tableName.indexOf(\".\") === -1 ? this.driver.options.schema : tableName.split(\".\")[0];\n    }\n\n    /**\n     * Drops ENUM type from given schemas.\n     */\n    protected async dropEnumTypes(schemaNames: string): Promise<void> {\n        const selectDropsQuery = `SELECT 'DROP TYPE IF EXISTS \"' || n.nspname || '\".\"' || t.typname || '\" CASCADE;' as \"query\" FROM \"pg_type\" \"t\" ` +\n            `INNER JOIN \"pg_enum\" \"e\" ON \"e\".\"enumtypid\" = \"t\".\"oid\" ` +\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\n            `WHERE \"n\".\"nspname\" IN (${schemaNames}) GROUP BY \"n\".\"nspname\", \"t\".\"typname\"`;\n        const dropQueries: ObjectLiteral[] = await this.query(selectDropsQuery);\n        await Promise.all(dropQueries.map(q => this.query(q[\"query\"])));\n    }\n\n    /**\n     * Checks if enum with the given name exist in the database.\n     */\n    protected async hasEnumType(table: Table, column: TableColumn): Promise<boolean> {\n        const schema = this.parseTableName(table).schema;\n        const enumName = this.buildEnumName(table, column, false, true);\n        const sql = `SELECT \"n\".\"nspname\", \"t\".\"typname\" FROM \"pg_type\" \"t\" ` +\n            `INNER JOIN \"pg_namespace\" \"n\" ON \"n\".\"oid\" = \"t\".\"typnamespace\" ` +\n            `WHERE \"n\".\"nspname\" = ${schema} AND \"t\".\"typname\" = '${enumName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Builds create ENUM type sql.\n     */\n    protected createEnumTypeSql(table: Table, column: TableColumn, enumName?: string): Query {\n        if (!enumName) enumName = this.buildEnumName(table, column);\n        const enumValues = column.enum!.map(value => `'${value.replace(\"'\", \"''\")}'`).join(\", \");\n        return new Query(`CREATE TYPE ${enumName} AS ENUM(${enumValues})`);\n    }\n\n    /**\n     * Builds create ENUM type sql.\n     */\n    protected dropEnumTypeSql(table: Table, column: TableColumn, enumName?: string): Query {\n        if (!enumName) enumName = this.buildEnumName(table, column);\n        return new Query(`DROP TYPE ${enumName}`);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${index.name}\" ON ${this.escapePath(table)} ${index.isSpatial ? \"USING GiST \" : \"\"}(${columns}) ${index.where ? \"WHERE \" + index.where : \"\"}`);\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(table: Table, indexOrName: TableIndex|string): Query {\n        let indexName = indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        const schema = this.extractSchema(table);\n        return schema ? new Query(`DROP INDEX \"${schema}\".\"${indexName}\"`) : new Query(`DROP INDEX \"${indexName}\"`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        const columnNamesString = columnNames.map(columnName => `\"${columnName}\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`);\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map(column => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(table.name, columnNames);\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${primaryKeyName}\"`);\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(table: Table, uniqueConstraint: TableUnique): Query {\n        const columnNames = uniqueConstraint.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`);\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(table: Table, uniqueOrName: TableUnique|string): Query {\n        const uniqueName = uniqueOrName instanceof TableUnique ? uniqueOrName.name : uniqueOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${uniqueName}\"`);\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(table: Table, checkConstraint: TableCheck): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`);\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(table: Table, checkOrName: TableCheck|string): Query {\n        const checkName = checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${checkName}\"`);\n    }\n\n    /**\n     * Builds create exclusion constraint sql.\n     */\n    protected createExclusionConstraintSql(table: Table, exclusionConstraint: TableExclusion): Query {\n        return new Query(`ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${exclusionConstraint.name}\" EXCLUDE ${exclusionConstraint.expression}`);\n    }\n\n    /**\n     * Builds drop exclusion constraint sql.\n     */\n    protected dropExclusionConstraintSql(table: Table, exclusionOrName: TableExclusion|string): Query {\n        const exclusionName = exclusionOrName instanceof TableExclusion ? exclusionOrName.name : exclusionOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${exclusionName}\"`);\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(table: Table, foreignKey: TableForeignKey): Query {\n        const columnNames = foreignKey.columnNames.map(column => `\"` + column + `\"`).join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames.map(column => `\"` + column + `\"`).join(\",\");\n        let sql = `ALTER TABLE ${this.escapePath(table)} ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES ${this.escapePath(foreignKey.referencedTableName)}(${referencedColumnNames})`;\n        if (foreignKey.onDelete)\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n        if (foreignKey.onUpdate)\n            sql += ` ON UPDATE ${foreignKey.onUpdate}`;\n        if (foreignKey.deferrable)\n            sql += ` DEFERRABLE ${foreignKey.deferrable}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(table: Table, foreignKeyOrName: TableForeignKey|string): Query {\n        const foreignKeyName = foreignKeyOrName instanceof TableForeignKey ? foreignKeyOrName.name : foreignKeyOrName;\n        return new Query(`ALTER TABLE ${this.escapePath(table)} DROP CONSTRAINT \"${foreignKeyName}\"`);\n    }\n\n    /**\n     * Builds sequence name from given table and column.\n     */\n    protected buildSequenceName(table: Table, columnOrName: TableColumn|string, currentSchema?: string, disableEscape?: true, skipSchema?: boolean): string {\n        const columnName = columnOrName instanceof TableColumn ? columnOrName.name : columnOrName;\n        let schema: string|undefined = undefined;\n        let tableName: string|undefined = undefined;\n\n        if (table.name.indexOf(\".\") === -1) {\n            tableName = table.name;\n        } else {\n            schema = table.name.split(\".\")[0];\n            tableName = table.name.split(\".\")[1];\n        }\n\n        let seqName = `${tableName}_${columnName}_seq`;\n        if (seqName.length > this.connection.driver.maxAliasLength!) // note doesn't yet handle corner cases where .length differs from number of UTF-8 bytes\n            seqName=`${tableName.substring(0,29)}_${columnName.substring(0,Math.max(29,63-tableName.length-5))}_seq`;\n\n        if (schema && schema !== currentSchema && !skipSchema) {\n            return disableEscape ? `${schema}.${seqName}` : `\"${schema}\".\"${seqName}\"`;\n        } else {\n            return disableEscape ? `${seqName}` : `\"${seqName}\"`;\n        }\n    }\n\n    /**\n     * Builds ENUM type name from given table and column.\n     */\n    protected buildEnumName(table: Table, column: TableColumn, withSchema: boolean = true, disableEscape?: boolean, toOld?: boolean): string {\n        const schema = table.name.indexOf(\".\") === -1 ? this.driver.options.schema : table.name.split(\".\")[0];\n        const tableName = table.name.indexOf(\".\") === -1 ? table.name : table.name.split(\".\")[1];\n        let enumName = column.enumName ? column.enumName : `${tableName}_${column.name.toLowerCase()}_enum`;\n        if (schema && withSchema)\n            enumName = `${schema}.${enumName}`\n        if (toOld)\n            enumName = enumName + \"_old\";\n        return enumName.split(\".\").map(i => {\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    protected async getUserDefinedTypeName(table: Table, column: TableColumn) {\n        const currentSchema = await this.getCurrentSchema()\n        let [schema, name] = table.name.split(\".\");\n        if (!name) {\n            name = schema;\n            schema = this.driver.options.schema || currentSchema;\n        }\n        const result = await this.query(`SELECT \"udt_schema\", \"udt_name\" ` +\n            `FROM \"information_schema\".\"columns\" WHERE \"table_schema\" = '${schema}' AND \"table_name\" = '${name}' AND \"column_name\"='${column.name}'`);\n\n        // docs: https://www.postgresql.org/docs/current/xtypes.html\n        // When you define a new base type, PostgreSQL automatically provides support for arrays of that type.\n        // The array type typically has the same name as the base type with the underscore character (_) prepended.\n        // ----\n        // so, we must remove this underscore character from enum type name\n        let udtName = result[0][\"udt_name\"]\n        if (udtName.indexOf(\"_\") === 0) {\n            udtName = udtName.substr(1, udtName.length)\n        }\n        return {\n            schema: result[0][\"udt_schema\"],\n            name: udtName\n        };\n    }\n\n    /**\n     * Escapes a given comment so it's safe to include in a query.\n     */\n    protected escapeComment(comment?: string) {\n        if (!comment || comment.length === 0) {\n            return \"NULL\";\n        }\n\n        comment = comment\n            .replace(/'/g, \"''\")\n            .replace(/\\u0000/g, \"\"); // Null bytes aren't allowed in comments\n\n        return `'${comment}'`;\n    }\n\n    /**\n     * Escapes given table or view path.\n     */\n    protected escapePath(target: Table|View|string, disableEscape?: boolean): string {\n        let tableName = target instanceof Table || target instanceof View ? target.name : target;\n        tableName = tableName.indexOf(\".\") === -1 && this.driver.options.schema ? `${this.driver.options.schema}.${tableName}` : tableName;\n\n        return tableName.split(\".\").map(i => {\n            return disableEscape ? i : `\"${i}\"`;\n        }).join(\".\");\n    }\n\n    /**\n     * Returns object with table schema and table name.\n     */\n    protected parseTableName(target: Table|string) {\n        const tableName = target instanceof Table ? target.name : target;\n        if (tableName.indexOf(\".\") === -1) {\n            return {\n                schema: this.driver.options.schema ? `'${this.driver.options.schema}'` : \"current_schema()\",\n                tableName: `'${tableName}'`\n            };\n        } else {\n            return {\n                schema: `'${tableName.split(\".\")[0]}'`,\n                tableName: `'${tableName.split(\".\")[1]}'`\n            };\n        }\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(table: Table, column: TableColumn) {\n        let c = \"\\\"\" + column.name + \"\\\"\";\n        if (column.isGenerated === true && column.generationStrategy !== \"uuid\") {\n            if (column.type === \"integer\" || column.type === \"int\" || column.type === \"int4\")\n                c += \" SERIAL\";\n            if (column.type === \"smallint\" || column.type === \"int2\")\n                c += \" SMALLSERIAL\";\n            if (column.type === \"bigint\" || column.type === \"int8\")\n                c += \" BIGSERIAL\";\n        }\n        if (column.type === \"enum\" || column.type === \"simple-enum\") {\n            c += \" \" + this.buildEnumName(table, column);\n            if (column.isArray)\n                c += \" array\";\n\n        } else if (!column.isGenerated || column.type === \"uuid\") {\n            c += \" \" + this.connection.driver.createFullType(column);\n        }\n        if (column.charset)\n            c += \" CHARACTER SET \\\"\" + column.charset + \"\\\"\";\n        if (column.collation)\n            c += \" COLLATE \\\"\" + column.collation + \"\\\"\";\n        if (column.isNullable !== true)\n            c += \" NOT NULL\";\n        if (column.default !== undefined && column.default !== null)\n            c += \" DEFAULT \" + column.default;\n        if (column.isGenerated && column.generationStrategy === \"uuid\" && !column.default)\n            c += ` DEFAULT ${this.driver.uuidGenerator}`;\n\n        return c;\n    }\n\n    /**\n     * Checks if the PostgreSQL server has support for partitioned tables\n     */\n    protected async hasSupportForPartitionedTables() {\n        const result = await this.query(`SELECT TRUE FROM information_schema.columns WHERE table_name = 'pg_class' and column_name = 'relispartition'`);\n        return result.length ? true : false;\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}