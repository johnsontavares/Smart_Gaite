{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { CockroachDriver } from \"../driver/cockroachdb/CockroachDriver\";\nimport { Table } from \"./table/Table\";\nimport { TableColumn } from \"./table/TableColumn\";\nimport { TableForeignKey } from \"./table/TableForeignKey\";\nimport { TableIndex } from \"./table/TableIndex\";\nimport { TableUtils } from \"./util/TableUtils\";\nimport { PostgresDriver } from \"../driver/postgres/PostgresDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { TableUnique } from \"./table/TableUnique\";\nimport { TableCheck } from \"./table/TableCheck\";\nimport { TableExclusion } from \"./table/TableExclusion\";\nimport { View } from \"./view/View\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\n\nvar RdbmsSchemaBuilder =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function RdbmsSchemaBuilder(connection) {\n    this.connection = connection;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates complete schemas for the given entity metadatas.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.build = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var tablePaths, error_1, rollbackError_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.queryRunner = this.connection.createQueryRunner();\n            if (!!(this.connection.driver instanceof CockroachDriver)) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.queryRunner.startTransaction()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            _a.trys.push([2, 12, 18, 20]);\n\n            tablePaths = this.entityToSyncMetadatas.map(function (metadata) {\n              return metadata.tablePath;\n            });\n            if (!(this.viewEntityToSyncMetadatas.length > 0)) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.createTypeormMetadataTable()];\n\n          case 3:\n            _a.sent();\n\n            _a.label = 4;\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.queryRunner.getTables(tablePaths)];\n\n          case 5:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.queryRunner.getViews([])];\n\n          case 6:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.executeSchemaSyncOperationsInProperOrder()];\n\n          case 7:\n            _a.sent();\n\n            if (!this.connection.queryResultCache) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this.connection.queryResultCache.synchronize(this.queryRunner)];\n\n          case 8:\n            _a.sent();\n\n            _a.label = 9;\n\n          case 9:\n            if (!!(this.connection.driver instanceof CockroachDriver)) return [3\n            /*break*/\n            , 11];\n            return [4\n            /*yield*/\n            , this.queryRunner.commitTransaction()];\n\n          case 10:\n            _a.sent();\n\n            _a.label = 11;\n\n          case 11:\n            return [3\n            /*break*/\n            , 20];\n\n          case 12:\n            error_1 = _a.sent();\n            _a.label = 13;\n\n          case 13:\n            _a.trys.push([13, 16,, 17]);\n\n            if (!!(this.connection.driver instanceof CockroachDriver)) return [3\n            /*break*/\n            , 15];\n            return [4\n            /*yield*/\n            , this.queryRunner.rollbackTransaction()];\n\n          case 14:\n            _a.sent();\n\n            _a.label = 15;\n\n          case 15:\n            return [3\n            /*break*/\n            , 17];\n\n          case 16:\n            rollbackError_1 = _a.sent();\n            return [3\n            /*break*/\n            , 17];\n\n          case 17:\n            throw error_1;\n\n          case 18:\n            return [4\n            /*yield*/\n            , this.queryRunner.release()];\n\n          case 19:\n            _a.sent();\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 20:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Returns sql queries to be executed by schema builder.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.log = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var tablePaths;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            this.queryRunner = this.connection.createQueryRunner();\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 9, 11]);\n\n            tablePaths = this.entityToSyncMetadatas.map(function (metadata) {\n              return metadata.tablePath;\n            });\n            if (!(this.viewEntityToSyncMetadatas.length > 0)) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.createTypeormMetadataTable()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , this.queryRunner.getTables(tablePaths)];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.queryRunner.getViews([])];\n\n          case 5:\n            _a.sent();\n\n            this.queryRunner.enableSqlMemory();\n            return [4\n            /*yield*/\n            , this.executeSchemaSyncOperationsInProperOrder()];\n\n          case 6:\n            _a.sent();\n\n            if (!this.connection.queryResultCache) return [3\n            /*break*/\n            , 8];\n            return [4\n            /*yield*/\n            , this.connection.queryResultCache.synchronize(this.queryRunner)];\n\n          case 7:\n            _a.sent();\n\n            _a.label = 8;\n\n          case 8:\n            return [2\n            /*return*/\n            , this.queryRunner.getMemorySql()];\n\n          case 9:\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory();\n            return [4\n            /*yield*/\n            , this.queryRunner.release()];\n\n          case 10:\n            _a.sent();\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 11:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  Object.defineProperty(RdbmsSchemaBuilder.prototype, \"entityToSyncMetadatas\", {\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    get: function () {\n      return this.connection.entityMetadatas.filter(function (metadata) {\n        return metadata.synchronize && metadata.tableType !== \"entity-child\" && metadata.tableType !== \"view\";\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(RdbmsSchemaBuilder.prototype, \"viewEntityToSyncMetadatas\", {\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    get: function () {\n      return this.connection.entityMetadatas.filter(function (metadata) {\n        return metadata.tableType === \"view\" && metadata.synchronize;\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Executes schema sync operations in a proper order.\n   * Order of operations matter here.\n   */\n\n  RdbmsSchemaBuilder.prototype.executeSchemaSyncOperationsInProperOrder = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.dropOldViews()];\n\n          case 1:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.dropOldForeignKeys()];\n\n          case 2:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.dropOldIndices()];\n\n          case 3:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.dropOldChecks()];\n\n          case 4:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.dropOldExclusions()];\n\n          case 5:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.dropCompositeUniqueConstraints()];\n\n          case 6:\n            _a.sent(); // await this.renameTables();\n\n\n            return [4\n            /*yield*/\n            , this.renameColumns()];\n\n          case 7:\n            // await this.renameTables();\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.createNewTables()];\n\n          case 8:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.dropRemovedColumns()];\n\n          case 9:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.addNewColumns()];\n\n          case 10:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.updatePrimaryKeys()];\n\n          case 11:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.updateExistColumns()];\n\n          case 12:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.createNewIndices()];\n\n          case 13:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.createNewChecks()];\n\n          case 14:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.createNewExclusions()];\n\n          case 15:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.createCompositeUniqueConstraints()];\n\n          case 16:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.createForeignKeys()];\n\n          case 17:\n            _a.sent();\n\n            return [4\n            /*yield*/\n            , this.createViews()];\n\n          case 18:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.dropOldForeignKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_1, this_1, _a, _b, metadata, e_1_1;\n\n      var e_1, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_1 = function (metadata) {\n              var table, tableForeignKeysToDrop;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_1.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    tableForeignKeysToDrop = table.foreignKeys.filter(function (tableForeignKey) {\n                      var metadataFK = metadata.foreignKeys.find(function (metadataForeignKey) {\n                        return foreignKeysMatch(tableForeignKey, metadataForeignKey);\n                      });\n                      return !metadataFK || metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete || metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate;\n                    });\n                    if (tableForeignKeysToDrop.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_1.connection.logger.logSchemaBuild(\"dropping old foreign keys of \" + table.name + \": \" + tableForeignKeysToDrop.map(function (dbForeignKey) {\n                      return dbForeignKey.name;\n                    }).join(\", \")); // drop foreign keys from the database\n\n                    return [4\n                    /*yield*/\n                    , this_1.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop)];\n\n                  case 1:\n                    // drop foreign keys from the database\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_1 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_1(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_1_1 = _d.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Rename tables\n   */\n\n\n  RdbmsSchemaBuilder.prototype.renameTables = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n  /**\n   * Renames columns.\n   * Works if only one column per table was changed.\n   * Changes only column name. If something besides name was changed, these changes will be ignored.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.renameColumns = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_2, this_2, _a, _b, metadata, e_2_1;\n\n      var e_2, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_2 = function (metadata) {\n              var table, renamedMetadataColumns, renamedTableColumns, renamedColumn;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_2.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    if (metadata.columns.length !== table.columns.length) return [2\n                    /*return*/\n                    , \"continue\"];\n                    renamedMetadataColumns = metadata.columns.filter(function (column) {\n                      return !table.columns.find(function (tableColumn) {\n                        return tableColumn.name === column.databaseName && tableColumn.type === _this.connection.driver.normalizeType(column) && tableColumn.isNullable === column.isNullable && tableColumn.isUnique === _this.connection.driver.normalizeIsUnique(column);\n                      });\n                    });\n                    if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1) return [2\n                    /*return*/\n                    , \"continue\"];\n                    renamedTableColumns = table.columns.filter(function (tableColumn) {\n                      return !metadata.columns.find(function (column) {\n                        return column.databaseName === tableColumn.name && _this.connection.driver.normalizeType(column) === tableColumn.type && column.isNullable === tableColumn.isNullable && _this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;\n                      });\n                    });\n                    if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1) return [2\n                    /*return*/\n                    , \"continue\"];\n                    renamedColumn = renamedTableColumns[0].clone();\n                    renamedColumn.name = renamedMetadataColumns[0].databaseName;\n                    this_2.connection.logger.logSchemaBuild(\"renaming column \\\"\" + renamedTableColumns[0].name + \"\\\" in to \\\"\" + renamedColumn.name + \"\\\"\");\n                    return [4\n                    /*yield*/\n                    , this_2.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_2 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_2(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_2_1 = _d.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RdbmsSchemaBuilder.prototype.dropOldIndices = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_3, this_3, _a, _b, metadata, e_3_1;\n\n      var e_3, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_3 = function (metadata) {\n              var table, dropQueries;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_3.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    dropQueries = table.indices.filter(function (tableIndex) {\n                      var indexMetadata = metadata.indices.find(function (index) {\n                        return index.name === tableIndex.name;\n                      });\n\n                      if (indexMetadata) {\n                        if (indexMetadata.synchronize === false) return false;\n                        if (indexMetadata.isUnique !== tableIndex.isUnique) return true;\n                        if (indexMetadata.isSpatial !== tableIndex.isSpatial) return true;\n                        if (_this.connection.driver.isFullTextColumnTypeSupported() && indexMetadata.isFulltext !== tableIndex.isFulltext) return true;\n                        if (indexMetadata.columns.length !== tableIndex.columnNames.length) return true;\n                        return !indexMetadata.columns.every(function (column) {\n                          return tableIndex.columnNames.indexOf(column.databaseName) !== -1;\n                        });\n                      }\n\n                      return true;\n                    }).map(function (tableIndex) {\n                      return __awaiter(_this, void 0, void 0, function () {\n                        return __generator(this, function (_a) {\n                          switch (_a.label) {\n                            case 0:\n                              this.connection.logger.logSchemaBuild(\"dropping an index: \\\"\" + tableIndex.name + \"\\\" from table \" + table.name);\n                              return [4\n                              /*yield*/\n                              , this.queryRunner.dropIndex(table, tableIndex)];\n\n                            case 1:\n                              _a.sent();\n\n                              return [2\n                              /*return*/\n                              ];\n                          }\n                        });\n                      });\n                    });\n                    return [4\n                    /*yield*/\n                    , Promise.all(dropQueries)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_3 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_3(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_3_1 = _d.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RdbmsSchemaBuilder.prototype.dropOldChecks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_4, this_4, _a, _b, metadata, e_4_1;\n\n      var e_4, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            // Mysql does not support check constraints\n            if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) return [2\n            /*return*/\n            ];\n\n            _loop_4 = function (metadata) {\n              var table, oldChecks;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_4.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    oldChecks = table.checks.filter(function (tableCheck) {\n                      return !metadata.checks.find(function (checkMetadata) {\n                        return checkMetadata.name === tableCheck.name;\n                      });\n                    });\n                    if (oldChecks.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_4.connection.logger.logSchemaBuild(\"dropping old check constraint: \" + oldChecks.map(function (check) {\n                      return \"\\\"\" + check.name + \"\\\"\";\n                    }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                    return [4\n                    /*yield*/\n                    , this_4.queryRunner.dropCheckConstraints(table, oldChecks)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_4 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_4(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_4_1 = _d.sent();\n            e_4 = {\n              error: e_4_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_4) throw e_4.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RdbmsSchemaBuilder.prototype.dropCompositeUniqueConstraints = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_5, this_5, _a, _b, metadata, e_5_1;\n\n      var e_5, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_5 = function (metadata) {\n              var table, compositeUniques;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_5.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    compositeUniques = table.uniques.filter(function (tableUnique) {\n                      return tableUnique.columnNames.length > 1 && !metadata.uniques.find(function (uniqueMetadata) {\n                        return uniqueMetadata.name === tableUnique.name;\n                      });\n                    });\n                    if (compositeUniques.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_5.connection.logger.logSchemaBuild(\"dropping old unique constraint: \" + compositeUniques.map(function (unique) {\n                      return \"\\\"\" + unique.name + \"\\\"\";\n                    }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                    return [4\n                    /*yield*/\n                    , this_5.queryRunner.dropUniqueConstraints(table, compositeUniques)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_5 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_5(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_5_1 = _d.sent();\n            e_5 = {\n              error: e_5_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_5) throw e_5.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RdbmsSchemaBuilder.prototype.dropOldExclusions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_6, this_6, _a, _b, metadata, e_6_1;\n\n      var e_6, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            // Only PostgreSQL supports exclusion constraints\n            if (!(this.connection.driver instanceof PostgresDriver)) return [2\n            /*return*/\n            ];\n\n            _loop_6 = function (metadata) {\n              var table, oldExclusions;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_6.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    oldExclusions = table.exclusions.filter(function (tableExclusion) {\n                      return !metadata.exclusions.find(function (exclusionMetadata) {\n                        return exclusionMetadata.name === tableExclusion.name;\n                      });\n                    });\n                    if (oldExclusions.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_6.connection.logger.logSchemaBuild(\"dropping old exclusion constraint: \" + oldExclusions.map(function (exclusion) {\n                      return \"\\\"\" + exclusion.name + \"\\\"\";\n                    }).join(\", \") + \" from table \\\"\" + table.name + \"\\\"\");\n                    return [4\n                    /*yield*/\n                    , this_6.queryRunner.dropExclusionConstraints(table, oldExclusions)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_6 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_6(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_6_1 = _d.sent();\n            e_6 = {\n              error: e_6_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_6) throw e_6.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates tables that do not exist in the database yet.\n   * New tables are created without foreign and primary keys.\n   * Primary key only can be created in conclusion with auto generated column.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.createNewTables = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var currentSchema, _loop_7, this_7, _a, _b, metadata, e_7_1;\n\n      var e_7, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.queryRunner.getCurrentSchema()];\n\n          case 1:\n            currentSchema = _d.sent();\n\n            _loop_7 = function (metadata) {\n              var existTable, table;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    existTable = this_7.queryRunner.loadedTables.find(function (table) {\n                      var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;\n                      var schema = metadata.schema || _this.connection.driver.options.schema; // if schema is default db schema (e.g. \"public\" in PostgreSQL), skip it.\n\n                      schema = schema === currentSchema ? undefined : schema;\n\n                      var fullTableName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);\n\n                      return table.name === fullTableName;\n                    });\n                    if (existTable) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_7.connection.logger.logSchemaBuild(\"creating a new table: \" + metadata.tablePath);\n                    table = Table.create(metadata, this_7.connection.driver);\n                    return [4\n                    /*yield*/\n                    , this_7.queryRunner.createTable(table, false, false)];\n\n                  case 1:\n                    _e.sent();\n\n                    this_7.queryRunner.loadedTables.push(table);\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_7 = this;\n            _d.label = 2;\n\n          case 2:\n            _d.trys.push([2, 7, 8, 9]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 3;\n\n          case 3:\n            if (!!_b.done) return [3\n            /*break*/\n            , 6];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_7(metadata)];\n\n          case 4:\n            _d.sent();\n\n            _d.label = 5;\n\n          case 5:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            e_7_1 = _d.sent();\n            e_7 = {\n              error: e_7_1\n            };\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_7) throw e_7.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RdbmsSchemaBuilder.prototype.createViews = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_8, this_8, _a, _b, metadata, e_8_1;\n\n      var e_8, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_8 = function (metadata) {\n              var existView, view;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    existView = this_8.queryRunner.loadedViews.find(function (view) {\n                      var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;\n                      var schema = metadata.schema || _this.connection.driver.options.schema;\n\n                      var fullViewName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);\n\n                      var viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(_this.connection).getQuery();\n                      var metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression(_this.connection).getQuery();\n                      return view.name === fullViewName && viewExpression === metadataExpression;\n                    });\n                    if (existView) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_8.connection.logger.logSchemaBuild(\"creating a new view: \" + metadata.tablePath);\n                    view = View.create(metadata, this_8.connection.driver);\n                    return [4\n                    /*yield*/\n                    , this_8.queryRunner.createView(view)];\n\n                  case 1:\n                    _e.sent();\n\n                    this_8.queryRunner.loadedViews.push(view);\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_8 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.viewEntityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_8(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_8_1 = _d.sent();\n            e_8 = {\n              error: e_8_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_8) throw e_8.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RdbmsSchemaBuilder.prototype.dropOldViews = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var droppedViews, _loop_9, this_9, _a, _b, view, e_9_1;\n\n      var e_9, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            droppedViews = new Set();\n\n            _loop_9 = function (view) {\n              var existViewMetadata;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    existViewMetadata = this_9.viewEntityToSyncMetadatas.find(function (metadata) {\n                      var database = metadata.database && metadata.database !== _this.connection.driver.database ? metadata.database : undefined;\n                      var schema = metadata.schema || _this.connection.driver.options.schema;\n\n                      var fullViewName = _this.connection.driver.buildTableName(metadata.tableName, schema, database);\n\n                      var viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(_this.connection).getQuery();\n                      var metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression(_this.connection).getQuery();\n                      return view.name === fullViewName && viewExpression === metadataExpression;\n                    });\n                    if (existViewMetadata) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_9.connection.logger.logSchemaBuild(\"dropping an old view: \" + view.name); // drop an old view\n\n                    return [4\n                    /*yield*/\n                    , this_9.queryRunner.dropView(view)];\n\n                  case 1:\n                    // drop an old view\n                    _e.sent();\n\n                    droppedViews.add(view);\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_9 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.queryRunner.loadedViews), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            view = _b.value;\n            return [5\n            /*yield**/\n            , _loop_9(view)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_9_1 = _d.sent();\n            e_9 = {\n              error: e_9_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_9) throw e_9.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            this.queryRunner.loadedViews = this.queryRunner.loadedViews.filter(function (view) {\n              return !droppedViews.has(view);\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n   * We drop their keys too, since it should be safe.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.dropRemovedColumns = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_10, this_10, _a, _b, metadata, e_10_1;\n\n      var e_10, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_10 = function (metadata) {\n              var table, droppedTableColumns;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_10.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    droppedTableColumns = table.columns.filter(function (tableColumn) {\n                      return !metadata.columns.find(function (columnMetadata) {\n                        return columnMetadata.databaseName === tableColumn.name;\n                      });\n                    });\n                    if (droppedTableColumns.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_10.connection.logger.logSchemaBuild(\"columns dropped in \" + table.name + \": \" + droppedTableColumns.map(function (column) {\n                      return column.name;\n                    }).join(\", \")); // drop columns from the database\n\n                    return [4\n                    /*yield*/\n                    , this_10.queryRunner.dropColumns(table, droppedTableColumns)];\n\n                  case 1:\n                    // drop columns from the database\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_10 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_10(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_10_1 = _d.sent();\n            e_10 = {\n              error: e_10_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_10) throw e_10.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Adds columns from metadata which does not exist in the table.\n   * Columns are created without keys.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.addNewColumns = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_11, this_11, _a, _b, metadata, e_11_1;\n\n      var e_11, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_11 = function (metadata) {\n              var table, newColumnMetadatas, newTableColumnOptions, newTableColumns;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_11.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    newColumnMetadatas = metadata.columns.filter(function (columnMetadata) {\n                      return !table.columns.find(function (tableColumn) {\n                        return tableColumn.name === columnMetadata.databaseName;\n                      });\n                    });\n                    if (newColumnMetadatas.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    newTableColumnOptions = this_11.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n                    newTableColumns = newTableColumnOptions.map(function (option) {\n                      return new TableColumn(option);\n                    });\n                    if (newTableColumns.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_11.connection.logger.logSchemaBuild(\"new columns added: \" + newColumnMetadatas.map(function (column) {\n                      return column.databaseName;\n                    }).join(\", \"));\n                    return [4\n                    /*yield*/\n                    , this_11.queryRunner.addColumns(table, newTableColumns)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_11 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_11(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_11_1 = _d.sent();\n            e_11 = {\n              error: e_11_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_11) throw e_11.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Updates composite primary keys.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.updatePrimaryKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_12, this_12, _a, _b, metadata, e_12_1;\n\n      var e_12, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_12 = function (metadata) {\n              var table, primaryMetadataColumns, primaryTableColumns, changedPrimaryColumns;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_12.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    primaryMetadataColumns = metadata.columns.filter(function (column) {\n                      return column.isPrimary;\n                    });\n                    primaryTableColumns = table.columns.filter(function (column) {\n                      return column.isPrimary;\n                    });\n                    if (!(primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1)) return [3\n                    /*break*/\n                    , 2];\n                    changedPrimaryColumns = primaryMetadataColumns.map(function (primaryMetadataColumn) {\n                      return new TableColumn(TableUtils.createTableColumnOptions(primaryMetadataColumn, _this.connection.driver));\n                    });\n                    return [4\n                    /*yield*/\n                    , this_12.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns)];\n\n                  case 1:\n                    _e.sent();\n\n                    _e.label = 2;\n\n                  case 2:\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_12 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_12(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_12_1 = _d.sent();\n            e_12 = {\n              error: e_12_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_12) throw e_12.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Update all exist columns which metadata has changed.\n   * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.updateExistColumns = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_13, this_13, _a, _b, metadata, e_13_1;\n\n      var e_13, _c;\n\n      var _this = this;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_13 = function (metadata) {\n              var table, changedColumns, changedColumns_1, changedColumns_1_1, changedColumn, e_14_1, changedColumns_2, changedColumns_2_1, changedColumn, e_15_1, changedColumns_3, changedColumns_3_1, changedColumn, e_16_1, newAndOldTableColumns;\n\n              var e_14, _e, e_15, _f, e_16, _g;\n\n              return __generator(this, function (_h) {\n                switch (_h.label) {\n                  case 0:\n                    table = this_13.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    changedColumns = this_13.connection.driver.findChangedColumns(table.columns, metadata.columns);\n                    if (changedColumns.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    _h.label = 1;\n\n                  case 1:\n                    _h.trys.push([1, 6, 7, 8]);\n\n                    changedColumns_1 = (e_14 = void 0, __values(changedColumns)), changedColumns_1_1 = changedColumns_1.next();\n                    _h.label = 2;\n\n                  case 2:\n                    if (!!changedColumns_1_1.done) return [3\n                    /*break*/\n                    , 5];\n                    changedColumn = changedColumns_1_1.value;\n                    return [4\n                    /*yield*/\n                    , this_13.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName)];\n\n                  case 3:\n                    _h.sent();\n\n                    _h.label = 4;\n\n                  case 4:\n                    changedColumns_1_1 = changedColumns_1.next();\n                    return [3\n                    /*break*/\n                    , 2];\n\n                  case 5:\n                    return [3\n                    /*break*/\n                    , 8];\n\n                  case 6:\n                    e_14_1 = _h.sent();\n                    e_14 = {\n                      error: e_14_1\n                    };\n                    return [3\n                    /*break*/\n                    , 8];\n\n                  case 7:\n                    try {\n                      if (changedColumns_1_1 && !changedColumns_1_1.done && (_e = changedColumns_1.return)) _e.call(changedColumns_1);\n                    } finally {\n                      if (e_14) throw e_14.error;\n                    }\n\n                    return [7\n                    /*endfinally*/\n                    ];\n\n                  case 8:\n                    _h.trys.push([8, 13, 14, 15]);\n\n                    changedColumns_2 = (e_15 = void 0, __values(changedColumns)), changedColumns_2_1 = changedColumns_2.next();\n                    _h.label = 9;\n\n                  case 9:\n                    if (!!changedColumns_2_1.done) return [3\n                    /*break*/\n                    , 12];\n                    changedColumn = changedColumns_2_1.value;\n                    return [4\n                    /*yield*/\n                    , this_13.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName)];\n\n                  case 10:\n                    _h.sent();\n\n                    _h.label = 11;\n\n                  case 11:\n                    changedColumns_2_1 = changedColumns_2.next();\n                    return [3\n                    /*break*/\n                    , 9];\n\n                  case 12:\n                    return [3\n                    /*break*/\n                    , 15];\n\n                  case 13:\n                    e_15_1 = _h.sent();\n                    e_15 = {\n                      error: e_15_1\n                    };\n                    return [3\n                    /*break*/\n                    , 15];\n\n                  case 14:\n                    try {\n                      if (changedColumns_2_1 && !changedColumns_2_1.done && (_f = changedColumns_2.return)) _f.call(changedColumns_2);\n                    } finally {\n                      if (e_15) throw e_15.error;\n                    }\n\n                    return [7\n                    /*endfinally*/\n                    ];\n\n                  case 15:\n                    if (!!(this_13.connection.driver instanceof MysqlDriver || this_13.connection.driver instanceof AuroraDataApiDriver)) return [3\n                    /*break*/\n                    , 23];\n                    _h.label = 16;\n\n                  case 16:\n                    _h.trys.push([16, 21, 22, 23]);\n\n                    changedColumns_3 = (e_16 = void 0, __values(changedColumns)), changedColumns_3_1 = changedColumns_3.next();\n                    _h.label = 17;\n\n                  case 17:\n                    if (!!changedColumns_3_1.done) return [3\n                    /*break*/\n                    , 20];\n                    changedColumn = changedColumns_3_1.value;\n                    return [4\n                    /*yield*/\n                    , this_13.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName)];\n\n                  case 18:\n                    _h.sent();\n\n                    _h.label = 19;\n\n                  case 19:\n                    changedColumns_3_1 = changedColumns_3.next();\n                    return [3\n                    /*break*/\n                    , 17];\n\n                  case 20:\n                    return [3\n                    /*break*/\n                    , 23];\n\n                  case 21:\n                    e_16_1 = _h.sent();\n                    e_16 = {\n                      error: e_16_1\n                    };\n                    return [3\n                    /*break*/\n                    , 23];\n\n                  case 22:\n                    try {\n                      if (changedColumns_3_1 && !changedColumns_3_1.done && (_g = changedColumns_3.return)) _g.call(changedColumns_3);\n                    } finally {\n                      if (e_16) throw e_16.error;\n                    }\n\n                    return [7\n                    /*endfinally*/\n                    ];\n\n                  case 23:\n                    newAndOldTableColumns = changedColumns.map(function (changedColumn) {\n                      var oldTableColumn = table.columns.find(function (column) {\n                        return column.name === changedColumn.databaseName;\n                      });\n                      var newTableColumnOptions = TableUtils.createTableColumnOptions(changedColumn, _this.connection.driver);\n                      var newTableColumn = new TableColumn(newTableColumnOptions);\n                      return {\n                        oldColumn: oldTableColumn,\n                        newColumn: newTableColumn\n                      };\n                    });\n                    if (newAndOldTableColumns.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_13.connection.logger.logSchemaBuild(\"columns changed in \\\"\" + table.name + \"\\\". updating: \" + changedColumns.map(function (column) {\n                      return column.databaseName;\n                    }).join(\", \"));\n                    return [4\n                    /*yield*/\n                    , this_13.queryRunner.changeColumns(table, newAndOldTableColumns)];\n\n                  case 24:\n                    _h.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_13 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_13(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_13_1 = _d.sent();\n            e_13 = {\n              error: e_13_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_13) throw e_13.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates composite indices which are missing in db yet.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.createNewIndices = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_14, this_14, _a, _b, metadata, e_17_1;\n\n      var e_17, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_14 = function (metadata) {\n              var table, newIndices;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_14.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    newIndices = metadata.indices.filter(function (indexMetadata) {\n                      return !table.indices.find(function (tableIndex) {\n                        return tableIndex.name === indexMetadata.name;\n                      }) && indexMetadata.synchronize === true;\n                    }).map(function (indexMetadata) {\n                      return TableIndex.create(indexMetadata);\n                    });\n                    if (newIndices.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_14.connection.logger.logSchemaBuild(\"adding new indices \" + newIndices.map(function (index) {\n                      return \"\\\"\" + index.name + \"\\\"\";\n                    }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                    return [4\n                    /*yield*/\n                    , this_14.queryRunner.createIndices(table, newIndices)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_14 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_14(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_17_1 = _d.sent();\n            e_17 = {\n              error: e_17_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_17) throw e_17.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  RdbmsSchemaBuilder.prototype.createNewChecks = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_15, this_15, _a, _b, metadata, e_18_1;\n\n      var e_18, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            // Mysql does not support check constraints\n            if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver) return [2\n            /*return*/\n            ];\n\n            _loop_15 = function (metadata) {\n              var table, newChecks;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_15.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    newChecks = metadata.checks.filter(function (checkMetadata) {\n                      return !table.checks.find(function (tableCheck) {\n                        return tableCheck.name === checkMetadata.name;\n                      });\n                    }).map(function (checkMetadata) {\n                      return TableCheck.create(checkMetadata);\n                    });\n                    if (newChecks.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_15.connection.logger.logSchemaBuild(\"adding new check constraints: \" + newChecks.map(function (index) {\n                      return \"\\\"\" + index.name + \"\\\"\";\n                    }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                    return [4\n                    /*yield*/\n                    , this_15.queryRunner.createCheckConstraints(table, newChecks)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_15 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_15(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_18_1 = _d.sent();\n            e_18 = {\n              error: e_18_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_18) throw e_18.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates composite uniques which are missing in db yet.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.createCompositeUniqueConstraints = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_16, this_16, _a, _b, metadata, e_19_1;\n\n      var e_19, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_16 = function (metadata) {\n              var table, compositeUniques;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_16.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    compositeUniques = metadata.uniques.filter(function (uniqueMetadata) {\n                      return uniqueMetadata.columns.length > 1 && !table.uniques.find(function (tableUnique) {\n                        return tableUnique.name === uniqueMetadata.name;\n                      });\n                    }).map(function (uniqueMetadata) {\n                      return TableUnique.create(uniqueMetadata);\n                    });\n                    if (compositeUniques.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_16.connection.logger.logSchemaBuild(\"adding new unique constraints: \" + compositeUniques.map(function (unique) {\n                      return \"\\\"\" + unique.name + \"\\\"\";\n                    }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                    return [4\n                    /*yield*/\n                    , this_16.queryRunner.createUniqueConstraints(table, compositeUniques)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_16 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_16(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_19_1 = _d.sent();\n            e_19 = {\n              error: e_19_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_19) throw e_19.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates exclusions which are missing in db yet.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.createNewExclusions = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_17, this_17, _a, _b, metadata, e_20_1;\n\n      var e_20, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            // Only PostgreSQL supports exclusion constraints\n            if (!(this.connection.driver instanceof PostgresDriver)) return [2\n            /*return*/\n            ];\n\n            _loop_17 = function (metadata) {\n              var table, newExclusions;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_17.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    newExclusions = metadata.exclusions.filter(function (exclusionMetadata) {\n                      return !table.exclusions.find(function (tableExclusion) {\n                        return tableExclusion.name === exclusionMetadata.name;\n                      });\n                    }).map(function (exclusionMetadata) {\n                      return TableExclusion.create(exclusionMetadata);\n                    });\n                    if (newExclusions.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    this_17.connection.logger.logSchemaBuild(\"adding new exclusion constraints: \" + newExclusions.map(function (exclusion) {\n                      return \"\\\"\" + exclusion.name + \"\\\"\";\n                    }).join(\", \") + \" in table \\\"\" + table.name + \"\\\"\");\n                    return [4\n                    /*yield*/\n                    , this_17.queryRunner.createExclusionConstraints(table, newExclusions)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_17 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_17(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_20_1 = _d.sent();\n            e_20 = {\n              error: e_20_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_20) throw e_20.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates foreign keys which does not exist in the table yet.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.createForeignKeys = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _loop_18, this_18, _a, _b, metadata, e_21_1;\n\n      var e_21, _c;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _loop_18 = function (metadata) {\n              var table, newKeys, dbForeignKeys;\n              return __generator(this, function (_e) {\n                switch (_e.label) {\n                  case 0:\n                    table = this_18.queryRunner.loadedTables.find(function (table) {\n                      return table.name === metadata.tablePath;\n                    });\n                    if (!table) return [2\n                    /*return*/\n                    , \"continue\"];\n                    newKeys = metadata.foreignKeys.filter(function (foreignKey) {\n                      return !table.foreignKeys.find(function (dbForeignKey) {\n                        return foreignKeysMatch(dbForeignKey, foreignKey);\n                      });\n                    });\n                    if (newKeys.length === 0) return [2\n                    /*return*/\n                    , \"continue\"];\n                    dbForeignKeys = newKeys.map(function (foreignKeyMetadata) {\n                      return TableForeignKey.create(foreignKeyMetadata);\n                    });\n                    this_18.connection.logger.logSchemaBuild(\"creating a foreign keys: \" + newKeys.map(function (key) {\n                      return key.name;\n                    }).join(\", \") + \" on table \\\"\" + table.name + \"\\\"\");\n                    return [4\n                    /*yield*/\n                    , this_18.queryRunner.createForeignKeys(table, dbForeignKeys)];\n\n                  case 1:\n                    _e.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            this_18 = this;\n            _d.label = 1;\n\n          case 1:\n            _d.trys.push([1, 6, 7, 8]);\n\n            _a = __values(this.entityToSyncMetadatas), _b = _a.next();\n            _d.label = 2;\n\n          case 2:\n            if (!!_b.done) return [3\n            /*break*/\n            , 5];\n            metadata = _b.value;\n            return [5\n            /*yield**/\n            , _loop_18(metadata)];\n\n          case 3:\n            _d.sent();\n\n            _d.label = 4;\n\n          case 4:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_21_1 = _d.sent();\n            e_21 = {\n              error: e_21_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (_b && !_b.done && (_c = _a.return)) _c.call(_a);\n            } finally {\n              if (e_21) throw e_21.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops all foreign keys where given column of the given table is being used.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.dropColumnReferencedForeignKeys = function (tablePath, columnName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, tablesWithFK, columnForeignKey, clonedTable, tablesWithFK_1, tablesWithFK_1_1, tableWithFK, e_22_1;\n\n      var e_22, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            table = this.queryRunner.loadedTables.find(function (table) {\n              return table.name === tablePath;\n            });\n            if (!table) return [2\n            /*return*/\n            ];\n            tablesWithFK = [];\n            columnForeignKey = table.foreignKeys.find(function (foreignKey) {\n              return foreignKey.columnNames.indexOf(columnName) !== -1;\n            });\n\n            if (columnForeignKey) {\n              clonedTable = table.clone();\n              clonedTable.foreignKeys = [columnForeignKey];\n              tablesWithFK.push(clonedTable);\n              table.removeForeignKey(columnForeignKey);\n            }\n\n            this.queryRunner.loadedTables.forEach(function (loadedTable) {\n              var dependForeignKeys = loadedTable.foreignKeys.filter(function (foreignKey) {\n                return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;\n              });\n\n              if (dependForeignKeys.length > 0) {\n                var clonedTable = loadedTable.clone();\n                clonedTable.foreignKeys = dependForeignKeys;\n                tablesWithFK.push(clonedTable);\n                dependForeignKeys.forEach(function (dependForeignKey) {\n                  return loadedTable.removeForeignKey(dependForeignKey);\n                });\n              }\n            });\n            if (!(tablesWithFK.length > 0)) return [3\n            /*break*/\n            , 8];\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1, 6, 7, 8]);\n\n            tablesWithFK_1 = __values(tablesWithFK), tablesWithFK_1_1 = tablesWithFK_1.next();\n            _b.label = 2;\n\n          case 2:\n            if (!!tablesWithFK_1_1.done) return [3\n            /*break*/\n            , 5];\n            tableWithFK = tablesWithFK_1_1.value;\n            this.connection.logger.logSchemaBuild(\"dropping related foreign keys of \" + tableWithFK.name + \": \" + tableWithFK.foreignKeys.map(function (foreignKey) {\n              return foreignKey.name;\n            }).join(\", \"));\n            return [4\n            /*yield*/\n            , this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys)];\n\n          case 3:\n            _b.sent();\n\n            _b.label = 4;\n\n          case 4:\n            tablesWithFK_1_1 = tablesWithFK_1.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_22_1 = _b.sent();\n            e_22 = {\n              error: e_22_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (tablesWithFK_1_1 && !tablesWithFK_1_1.done && (_a = tablesWithFK_1.return)) _a.call(tablesWithFK_1);\n            } finally {\n              if (e_22) throw e_22.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops all composite indices, related to given column.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.dropColumnCompositeIndices = function (tablePath, columnName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, relatedIndices;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            table = this.queryRunner.loadedTables.find(function (table) {\n              return table.name === tablePath;\n            });\n            if (!table) return [2\n            /*return*/\n            ];\n            relatedIndices = table.indices.filter(function (index) {\n              return index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1;\n            });\n            if (relatedIndices.length === 0) return [2\n            /*return*/\n            ];\n            this.connection.logger.logSchemaBuild(\"dropping related indices of \\\"\" + tablePath + \"\\\".\\\"\" + columnName + \"\\\": \" + relatedIndices.map(function (index) {\n              return index.name;\n            }).join(\", \"));\n            return [4\n            /*yield*/\n            , this.queryRunner.dropIndices(table, relatedIndices)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops all composite uniques, related to given column.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.dropColumnCompositeUniques = function (tablePath, columnName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, relatedUniques;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            table = this.queryRunner.loadedTables.find(function (table) {\n              return table.name === tablePath;\n            });\n            if (!table) return [2\n            /*return*/\n            ];\n            relatedUniques = table.uniques.filter(function (unique) {\n              return unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1;\n            });\n            if (relatedUniques.length === 0) return [2\n            /*return*/\n            ];\n            this.connection.logger.logSchemaBuild(\"dropping related unique constraints of \\\"\" + tablePath + \"\\\".\\\"\" + columnName + \"\\\": \" + relatedUniques.map(function (unique) {\n              return unique.name;\n            }).join(\", \"));\n            return [4\n            /*yield*/\n            , this.queryRunner.dropUniqueConstraints(table, relatedUniques)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates new columns from the given column metadatas.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.metadataColumnsToTableColumnOptions = function (columns) {\n    var _this = this;\n\n    return columns.map(function (columnMetadata) {\n      return TableUtils.createTableColumnOptions(columnMetadata, _this.connection.driver);\n    });\n  };\n  /**\n   * Creates typeorm service table for storing user defined Views.\n   */\n\n\n  RdbmsSchemaBuilder.prototype.createTypeormMetadataTable = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var options, typeormMetadataTable;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            options = this.connection.driver.options;\n            typeormMetadataTable = this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n            return [4\n            /*yield*/\n            , this.queryRunner.createTable(new Table({\n              name: typeormMetadataTable,\n              columns: [{\n                name: \"type\",\n                type: this.connection.driver.normalizeType({\n                  type: this.connection.driver.mappedDataTypes.metadataType\n                }),\n                isNullable: false\n              }, {\n                name: \"database\",\n                type: this.connection.driver.normalizeType({\n                  type: this.connection.driver.mappedDataTypes.metadataDatabase\n                }),\n                isNullable: true\n              }, {\n                name: \"schema\",\n                type: this.connection.driver.normalizeType({\n                  type: this.connection.driver.mappedDataTypes.metadataSchema\n                }),\n                isNullable: true\n              }, {\n                name: \"table\",\n                type: this.connection.driver.normalizeType({\n                  type: this.connection.driver.mappedDataTypes.metadataTable\n                }),\n                isNullable: true\n              }, {\n                name: \"name\",\n                type: this.connection.driver.normalizeType({\n                  type: this.connection.driver.mappedDataTypes.metadataName\n                }),\n                isNullable: true\n              }, {\n                name: \"value\",\n                type: this.connection.driver.normalizeType({\n                  type: this.connection.driver.mappedDataTypes.metadataValue\n                }),\n                isNullable: true\n              }]\n            }), true)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return RdbmsSchemaBuilder;\n}();\n\nexport { RdbmsSchemaBuilder };\n\nfunction foreignKeysMatch(tableForeignKey, metadataForeignKey) {\n  return tableForeignKey.name === metadataForeignKey.name && tableForeignKey.referencedTableName === metadataForeignKey.referencedTablePath;\n}","map":{"version":3,"sources":["../browser/src/schema-builder/RdbmsSchemaBuilder.ts"],"names":[],"mappings":";AAAA,SAAQ,eAAR,QAA8B,uCAA9B;AAIA,SAAQ,KAAR,QAAoB,eAApB;AACA,SAAQ,WAAR,QAA0B,qBAA1B;AACA,SAAQ,eAAR,QAA8B,yBAA9B;AACA,SAAQ,UAAR,QAAyB,oBAAzB;AAOA,SAAQ,UAAR,QAAyB,mBAAzB;AAEA,SAAQ,cAAR,QAA6B,mCAA7B;AAEA,SAAQ,WAAR,QAA0B,6BAA1B;AACA,SAAQ,WAAR,QAA0B,qBAA1B;AACA,SAAQ,UAAR,QAAyB,oBAAzB;AACA,SAAQ,cAAR,QAA6B,wBAA7B;AACA,SAAQ,IAAR,QAAmB,aAAnB;AACA,SAAQ,mBAAR,QAAkC,+CAAlC;AAGA;;;;;;;;;;;;;AAaG;;AACH,IAAA,kBAAA;AAAA;AAAA,YAAA;AAWI;AACA;AACA;AAEA,WAAA,kBAAA,CAAsB,UAAtB,EAA4C;AAAtB,SAAA,UAAA,GAAA,UAAA;AACrB,GAhBL,CAkBI;AACA;AACA;;AAEA;;AAEG;;;AACG,EAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAN,YAAA;;;;;;AACI,iBAAK,WAAL,GAAmB,KAAK,UAAL,CAAgB,iBAAhB,EAAnB;iBAGI,EAAE,KAAK,UAAL,CAAgB,MAAhB,YAAkC,eAApC,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,gBAAjB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;AAEM,YAAA,UAAU,GAAG,KAAK,qBAAL,CAA2B,GAA3B,CAA+B,UAAA,QAAA,EAAQ;AAAI,qBAAA,QAAQ,CAAR,SAAA;AAAkB,aAA7D,CAAb;gBAGF,EAAA,KAAK,yBAAL,CAA+B,MAA/B,GAAwC,CAAxC,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,0BAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;AACJ,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,SAAjB,CAA2B,UAA3B,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,QAAjB,CAA0B,EAA1B,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,wCAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;iBAGI,KAAK,UAAL,CAAgB,gB,EAAhB,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,UAAL,CAAgB,gBAAhB,CAAiC,WAAjC,CAA6C,KAAK,WAAlD,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;iBAEA,EAAE,KAAK,UAAL,CAAgB,MAAhB,YAAkC,eAApC,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,EAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,iBAAjB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;;iBAKI,EAAE,KAAK,UAAL,CAAgB,MAAhB,YAAkC,eAApC,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,EAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,mBAAjB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;;AAER,kBAAM,OAAN;;;AAGA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,OAAjB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;AAEP,GAlCK;AAoCN;;AAEG;;;AACG,EAAA,kBAAA,CAAA,SAAA,CAAA,GAAA,GAAN,YAAA;;;;;;AACI,iBAAK,WAAL,GAAmB,KAAK,UAAL,CAAgB,iBAAhB,EAAnB;;;;;;AAEU,YAAA,UAAU,GAAG,KAAK,qBAAL,CAA2B,GAA3B,CAA+B,UAAA,QAAA,EAAQ;AAAI,qBAAA,QAAQ,CAAR,SAAA;AAAkB,aAA7D,CAAb;gBAGF,EAAA,KAAK,yBAAL,CAA+B,MAA/B,GAAwC,CAAxC,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,0BAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;AACJ,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,SAAjB,CAA2B,UAA3B,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,QAAjB,CAA0B,EAA1B,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,iBAAK,WAAL,CAAiB,eAAjB;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,wCAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;iBAGI,KAAK,UAAL,CAAgB,gB,EAAhB,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,UAAL,CAAgB,gBAAhB,CAAiC,WAAjC,CAA6C,KAAK,WAAlD,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;AAEJ,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAK,WAAL,CAAiB,YAAjB,EAAP,CAAA;;;AAGA;AACA;AACA;AACA,iBAAK,WAAL,CAAiB,gBAAjB;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,OAAjB,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;AAEP,GA1BK;;AAmCN,EAAA,MAAA,CAAA,cAAA,CAAc,kBAAA,CAAA,SAAd,EAAc,uBAAd,EAAmC;AAPnC;AACA;AACA;;AAEA;;AAEG;SACH,YAAA;AACI,aAAO,KAAK,UAAL,CAAgB,eAAhB,CAAgC,MAAhC,CAAuC,UAAA,QAAA,EAAQ;AAAI,eAAA,QAAQ,CAAC,WAAT,IAAwB,QAAQ,CAAC,SAAT,KAAuB,cAA/C,IAAiE,QAAQ,CAAC,SAAT,KAAjE,MAAA;AAA8F,OAAjJ,CAAP;AACH,KAFkC;qBAAA;;AAAA,GAAnC;AAOA,EAAA,MAAA,CAAA,cAAA,CAAc,kBAAA,CAAA,SAAd,EAAc,2BAAd,EAAuC;AAHvC;;AAEG;SACH,YAAA;AACI,aAAO,KAAK,UAAL,CAAgB,eAAhB,CAAgC,MAAhC,CAAuC,UAAA,QAAA,EAAQ;AAAI,eAAA,QAAQ,CAAC,SAAT,KAAuB,MAAvB,IAAiC,QAAQ,CAAzC,WAAA;AAAqD,OAAxG,CAAP;AACH,KAFsC;qBAAA;;AAAA,GAAvC;AAIA;;;AAGG;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,wCAAA,GAAhB,YAAA;;;;;AACI,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,YAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,cAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,aAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,8BAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA,G,CACA;;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,aAAL,EAAN,CAAA;;;AADA;AACA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,eAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,aAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,kBAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gBAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,eAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,mBAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,gCAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,iBAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,EAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AACH,GApBe;AAsBhB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAhB,YAAA;;;;;;;;;gCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,MAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAGP,oBAAA,sBAAsB,GAAG,KAAK,CAAC,WAAN,CAAkB,MAAlB,CAAyB,UAAA,eAAA,EAAe;AACnE,0BAAM,UAAU,GAAG,QAAQ,CAAC,WAAT,CAAqB,IAArB,CAA0B,UAAA,kBAAA,EAAkB;AAAI,+BAAA,gBAAgB,CAAC,eAAD,EAAhB,kBAAgB,CAAhB;AAAqD,uBAArG,CAAnB;AACA,6BAAO,CAAC,UAAD,IACC,UAAU,CAAC,QAAX,IAAuB,UAAU,CAAC,QAAX,KAAwB,eAAe,CAAC,QADhE,IAEC,UAAU,CAAC,QAAX,IAAuB,UAAU,CAAC,QAAX,KAAwB,eAAe,CAAC,QAFvE;AAGH,qBAL8B,CAAzB;AAMN,wBAAI,sBAAsB,CAAC,MAAvB,KAAkC,CAAtC,E;;sBACa,U;AAEb,oBAAA,MAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,kCAAgC,KAAK,CAAC,IAAtC,GAA0C,IAA1C,GAA+C,sBAAsB,CAAC,GAAvB,CAA2B,UAAA,YAAA,EAAY;AAAI,6BAAA,YAAY,CAAZ,IAAA;AAAiB,qBAA5D,EAA8D,IAA9D,CAAmE,IAAnE,CAArF,E,CAEA;;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAA,CAAK,WAAL,CAAiB,eAAjB,CAAiC,KAAjC,EAAwC,sBAAxC,CAAN,CAAA;;;AADA;AACA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAlBmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;sBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBd,GArBe;AAuBhB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAhB,YAAA;;;;;;;;AAIC,GAJe;AAMhB;;;;AAIG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAhB,YAAA;;;;;;;;;;;gCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,MAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEb,wBAAI,QAAQ,CAAC,OAAT,CAAiB,MAAjB,KAA4B,KAAK,CAAC,OAAN,CAAc,MAA9C,E;;sBACa,U;AAEP,oBAAA,sBAAsB,GAAG,QAAQ,CAAC,OAAT,CAAiB,MAAjB,CAAwB,UAAA,MAAA,EAAM;AACzD,6BAAO,CAAC,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,UAAA,WAAA,EAAW;AAClC,+BAAO,WAAW,CAAC,IAAZ,KAAqB,MAAM,CAAC,YAA5B,IACA,WAAW,CAAC,IAAZ,KAAqB,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,aAAvB,CAAqC,MAArC,CADrB,IAEA,WAAW,CAAC,UAAZ,KAA2B,MAAM,CAAC,UAFlC,IAGA,WAAW,CAAC,QAAZ,KAAyB,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,iBAAvB,CAAyC,MAAzC,CAHhC;AAIH,uBALO,CAAR;AAMH,qBAP8B,CAAzB;AASN,wBAAI,sBAAsB,CAAC,MAAvB,KAAkC,CAAlC,IAAuC,sBAAsB,CAAC,MAAvB,GAAgC,CAA3E,E;;sBACa,U;AAEP,oBAAA,mBAAmB,GAAG,KAAK,CAAC,OAAN,CAAc,MAAd,CAAqB,UAAA,WAAA,EAAW;AACxD,6BAAO,CAAC,QAAQ,CAAC,OAAT,CAAiB,IAAjB,CAAsB,UAAA,MAAA,EAAM;AAChC,+BAAO,MAAM,CAAC,YAAP,KAAwB,WAAW,CAAC,IAApC,IACA,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,aAAvB,CAAqC,MAArC,MAAiD,WAAW,CAAC,IAD7D,IAEA,MAAM,CAAC,UAAP,KAAsB,WAAW,CAAC,UAFlC,IAGA,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,iBAAvB,CAAyC,MAAzC,MAAqD,WAAW,CAAC,QAHxE;AAIH,uBALO,CAAR;AAMH,qBAP2B,CAAtB;AASN,wBAAI,mBAAmB,CAAC,MAApB,KAA+B,CAA/B,IAAoC,mBAAmB,CAAC,MAApB,GAA6B,CAArE,E;;sBACa,U;AAEP,oBAAA,aAAa,GAAG,mBAAmB,CAAC,CAAD,CAAnB,CAAuB,KAAvB,EAAhB;AACN,oBAAA,aAAa,CAAC,IAAd,GAAqB,sBAAsB,CAAC,CAAD,CAAtB,CAA0B,YAA/C;AAEA,oBAAA,MAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,uBAAoB,mBAAmB,CAAC,CAAD,CAAnB,CAAuB,IAA3C,GAA+C,aAA/C,GAA2D,aAAa,CAAC,IAAzE,GAA6E,IAAnH;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,KAA9B,EAAqC,mBAAmB,CAAC,CAAD,CAAxD,EAA6D,aAA7D,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AApCmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;sBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsCd,GAvCe;;AAyCA,EAAA,kBAAA,CAAA,SAAA,CAAA,cAAA,GAAhB,YAAA;;;;;;;;;;;gCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,MAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,WAAW,GAAG,KAAK,CAAC,OAAN,CACf,MADe,CACR,UAAA,UAAA,EAAU;AACd,0BAAM,aAAa,GAAG,QAAQ,CAAC,OAAT,CAAiB,IAAjB,CAAsB,UAAA,KAAA,EAAK;AAAI,+BAAA,KAAK,CAAC,IAAN,KAAe,UAAU,CAAzB,IAAA;AAA8B,uBAA7D,CAAtB;;AACA,0BAAI,aAAJ,EAAmB;AACf,4BAAI,aAAa,CAAC,WAAd,KAA8B,KAAlC,EACI,OAAO,KAAP;AAEJ,4BAAI,aAAa,CAAC,QAAd,KAA2B,UAAU,CAAC,QAA1C,EACI,OAAO,IAAP;AAEJ,4BAAI,aAAa,CAAC,SAAd,KAA4B,UAAU,CAAC,SAA3C,EACI,OAAO,IAAP;AAEJ,4BAAI,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,6BAAvB,MAA0D,aAAa,CAAC,UAAd,KAA6B,UAAU,CAAC,UAAtG,EACI,OAAO,IAAP;AAEJ,4BAAI,aAAa,CAAC,OAAd,CAAsB,MAAtB,KAAiC,UAAU,CAAC,WAAX,CAAuB,MAA5D,EACI,OAAO,IAAP;AAEJ,+BAAO,CAAC,aAAa,CAAC,OAAd,CAAsB,KAAtB,CAA4B,UAAA,MAAA,EAAM;AAAI,iCAAA,UAAU,CAAC,WAAX,CAAuB,OAAvB,CAA+B,MAAM,CAAC,YAAtC,MAAwD,CAAxD,CAAA;AAA0D,yBAAhG,CAAR;AACH;;AAED,6BAAO,IAAP;AACH,qBAvBe,EAwBf,GAxBe,CAwBX,UAAM,UAAN,EAAgB;AAAA,6BAAA,SAAA,CAAA,KAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;;;;AACjB,mCAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,0BAAuB,UAAU,CAAC,IAAlC,GAAsC,gBAAtC,GAAsD,KAAK,CAAC,IAAlG;AACA,qCAAA,CAAA;AAAA;AAAA,gCAAM,KAAK,WAAL,CAAiB,SAAjB,CAA2B,KAA3B,EAAkC,UAAlC,CAAN,CAAA;;;AAAA,8BAAA,EAAA,CAAA,IAAA;;;;;;;uBAFiB,CAAA;AAGpB,qBA3Be,CAAd;AA6BN,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAlCmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;sBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCd,GArCe;;AAuCA,EAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAhB,YAAA;;;;;;;;;AACI;AACA,gBAAI,KAAK,UAAL,CAAgB,MAAhB,YAAkC,WAAlC,IAAiD,KAAK,UAAL,CAAgB,MAAhB,YAAkC,mBAAvF,EACI,OAAA,CAAA;AAAA;AAAA,aAAA;;gCAEO,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,MAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,SAAS,GAAG,KAAK,CAAC,MAAN,CAAa,MAAb,CAAoB,UAAA,UAAA,EAAU;AAC5C,6BAAO,CAAC,QAAQ,CAAC,MAAT,CAAgB,IAAhB,CAAqB,UAAA,aAAA,EAAa;AAAI,+BAAA,aAAa,CAAC,IAAd,KAAuB,UAAU,CAAjC,IAAA;AAAsC,uBAA5E,CAAR;AACH,qBAFiB,CAAZ;AAIN,wBAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,E;;sBACa,U;AAEb,oBAAA,MAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,oCAAkC,SAAS,CAAC,GAAV,CAAc,UAAA,KAAA,EAAK;AAAI,6BAAA,OAAI,KAAK,CAAC,IAAV,GAAA,IAAA;AAAiB,qBAAxC,EAA0C,IAA1C,CAA+C,IAA/C,CAAlC,GAAsF,gBAAtF,GAAsG,KAAK,CAAC,IAA5G,GAAgH,IAAtJ;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAA,CAAK,WAAL,CAAiB,oBAAjB,CAAsC,KAAtC,EAA6C,SAA7C,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAbmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;sBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAed,GApBe;;AAsBA,EAAA,kBAAA,CAAA,SAAA,CAAA,8BAAA,GAAhB,YAAA;;;;;;;;;gCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,MAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,gBAAgB,GAAG,KAAK,CAAC,OAAN,CAAc,MAAd,CAAqB,UAAA,WAAA,EAAW;AACrD,6BAAO,WAAW,CAAC,WAAZ,CAAwB,MAAxB,GAAiC,CAAjC,IAAsC,CAAC,QAAQ,CAAC,OAAT,CAAiB,IAAjB,CAAsB,UAAA,cAAA,EAAc;AAAI,+BAAA,cAAc,CAAC,IAAf,KAAwB,WAAW,CAAnC,IAAA;AAAwC,uBAAhF,CAA9C;AACH,qBAFwB,CAAnB;AAIN,wBAAI,gBAAgB,CAAC,MAAjB,KAA4B,CAAhC,E;;sBACa,U;AAEb,oBAAA,MAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,qCAAmC,gBAAgB,CAAC,GAAjB,CAAqB,UAAA,MAAA,EAAM;AAAI,6BAAA,OAAI,MAAM,CAAC,IAAX,GAAA,IAAA;AAAkB,qBAAjD,EAAmD,IAAnD,CAAwD,IAAxD,CAAnC,GAAgG,gBAAhG,GAAgH,KAAK,CAAC,IAAtH,GAA0H,IAAhK;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAA,CAAK,WAAL,CAAiB,qBAAjB,CAAuC,KAAvC,EAA8C,gBAA9C,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAbmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;sBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAed,GAhBe;;AAkBA,EAAA,kBAAA,CAAA,SAAA,CAAA,iBAAA,GAAhB,YAAA;;;;;;;;;AACI;AACA,gBAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,YAAkC,cAApC,CAAJ,EACI,OAAA,CAAA;AAAA;AAAA,aAAA;;gCAEO,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,MAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,aAAa,GAAG,KAAK,CAAC,UAAN,CAAiB,MAAjB,CAAwB,UAAA,cAAA,EAAc;AACxD,6BAAO,CAAC,QAAQ,CAAC,UAAT,CAAoB,IAApB,CAAyB,UAAA,iBAAA,EAAiB;AAAI,+BAAA,iBAAiB,CAAC,IAAlB,KAA2B,cAAc,CAAzC,IAAA;AAA8C,uBAA5F,CAAR;AACH,qBAFqB,CAAhB;AAIN,wBAAI,aAAa,CAAC,MAAd,KAAyB,CAA7B,E;;sBACa,U;AAEb,oBAAA,MAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,wCAAsC,aAAa,CAAC,GAAd,CAAkB,UAAA,SAAA,EAAS;AAAI,6BAAA,OAAI,SAAS,CAAC,IAAd,GAAA,IAAA;AAAqB,qBAApD,EAAsD,IAAtD,CAA2D,IAA3D,CAAtC,GAAsG,gBAAtG,GAAsH,KAAK,CAAC,IAA5H,GAAgI,IAAtK;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAA,CAAK,WAAL,CAAiB,wBAAjB,CAA0C,KAA1C,EAAiD,aAAjD,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAbmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;sBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAed,GApBe;AAsBhB;;;;AAIG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,eAAA,GAAhB,YAAA;;;;;;;;;;;AAC0B,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,gBAAjB,EAAN,CAAA;;;AAAhB,YAAA,aAAa,GAAG,EAAA,CAAA,IAAA,EAAhB;;gCACK,Q,EAAQ;;;;;AAET,oBAAA,UAAU,GAAG,MAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AACvD,0BAAM,QAAQ,GAAG,QAAQ,CAAC,QAAT,IAAqB,QAAQ,CAAC,QAAT,KAAsB,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,QAAlE,GAA6E,QAAQ,CAAC,QAAtF,GAAiG,SAAlH;AACA,0BAAI,MAAM,GAAG,QAAQ,CAAC,MAAT,IAA8D,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAwB,OAAxB,CAAgC,MAA3G,CAFuD,CAGvD;;AACA,sBAAA,MAAM,GAAG,MAAM,KAAK,aAAX,GAA2B,SAA3B,GAAuC,MAAhD;;AACA,0BAAM,aAAa,GAAG,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,QAAQ,CAAC,SAA/C,EAA0D,MAA1D,EAAkE,QAAlE,CAAtB;;AAEA,6BAAO,KAAK,CAAC,IAAN,KAAe,aAAtB;AACH,qBARkB,CAAb;AASN,wBAAI,UAAJ,E;;sBACa,U;AAEb,oBAAA,MAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,2BAAyB,QAAQ,CAAC,SAAxE;AAGM,oBAAA,KAAK,GAAG,KAAK,CAAC,MAAN,CAAa,QAAb,EAAuB,MAAA,CAAK,UAAL,CAAgB,MAAvC,CAAR;AACN,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAA,CAAK,WAAL,CAAiB,WAAjB,CAA6B,KAA7B,EAAoC,KAApC,EAA2C,KAA3C,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;AACA,oBAAA,MAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,KAAnC;;;;;;;;;;;;;;AAnBmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;sBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBd,GAvBe;;AAyBA,EAAA,kBAAA,CAAA,SAAA,CAAA,WAAA,GAAhB,YAAA;;;;;;;;;;;gCACe,Q,EAAQ;;;;;AAET,oBAAA,SAAS,GAAG,MAAA,CAAK,WAAL,CAAiB,WAAjB,CAA6B,IAA7B,CAAkC,UAAA,IAAA,EAAI;AACpD,0BAAM,QAAQ,GAAG,QAAQ,CAAC,QAAT,IAAqB,QAAQ,CAAC,QAAT,KAAsB,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,QAAlE,GAA6E,QAAQ,CAAC,QAAtF,GAAiG,SAAlH;AACA,0BAAM,MAAM,GAAG,QAAQ,CAAC,MAAT,IAAoD,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAwB,OAAxB,CAAgC,MAAnG;;AACA,0BAAM,YAAY,GAAG,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,QAAQ,CAAC,SAA/C,EAA0D,MAA1D,EAAkE,QAAlE,CAArB;;AACA,0BAAM,cAAc,GAAG,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA3B,GAAsC,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAtC,GAA+D,IAAI,CAAC,UAAL,CAAgB,KAAI,CAAC,UAArB,EAAiC,QAAjC,EAAtF;AACA,0BAAM,kBAAkB,GAAG,OAAO,QAAQ,CAAC,UAAhB,KAA+B,QAA/B,GAA0C,QAAQ,CAAC,UAAT,CAAoB,IAApB,EAA1C,GAAuE,QAAQ,CAAC,UAAT,CAAqB,KAAI,CAAC,UAA1B,EAAsC,QAAtC,EAAlG;AACA,6BAAO,IAAI,CAAC,IAAL,KAAc,YAAd,IAA8B,cAAc,KAAK,kBAAxD;AACH,qBAPiB,CAAZ;AAQN,wBAAI,SAAJ,E;;sBACa,U;AAEb,oBAAA,MAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,0BAAwB,QAAQ,CAAC,SAAvE;AAGM,oBAAA,IAAI,GAAG,IAAI,CAAC,MAAL,CAAY,QAAZ,EAAsB,MAAA,CAAK,UAAL,CAAgB,MAAtC,CAAP;AACN,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAA,CAAK,WAAL,CAAiB,UAAjB,CAA4B,IAA5B,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;AACA,oBAAA,MAAA,CAAK,WAAL,CAAiB,WAAjB,CAA6B,IAA7B,CAAkC,IAAlC;;;;;;;;;;;;;;AAlBmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,yBAAL,CAAA,EAA8B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA9B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;sBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBd,GArBe;;AAuBA,EAAA,kBAAA,CAAA,SAAA,CAAA,YAAA,GAAhB,YAAA;;;;;;;;;;;AACU,YAAA,YAAY,GAAc,IAAI,GAAJ,EAA1B;;gCACK,I,EAAI;;;;;AACL,oBAAA,iBAAiB,GAAG,MAAA,CAAK,yBAAL,CAA+B,IAA/B,CAAoC,UAAA,QAAA,EAAQ;AAClE,0BAAM,QAAQ,GAAG,QAAQ,CAAC,QAAT,IAAqB,QAAQ,CAAC,QAAT,KAAsB,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,QAAlE,GAA6E,QAAQ,CAAC,QAAtF,GAAiG,SAAlH;AACA,0BAAM,MAAM,GAAG,QAAQ,CAAC,MAAT,IAAoD,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAwB,OAAxB,CAAgC,MAAnG;;AACA,0BAAM,YAAY,GAAG,KAAI,CAAC,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,QAAQ,CAAC,SAA/C,EAA0D,MAA1D,EAAkE,QAAlE,CAArB;;AACA,0BAAM,cAAc,GAAG,OAAO,IAAI,CAAC,UAAZ,KAA2B,QAA3B,GAAsC,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAtC,GAA+D,IAAI,CAAC,UAAL,CAAgB,KAAI,CAAC,UAArB,EAAiC,QAAjC,EAAtF;AACA,0BAAM,kBAAkB,GAAG,OAAO,QAAQ,CAAC,UAAhB,KAA+B,QAA/B,GAA0C,QAAQ,CAAC,UAAT,CAAoB,IAApB,EAA1C,GAAuE,QAAQ,CAAC,UAAT,CAAqB,KAAI,CAAC,UAA1B,EAAsC,QAAtC,EAAlG;AACA,6BAAO,IAAI,CAAC,IAAL,KAAc,YAAd,IAA8B,cAAc,KAAK,kBAAxD;AACH,qBAPyB,CAApB;AASN,wBAAI,iBAAJ,E;;sBACa,U;AAEb,oBAAA,MAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,2BAAyB,IAAI,CAAC,IAApE,E,CAEA;;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,MAAA,CAAK,WAAL,CAAiB,QAAjB,CAA0B,IAA1B,CAAN,CAAA;;;AADA;AACA,oBAAA,EAAA,CAAA,IAAA;;AACA,oBAAA,YAAY,CAAC,GAAb,CAAiB,IAAjB;;;;;;;;;;;;;;AAjBe,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,WAAL,CAAiB,WAAjB,CAAA,EAA4B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA5B;;;;;;;AAAR,YAAA,IAAI,GAAA,EAAA,CAAA,KAAJ;;;sBAAA,I;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBX,iBAAK,WAAL,CAAiB,WAAjB,GAA+B,KAAK,WAAL,CAAiB,WAAjB,CAA6B,MAA7B,CAAoC,UAAA,IAAA,EAAI;AAAI,qBAAA,CAAC,YAAY,CAAC,GAAb,CAAD,IAAC,CAAD;AAAuB,aAAnE,CAA/B;;;;;;;AACH,GAtBe;AAwBhB;;;AAGG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAhB,YAAA;;;;;;;;;iCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,OAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAGP,oBAAA,mBAAmB,GAAG,KAAK,CAAC,OAAN,CAAc,MAAd,CAAqB,UAAA,WAAA,EAAW;AACxD,6BAAO,CAAC,QAAQ,CAAC,OAAT,CAAiB,IAAjB,CAAsB,UAAA,cAAA,EAAc;AAAI,+BAAA,cAAc,CAAC,YAAf,KAAgC,WAAW,CAA3C,IAAA;AAAgD,uBAAxF,CAAR;AACH,qBAF2B,CAAtB;AAGN,wBAAI,mBAAmB,CAAC,MAApB,KAA+B,CAAnC,E;;sBACa,U;AAEb,oBAAA,OAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,wBAAsB,KAAK,CAAC,IAA5B,GAAgC,IAAhC,GAAuC,mBAAmB,CAAC,GAApB,CAAwB,UAAA,MAAA,EAAM;AAAI,6BAAA,MAAM,CAAN,IAAA;AAAW,qBAA7C,EAA+C,IAA/C,CAAoD,IAApD,CAA7E,E,CAEA;;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,WAAL,CAAiB,WAAjB,CAA6B,KAA7B,EAAoC,mBAApC,CAAN,CAAA;;;AADA;AACA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAfmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;uBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiBd,GAlBe;AAoBhB;;;AAGG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,aAAA,GAAhB,YAAA;;;;;;;;;iCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,OAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAGP,oBAAA,kBAAkB,GAAG,QAAQ,CAAC,OAAT,CAAiB,MAAjB,CAAwB,UAAA,cAAA,EAAc;AAC7D,6BAAO,CAAC,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,UAAA,WAAA,EAAW;AAAI,+BAAA,WAAW,CAAC,IAAZ,KAAqB,cAAc,CAAnC,YAAA;AAAgD,uBAAlF,CAAR;AACH,qBAF0B,CAArB;AAGN,wBAAI,kBAAkB,CAAC,MAAnB,KAA8B,CAAlC,E;;sBACa,U;AAGP,oBAAA,qBAAqB,GAAG,OAAA,CAAK,mCAAL,CAAyC,kBAAzC,CAAxB;AACA,oBAAA,eAAe,GAAG,qBAAqB,CAAC,GAAtB,CAA0B,UAAA,MAAA,EAAM;AAAI,6BAAA,IAAI,WAAJ,CAAA,MAAA,CAAA;AAAuB,qBAA3D,CAAlB;AAEN,wBAAI,eAAe,CAAC,MAAhB,KAA2B,CAA/B,E;;sBACa,U;AAEb,oBAAA,OAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,wBAAwB,kBAAkB,CAAC,GAAnB,CAAuB,UAAA,MAAA,EAAM;AAAI,6BAAA,MAAM,CAAN,YAAA;AAAmB,qBAApD,EAAsD,IAAtD,CAA2D,IAA3D,CAA9D;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,WAAL,CAAiB,UAAjB,CAA4B,KAA5B,EAAmC,eAAnC,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AApBmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;uBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsBd,GAvBe;AAyBhB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,iBAAA,GAAhB,YAAA;;;;;;;;;;;iCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,OAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,sBAAsB,GAAG,QAAQ,CAAC,OAAT,CAAiB,MAAjB,CAAwB,UAAA,MAAA,EAAM;AAAI,6BAAA,MAAM,CAAN,SAAA;AAAgB,qBAAlD,CAAzB;AACA,oBAAA,mBAAmB,GAAG,KAAK,CAAC,OAAN,CAAc,MAAd,CAAqB,UAAA,MAAA,EAAM;AAAI,6BAAA,MAAM,CAAN,SAAA;AAAgB,qBAA/C,CAAtB;wBACF,EAAA,mBAAmB,CAAC,MAApB,KAA+B,sBAAsB,CAAC,MAAtD,IAAgE,sBAAsB,CAAC,MAAvB,GAAgC,CAAhG,C,EAAA,OAAA,CAAA;AAAA;AAAA,sBAAA,CAAA,CAAA;AACM,oBAAA,qBAAqB,GAAG,sBAAsB,CAAC,GAAvB,CAA2B,UAAA,qBAAA,EAAqB;AAC1E,6BAAO,IAAI,WAAJ,CAAgB,UAAU,CAAC,wBAAX,CAAoC,qBAApC,EAA2D,KAAI,CAAC,UAAL,CAAgB,MAA3E,CAAhB,CAAP;AACH,qBAF6B,CAAxB;AAGN,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,WAAL,CAAiB,iBAAjB,CAAmC,KAAnC,EAA0C,qBAA1C,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;;;;AAXe,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;uBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAcd,GAfe;AAiBhB;;;AAGG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,kBAAA,GAAhB,YAAA;;;;;;;;;;;iCACe,Q,EAAQ;;;;;;;;AACT,oBAAA,KAAK,GAAG,OAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,cAAc,GAAG,OAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,kBAAvB,CAA0C,KAAK,CAAC,OAAhD,EAAyD,QAAQ,CAAC,OAAlE,CAAjB;AACN,wBAAI,cAAc,CAAC,MAAf,KAA0B,CAA9B,E;;sBACa,U;;;;;;AAGe,oBAAA,gBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,EAAA,QAAA,CAAA,cAAA,CAAA,CAAA,EAAc,kBAAA,GAAA,gBAAA,CAAA,IAAA,EAAd;;;;;;;AAAjB,oBAAA,aAAa,GAAA,kBAAA,CAAA,KAAb;AACP,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,+BAAL,CAAqC,QAAQ,CAAC,SAA9C,EAAyD,aAAa,CAAC,YAAvE,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIwB,oBAAA,gBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,EAAA,QAAA,CAAA,cAAA,CAAA,CAAA,EAAc,kBAAA,GAAA,gBAAA,CAAA,IAAA,EAAd;;;;;;;AAAjB,oBAAA,aAAa,GAAA,kBAAA,CAAA,KAAb;AACP,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,0BAAL,CAAgC,QAAQ,CAAC,SAAzC,EAAoD,aAAa,CAAC,YAAlE,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBAKA,EAAE,OAAA,CAAK,UAAL,CAAgB,MAAhB,YAAkC,WAAlC,IAAiD,OAAA,CAAK,UAAL,CAAgB,MAAhB,YAAkC,mBAArF,C,EAAA,OAAA,CAAA;AAAA;AAAA,sBAAA,EAAA,CAAA;;;;;;AAC4B,oBAAA,gBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,EAAA,QAAA,CAAA,cAAA,CAAA,CAAA,EAAc,kBAAA,GAAA,gBAAA,CAAA,IAAA,EAAd;;;;;;;AAAjB,oBAAA,aAAa,GAAA,kBAAA,CAAA,KAAb;AACP,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,0BAAL,CAAgC,QAAQ,CAAC,SAAzC,EAAoD,aAAa,CAAC,YAAlE,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKF,oBAAA,qBAAqB,GAAG,cAAc,CAAC,GAAf,CAAmB,UAAA,aAAA,EAAa;AAC1D,0BAAM,cAAc,GAAG,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,UAAA,MAAA,EAAM;AAAI,+BAAA,MAAM,CAAC,IAAP,KAAgB,aAAa,CAA7B,YAAA;AAA0C,uBAAvE,CAAvB;AACA,0BAAM,qBAAqB,GAAG,UAAU,CAAC,wBAAX,CAAoC,aAApC,EAAmD,KAAI,CAAC,UAAL,CAAgB,MAAnE,CAA9B;AACA,0BAAM,cAAc,GAAG,IAAI,WAAJ,CAAgB,qBAAhB,CAAvB;AAEA,6BAAO;AACH,wBAAA,SAAS,EAAE,cADR;AAEH,wBAAA,SAAS,EAAE;AAFR,uBAAP;AAIH,qBAT6B,CAAxB;AAWN,wBAAI,qBAAqB,CAAC,MAAtB,KAAiC,CAArC,E;;sBACa,U;AAEb,oBAAA,OAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,0BAAuB,KAAK,CAAC,IAA7B,GAAiC,gBAAjC,GAAmD,cAAc,CAAC,GAAf,CAAmB,UAAA,MAAA,EAAM;AAAI,6BAAA,MAAM,CAAN,YAAA;AAAmB,qBAAhD,EAAkD,IAAlD,CAAuD,IAAvD,CAAzF;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,WAAL,CAAiB,aAAjB,CAA+B,KAA/B,EAAsC,qBAAtC,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AA3CmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;uBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6Cd,GA9Ce;AAgDhB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,gBAAA,GAAhB,YAAA;;;;;;;;;iCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,OAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,UAAU,GAAG,QAAQ,CAAC,OAAT,CACd,MADc,CACP,UAAA,aAAA,EAAa;AAAI,6BAAA,CAAC,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,UAAA,UAAA,EAAU;AAAI,+BAAA,UAAU,CAAC,IAAX,KAAoB,aAAa,CAAjC,IAAA;AAAsC,uBAAvE,CAAD,IAA6E,aAAa,CAAC,WAAd,KAA7E,IAAA;AAA+G,qBADzH,EAEd,GAFc,CAEV,UAAA,aAAA,EAAa;AAAI,6BAAA,UAAU,CAAC,MAAX,CAAA,aAAA,CAAA;AAAgC,qBAFvC,CAAb;AAIN,wBAAI,UAAU,CAAC,MAAX,KAAsB,CAA1B,E;;sBACa,U;AAEb,oBAAA,OAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,wBAAsB,UAAU,CAAC,GAAX,CAAe,UAAA,KAAA,EAAK;AAAI,6BAAA,OAAI,KAAK,CAAC,IAAV,GAAA,IAAA;AAAiB,qBAAzC,EAA2C,IAA3C,CAAgD,IAAhD,CAAtB,GAA2E,cAA3E,GAAyF,KAAK,CAAC,IAA/F,GAAmG,IAAzI;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,WAAL,CAAiB,aAAjB,CAA+B,KAA/B,EAAsC,UAAtC,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAbmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;uBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAed,GAhBe;;AAkBA,EAAA,kBAAA,CAAA,SAAA,CAAA,eAAA,GAAhB,YAAA;;;;;;;;;AACI;AACA,gBAAI,KAAK,UAAL,CAAgB,MAAhB,YAAkC,WAAlC,IAAiD,KAAK,UAAL,CAAgB,MAAhB,YAAkC,mBAAvF,EACI,OAAA,CAAA;AAAA;AAAA,aAAA;;iCAEO,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,OAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,SAAS,GAAG,QAAQ,CAAC,MAAT,CACb,MADa,CACN,UAAA,aAAA,EAAa;AAAI,6BAAA,CAAC,KAAK,CAAC,MAAN,CAAa,IAAb,CAAkB,UAAA,UAAA,EAAU;AAAI,+BAAA,UAAU,CAAC,IAAX,KAAoB,aAAa,CAAjC,IAAA;AAAjC,uBAAC,CAAD;AAAwE,qBADnF,EAEb,GAFa,CAET,UAAA,aAAA,EAAa;AAAI,6BAAA,UAAU,CAAC,MAAX,CAAA,aAAA,CAAA;AAAgC,qBAFxC,CAAZ;AAIN,wBAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,E;;sBACa,U;AAEb,oBAAA,OAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,mCAAiC,SAAS,CAAC,GAAV,CAAc,UAAA,KAAA,EAAK;AAAI,6BAAA,OAAI,KAAK,CAAC,IAAV,GAAA,IAAA;AAAiB,qBAAxC,EAA0C,IAA1C,CAA+C,IAA/C,CAAjC,GAAqF,cAArF,GAAmG,KAAK,CAAC,IAAzG,GAA6G,IAAnJ;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,WAAL,CAAiB,sBAAjB,CAAwC,KAAxC,EAA+C,SAA/C,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAbmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;uBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAed,GApBe;AAsBhB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,gCAAA,GAAhB,YAAA;;;;;;;;;iCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,OAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,gBAAgB,GAAG,QAAQ,CAAC,OAAT,CACpB,MADoB,CACb,UAAA,cAAA,EAAc;AAAI,6BAAA,cAAc,CAAC,OAAf,CAAuB,MAAvB,GAAgC,CAAhC,IAAqC,CAAC,KAAK,CAAC,OAAN,CAAc,IAAd,CAAmB,UAAA,WAAA,EAAW;AAAI,+BAAA,WAAW,CAAC,IAAZ,KAAqB,cAAc,CAAnC,IAAA;AAAxE,uBAAsC,CAAtC;AAAiH,qBADtH,EAEpB,GAFoB,CAEhB,UAAA,cAAA,EAAc;AAAI,6BAAA,WAAW,CAAC,MAAZ,CAAA,cAAA,CAAA;AAAkC,qBAFpC,CAAnB;AAIN,wBAAI,gBAAgB,CAAC,MAAjB,KAA4B,CAAhC,E;;sBACa,U;AAEb,oBAAA,OAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,oCAAkC,gBAAgB,CAAC,GAAjB,CAAqB,UAAA,MAAA,EAAM;AAAI,6BAAA,OAAI,MAAM,CAAC,IAAX,GAAA,IAAA;AAAkB,qBAAjD,EAAmD,IAAnD,CAAwD,IAAxD,CAAlC,GAA+F,cAA/F,GAA6G,KAAK,CAAC,IAAnH,GAAuH,IAA7J;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,WAAL,CAAiB,uBAAjB,CAAyC,KAAzC,EAAgD,gBAAhD,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAbmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;uBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAed,GAhBe;AAkBhB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,mBAAA,GAAhB,YAAA;;;;;;;;;AACI;AACA,gBAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,YAAkC,cAApC,CAAJ,EACI,OAAA,CAAA;AAAA;AAAA,aAAA;;iCAEO,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,OAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,aAAa,GAAG,QAAQ,CAAC,UAAT,CACrB,MADqB,CACd,UAAA,iBAAA,EAAiB;AAAI,6BAAA,CAAC,KAAK,CAAC,UAAN,CAAiB,IAAjB,CAAsB,UAAA,cAAA,EAAc;AAAI,+BAAA,cAAc,CAAC,IAAf,KAAwB,iBAAiB,CAAzC,IAAA;AAAzC,uBAAC,CAAD;AAAwF,qBAD/F,EAErB,GAFqB,CAEjB,UAAA,iBAAA,EAAiB;AAAI,6BAAA,cAAc,CAAC,MAAf,CAAA,iBAAA,CAAA;AAAwC,qBAF5C,CAAhB;AAIN,wBAAI,aAAa,CAAC,MAAd,KAAyB,CAA7B,E;;sBACa,U;AAEb,oBAAA,OAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,uCAAqC,aAAa,CAAC,GAAd,CAAkB,UAAA,SAAA,EAAS;AAAI,6BAAA,OAAI,SAAS,CAAC,IAAd,GAAA,IAAA;AAAqB,qBAApD,EAAsD,IAAtD,CAA2D,IAA3D,CAArC,GAAqG,cAArG,GAAmH,KAAK,CAAC,IAAzH,GAA6H,IAAnK;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,WAAL,CAAiB,0BAAjB,CAA4C,KAA5C,EAAmD,aAAnD,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAbmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;uBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAed,GApBe;AAsBhB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,iBAAA,GAAhB,YAAA;;;;;;;;;iCACe,Q,EAAQ;;;;;AACT,oBAAA,KAAK,GAAG,OAAA,CAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,6BAAA,KAAK,CAAC,IAAN,KAAe,QAAQ,CAAvB,SAAA;AAAiC,qBAA7E,CAAR;AACN,wBAAI,CAAC,KAAL,E;;sBACa,U;AAEP,oBAAA,OAAO,GAAG,QAAQ,CAAC,WAAT,CACX,MADW,CACJ,UAAA,UAAA,EAAU;AAClB,6BAAO,CAAC,KAAK,CAAC,WAAN,CAAkB,IAAlB,CAAuB,UAAA,YAAA,EAAY;AAAI,+BAAA,gBAAgB,CAAC,YAAD,EAAhB,UAAgB,CAAhB;AAA0C,uBAAjF,CAAR;AACH,qBAHe,CAAV;AAIN,wBAAI,OAAO,CAAC,MAAR,KAAmB,CAAvB,E;;sBACa,U;AAEP,oBAAA,aAAa,GAAG,OAAO,CAAC,GAAR,CAAY,UAAA,kBAAA,EAAkB;AAAI,6BAAA,eAAe,CAAC,MAAhB,CAAA,kBAAA,CAAA;AAA0C,qBAA5E,CAAhB;AACN,oBAAA,OAAA,CAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,8BAA4B,OAAO,CAAC,GAAR,CAAY,UAAA,GAAA,EAAG;AAAI,6BAAA,GAAG,CAAH,IAAA;AAAQ,qBAA3B,EAA6B,IAA7B,CAAkC,IAAlC,CAA5B,GAAmE,cAAnE,GAAiF,KAAK,CAAC,IAAvF,GAA2F,IAAjI;AACA,2BAAA,CAAA;AAAA;AAAA,sBAAM,OAAA,CAAK,WAAL,CAAiB,iBAAjB,CAAmC,KAAnC,EAA0C,aAA1C,CAAN,CAAA;;;AAAA,oBAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;AAdmB,YAAA,EAAA,GAAA,QAAA,CAAA,KAAK,qBAAL,CAAA,EAA0B,EAAA,GAAA,EAAA,CAAA,IAAA,EAA1B;;;;;;;AAAZ,YAAA,QAAQ,GAAA,EAAA,CAAA,KAAR;;;uBAAA,Q;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBd,GAjBe;AAmBhB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,+BAAA,GAAhB,UAAgD,SAAhD,EAAmE,UAAnE,EAAqF;;;;;;;;;AAC3E,YAAA,KAAK,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,qBAAA,KAAK,CAAC,IAAN,KAAA,SAAA;AAAwB,aAApE,CAAR;AACN,gBAAI,CAAC,KAAL,EACI,OAAA,CAAA;AAAA;AAAA,aAAA;AAEE,YAAA,YAAY,GAAY,EAAxB;AACA,YAAA,gBAAgB,GAAG,KAAK,CAAC,WAAN,CAAkB,IAAlB,CAAuB,UAAA,UAAA,EAAU;AAAI,qBAAA,UAAU,CAAC,WAAX,CAAuB,OAAvB,CAA+B,UAA/B,MAA+C,CAA/C,CAAA;AAAiD,aAAtF,CAAnB;;AACN,gBAAI,gBAAJ,EAAsB;AACZ,cAAA,WAAW,GAAG,KAAK,CAAC,KAAN,EAAd;AACN,cAAA,WAAW,CAAC,WAAZ,GAA0B,CAAC,gBAAD,CAA1B;AACA,cAAA,YAAY,CAAC,IAAb,CAAkB,WAAlB;AACA,cAAA,KAAK,CAAC,gBAAN,CAAuB,gBAAvB;AACH;;AAED,iBAAK,WAAL,CAAiB,YAAjB,CAA8B,OAA9B,CAAsC,UAAA,WAAA,EAAW;AAC7C,kBAAM,iBAAiB,GAAG,WAAW,CAAC,WAAZ,CAAwB,MAAxB,CAA+B,UAAA,UAAA,EAAU;AAC/D,uBAAO,UAAU,CAAC,mBAAX,KAAmC,SAAnC,IAAgD,UAAU,CAAC,qBAAX,CAAiC,OAAjC,CAAyC,UAAzC,MAAyD,CAAC,CAAjH;AACH,eAFyB,CAA1B;;AAIA,kBAAI,iBAAiB,CAAC,MAAlB,GAA2B,CAA/B,EAAkC;AAC9B,oBAAM,WAAW,GAAG,WAAW,CAAC,KAAZ,EAApB;AACA,gBAAA,WAAW,CAAC,WAAZ,GAA0B,iBAA1B;AACA,gBAAA,YAAY,CAAC,IAAb,CAAkB,WAAlB;AACA,gBAAA,iBAAiB,CAAC,OAAlB,CAA0B,UAAA,gBAAA,EAAgB;AAAI,yBAAA,WAAW,CAAC,gBAAZ,CAAA,gBAAA,CAAA;AAA8C,iBAA5F;AACH;AACJ,aAXD;gBAaI,EAAA,YAAY,CAAC,MAAb,GAAsB,CAAtB,C,EAAA,OAAA,CAAA;AAAA;AAAA,cAAA,CAAA,CAAA;;;;;;AAC0B,YAAA,cAAA,GAAA,QAAA,CAAA,YAAA,CAAA,EAAY,gBAAA,GAAA,cAAA,CAAA,IAAA,EAAZ;;;;;;;AAAf,YAAA,WAAW,GAAA,gBAAA,CAAA,KAAX;AACP,iBAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,sCAAoC,WAAW,CAAC,IAAhD,GAAoD,IAApD,GAAyD,WAAW,CAAC,WAAZ,CAAwB,GAAxB,CAA4B,UAAA,UAAA,EAAU;AAAI,qBAAA,UAAU,CAAV,IAAA;AAAe,aAAzD,EAA2D,IAA3D,CAAgE,IAAhE,CAA/F;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,eAAjB,CAAiC,WAAjC,EAA8C,WAAW,CAAC,WAA1D,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGX,GAjCe;AAmChB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,0BAAA,GAAhB,UAA2C,SAA3C,EAA8D,UAA9D,EAAgF;;;;;;AACtE,YAAA,KAAK,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,qBAAA,KAAK,CAAC,IAAN,KAAA,SAAA;AAAwB,aAApE,CAAR;AACN,gBAAI,CAAC,KAAL,EACI,OAAA,CAAA;AAAA;AAAA,aAAA;AAEE,YAAA,cAAc,GAAG,KAAK,CAAC,OAAN,CAAc,MAAd,CAAqB,UAAA,KAAA,EAAK;AAAI,qBAAA,KAAK,CAAC,WAAN,CAAkB,MAAlB,GAA2B,CAA3B,IAAgC,KAAK,CAAC,WAAN,CAAkB,OAAlB,CAA0B,UAA1B,MAA0C,CAA1E,CAAA;AAA4E,aAA1G,CAAjB;AACN,gBAAI,cAAc,CAAC,MAAf,KAA0B,CAA9B,EACI,OAAA,CAAA;AAAA;AAAA,aAAA;AAEJ,iBAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,mCAAgC,SAAhC,GAAyC,OAAzC,GAA+C,UAA/C,GAAyD,MAAzD,GAA+D,cAAc,CAAC,GAAf,CAAmB,UAAA,KAAA,EAAK;AAAI,qBAAA,KAAK,CAAL,IAAA;AAAU,aAAtC,EAAwC,IAAxC,CAA6C,IAA7C,CAArG;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,WAAjB,CAA6B,KAA7B,EAAoC,cAApC,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AACH,GAXe;AAahB;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,0BAAA,GAAhB,UAA2C,SAA3C,EAA8D,UAA9D,EAAgF;;;;;;AACtE,YAAA,KAAK,GAAG,KAAK,WAAL,CAAiB,YAAjB,CAA8B,IAA9B,CAAmC,UAAA,KAAA,EAAK;AAAI,qBAAA,KAAK,CAAC,IAAN,KAAA,SAAA;AAAwB,aAApE,CAAR;AACN,gBAAI,CAAC,KAAL,EACI,OAAA,CAAA;AAAA;AAAA,aAAA;AAEE,YAAA,cAAc,GAAG,KAAK,CAAC,OAAN,CAAc,MAAd,CAAqB,UAAA,MAAA,EAAM;AAAI,qBAAA,MAAM,CAAC,WAAP,CAAmB,MAAnB,GAA4B,CAA5B,IAAiC,MAAM,CAAC,WAAP,CAAmB,OAAnB,CAA2B,UAA3B,MAA2C,CAA5E,CAAA;AAA8E,aAA7G,CAAjB;AACN,gBAAI,cAAc,CAAC,MAAf,KAA0B,CAA9B,EACI,OAAA,CAAA;AAAA;AAAA,aAAA;AAEJ,iBAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,8CAA2C,SAA3C,GAAoD,OAApD,GAA0D,UAA1D,GAAoE,MAApE,GAA0E,cAAc,CAAC,GAAf,CAAmB,UAAA,MAAA,EAAM;AAAI,qBAAA,MAAM,CAAN,IAAA;AAAW,aAAxC,EAA0C,IAA1C,CAA+C,IAA/C,CAAhH;AACA,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,qBAAjB,CAAuC,KAAvC,EAA8C,cAA9C,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AACH,GAXe;AAahB;;AAEG;;;AACO,EAAA,kBAAA,CAAA,SAAA,CAAA,mCAAA,GAAV,UAA8C,OAA9C,EAAuE;AAAvE,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,OAAO,CAAC,GAAR,CAAY,UAAA,cAAA,EAAc;AAAI,aAAA,UAAU,CAAC,wBAAX,CAAoC,cAApC,EAAoD,KAAI,CAAC,UAAL,CAApD,MAAA,CAAA;AAA2E,KAAzG,CAAP;AACH,GAFS;AAIV;;AAEG;;;AACa,EAAA,kBAAA,CAAA,SAAA,CAAA,0BAAA,GAAhB,YAAA;;;;;;AACU,YAAA,OAAO,GAAyD,KAAK,UAAL,CAAgB,MAAhB,CAAuB,OAAvF;AACA,YAAA,oBAAoB,GAAG,KAAK,UAAL,CAAgB,MAAhB,CAAuB,cAAvB,CAAsC,kBAAtC,EAA0D,OAAO,CAAC,MAAlE,EAA0E,OAAO,CAAC,QAAlF,CAAvB;AAEN,mBAAA,CAAA;AAAA;AAAA,cAAM,KAAK,WAAL,CAAiB,WAAjB,CAA6B,IAAI,KAAJ,CAC/B;AACI,cAAA,IAAI,EAAE,oBADV;AAEI,cAAA,OAAO,EAAE,CACL;AACI,gBAAA,IAAI,EAAE,MADV;AAEI,gBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,aAAvB,CAAqC;AAAC,kBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,eAAvB,CAAuC;AAA9C,iBAArC,CAFV;AAGI,gBAAA,UAAU,EAAE;AAHhB,eADK,EAML;AACI,gBAAA,IAAI,EAAE,UADV;AAEI,gBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,aAAvB,CAAqC;AAAC,kBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,eAAvB,CAAuC;AAA9C,iBAArC,CAFV;AAGI,gBAAA,UAAU,EAAE;AAHhB,eANK,EAWL;AACI,gBAAA,IAAI,EAAE,QADV;AAEI,gBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,aAAvB,CAAqC;AAAC,kBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,eAAvB,CAAuC;AAA9C,iBAArC,CAFV;AAGI,gBAAA,UAAU,EAAE;AAHhB,eAXK,EAgBL;AACI,gBAAA,IAAI,EAAE,OADV;AAEI,gBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,aAAvB,CAAqC;AAAC,kBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,eAAvB,CAAuC;AAA9C,iBAArC,CAFV;AAGI,gBAAA,UAAU,EAAE;AAHhB,eAhBK,EAqBL;AACI,gBAAA,IAAI,EAAE,MADV;AAEI,gBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,aAAvB,CAAqC;AAAC,kBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,eAAvB,CAAuC;AAA9C,iBAArC,CAFV;AAGI,gBAAA,UAAU,EAAE;AAHhB,eArBK,EA0BL;AACI,gBAAA,IAAI,EAAE,OADV;AAEI,gBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,aAAvB,CAAqC;AAAC,kBAAA,IAAI,EAAE,KAAK,UAAL,CAAgB,MAAhB,CAAuB,eAAvB,CAAuC;AAA9C,iBAArC,CAFV;AAGI,gBAAA,UAAU,EAAE;AAHhB,eA1BK;AAFb,aAD+B,CAA7B,EAoCH,IApCG,CAAN,CAAA;;;AAAA,YAAA,EAAA,CAAA,IAAA;;;;;;;;AAqCH,GAzCe;;AA2CpB,SAAA,kBAAA;AAAC,CAlvBD,EAAA;;;;AAovBA,SAAS,gBAAT,CACI,eADJ,EACsC,kBADtC,EAC4E;AAExE,SAAQ,eAAe,CAAC,IAAhB,KAAyB,kBAAkB,CAAC,IAA7C,IACC,eAAe,CAAC,mBAAhB,KAAwC,kBAAkB,CAAC,mBADnE;AAEH","sourcesContent":["import {CockroachDriver} from \"../driver/cockroachdb/CockroachDriver\";\nimport {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {SapDriver} from \"../driver/sap/SapDriver\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {Table} from \"./table/Table\";\nimport {TableColumn} from \"./table/TableColumn\";\nimport {TableForeignKey} from \"./table/TableForeignKey\";\nimport {TableIndex} from \"./table/TableIndex\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {SchemaBuilder} from \"./SchemaBuilder\";\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\nimport {TableUtils} from \"./util/TableUtils\";\nimport {TableColumnOptions} from \"./options/TableColumnOptions\";\nimport {PostgresDriver} from \"../driver/postgres/PostgresDriver\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {TableUnique} from \"./table/TableUnique\";\nimport {TableCheck} from \"./table/TableCheck\";\nimport {TableExclusion} from \"./table/TableExclusion\";\nimport {View} from \"./view/View\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\n\n/**\n * Creates complete tables schemas in the database based on the entity metadatas.\n *\n * Steps how schema is being built:\n * 1. load list of all tables with complete column and keys information from the db\n * 2. drop all (old) foreign keys that exist in the table, but does not exist in the metadata\n * 3. create new tables that does not exist in the db, but exist in the metadata\n * 4. drop all columns exist (left old) in the db table, but does not exist in the metadata\n * 5. add columns from metadata which does not exist in the table\n * 6. update all exist columns which metadata has changed\n * 7. update primary keys - update old and create new primary key from changed columns\n * 8. create foreign keys which does not exist in the table yet\n * 9. create indices which are missing in db yet, and drops indices which exist in the db, but does not exist in the metadata anymore\n */\nexport class RdbmsSchemaBuilder implements SchemaBuilder {\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Used to execute schema creation queries in a single connection.\n     */\n    protected queryRunner: QueryRunner;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(protected connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates complete schemas for the given entity metadatas.\n     */\n    async build(): Promise<void> {\n        this.queryRunner = this.connection.createQueryRunner();\n        // CockroachDB implements asynchronous schema sync operations which can not been executed in transaction.\n        // E.g. if you try to DROP column and ADD it again in the same transaction, crdb throws error.\n        if (!(this.connection.driver instanceof CockroachDriver))\n            await this.queryRunner.startTransaction();\n        try {\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);\n            // TODO: typeorm_metadata table needs only for Views for now.\n            //  Remove condition or add new conditions if necessary (for CHECK constraints for example).\n            if (this.viewEntityToSyncMetadatas.length > 0)\n                await this.createTypeormMetadataTable();\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache)\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            if (!(this.connection.driver instanceof CockroachDriver))\n                await this.queryRunner.commitTransaction();\n\n        } catch (error) {\n\n            try { // we throw original error even if rollback thrown an error\n                if (!(this.connection.driver instanceof CockroachDriver))\n                    await this.queryRunner.rollbackTransaction();\n            } catch (rollbackError) { }\n            throw error;\n\n        } finally {\n            await this.queryRunner.release();\n        }\n    }\n\n    /**\n     * Returns sql queries to be executed by schema builder.\n     */\n    async log(): Promise<SqlInMemory> {\n        this.queryRunner = this.connection.createQueryRunner();\n        try {\n            const tablePaths = this.entityToSyncMetadatas.map(metadata => metadata.tablePath);\n            // TODO: typeorm_metadata table needs only for Views for now.\n            //  Remove condition or add new conditions if necessary (for CHECK constraints for example).\n            if (this.viewEntityToSyncMetadatas.length > 0)\n                await this.createTypeormMetadataTable();\n            await this.queryRunner.getTables(tablePaths);\n            await this.queryRunner.getViews([]);\n            this.queryRunner.enableSqlMemory();\n            await this.executeSchemaSyncOperationsInProperOrder();\n\n            // if cache is enabled then perform cache-synchronization as well\n            if (this.connection.queryResultCache) // todo: check this functionality\n                await this.connection.queryResultCache.synchronize(this.queryRunner);\n\n            return this.queryRunner.getMemorySql();\n\n        } finally {\n            // its important to disable this mode despite the fact we are release query builder\n            // because there exist drivers which reuse same query runner. Also its important to disable\n            // sql memory after call of getMemorySql() method because last one flushes sql memory.\n            this.queryRunner.disableSqlMemory();\n            await this.queryRunner.release();\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get entityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.synchronize && metadata.tableType !== \"entity-child\" && metadata.tableType !== \"view\");\n    }\n\n    /**\n     * Returns only entities that should be synced in the database.\n     */\n    protected get viewEntityToSyncMetadatas(): EntityMetadata[] {\n        return this.connection.entityMetadatas.filter(metadata => metadata.tableType === \"view\" && metadata.synchronize);\n    }\n\n    /**\n     * Executes schema sync operations in a proper order.\n     * Order of operations matter here.\n     */\n    protected async executeSchemaSyncOperationsInProperOrder(): Promise<void> {\n        await this.dropOldViews();\n        await this.dropOldForeignKeys();\n        await this.dropOldIndices();\n        await this.dropOldChecks();\n        await this.dropOldExclusions();\n        await this.dropCompositeUniqueConstraints();\n        // await this.renameTables();\n        await this.renameColumns();\n        await this.createNewTables();\n        await this.dropRemovedColumns();\n        await this.addNewColumns();\n        await this.updatePrimaryKeys();\n        await this.updateExistColumns();\n        await this.createNewIndices();\n        await this.createNewChecks();\n        await this.createNewExclusions();\n        await this.createCompositeUniqueConstraints();\n        await this.createForeignKeys();\n        await this.createViews();\n    }\n\n    /**\n     * Drops all (old) foreign keys that exist in the tables, but do not exist in the entity metadata.\n     */\n    protected async dropOldForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            // find foreign keys that exist in the schemas but does not exist in the entity metadata\n            const tableForeignKeysToDrop = table.foreignKeys.filter(tableForeignKey => {\n                const metadataFK = metadata.foreignKeys.find(metadataForeignKey => foreignKeysMatch(tableForeignKey, metadataForeignKey));\n                return !metadataFK\n                    || (metadataFK.onDelete && metadataFK.onDelete !== tableForeignKey.onDelete)\n                    || (metadataFK.onUpdate && metadataFK.onUpdate !== tableForeignKey.onUpdate);\n            });\n            if (tableForeignKeysToDrop.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old foreign keys of ${table.name}: ${tableForeignKeysToDrop.map(dbForeignKey => dbForeignKey.name).join(\", \")}`);\n\n            // drop foreign keys from the database\n            await this.queryRunner.dropForeignKeys(table, tableForeignKeysToDrop);\n        }\n    }\n\n    /**\n     * Rename tables\n     */\n    protected async renameTables(): Promise<void> {\n        // for (const metadata of this.entityToSyncMetadatas) {\n        //     const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n        // }\n    }\n\n    /**\n     * Renames columns.\n     * Works if only one column per table was changed.\n     * Changes only column name. If something besides name was changed, these changes will be ignored.\n     */\n    protected async renameColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            if (metadata.columns.length !== table.columns.length)\n                continue;\n\n            const renamedMetadataColumns = metadata.columns.filter(column => {\n                return !table.columns.find(tableColumn => {\n                    return tableColumn.name === column.databaseName\n                        && tableColumn.type === this.connection.driver.normalizeType(column)\n                        && tableColumn.isNullable === column.isNullable\n                        && tableColumn.isUnique === this.connection.driver.normalizeIsUnique(column);\n                });\n            });\n\n            if (renamedMetadataColumns.length === 0 || renamedMetadataColumns.length > 1)\n                continue;\n\n            const renamedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(column => {\n                    return column.databaseName === tableColumn.name\n                        && this.connection.driver.normalizeType(column) === tableColumn.type\n                        && column.isNullable === tableColumn.isNullable\n                        && this.connection.driver.normalizeIsUnique(column) === tableColumn.isUnique;\n                });\n            });\n\n            if (renamedTableColumns.length === 0 || renamedTableColumns.length > 1)\n                continue;\n\n            const renamedColumn = renamedTableColumns[0].clone();\n            renamedColumn.name = renamedMetadataColumns[0].databaseName;\n\n            this.connection.logger.logSchemaBuild(`renaming column \"${renamedTableColumns[0].name}\" in to \"${renamedColumn.name}\"`);\n            await this.queryRunner.renameColumn(table, renamedTableColumns[0], renamedColumn);\n        }\n    }\n\n    protected async dropOldIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const dropQueries = table.indices\n                .filter(tableIndex => {\n                    const indexMetadata = metadata.indices.find(index => index.name === tableIndex.name);\n                    if (indexMetadata) {\n                        if (indexMetadata.synchronize === false)\n                            return false;\n\n                        if (indexMetadata.isUnique !== tableIndex.isUnique)\n                            return true;\n\n                        if (indexMetadata.isSpatial !== tableIndex.isSpatial)\n                            return true;\n\n                        if (this.connection.driver.isFullTextColumnTypeSupported() && indexMetadata.isFulltext !== tableIndex.isFulltext)\n                            return true;\n\n                        if (indexMetadata.columns.length !== tableIndex.columnNames.length)\n                            return true;\n\n                        return !indexMetadata.columns.every(column => tableIndex.columnNames.indexOf(column.databaseName) !== -1);\n                    }\n\n                    return true;\n                })\n                .map(async tableIndex => {\n                    this.connection.logger.logSchemaBuild(`dropping an index: \"${tableIndex.name}\" from table ${table.name}`);\n                    await this.queryRunner.dropIndex(table, tableIndex);\n                });\n\n            await Promise.all(dropQueries);\n        }\n    }\n\n    protected async dropOldChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const oldChecks = table.checks.filter(tableCheck => {\n                return !metadata.checks.find(checkMetadata => checkMetadata.name === tableCheck.name);\n            });\n\n            if (oldChecks.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old check constraint: ${oldChecks.map(check => `\"${check.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropCheckConstraints(table, oldChecks);\n        }\n    }\n\n    protected async dropCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const compositeUniques = table.uniques.filter(tableUnique => {\n                return tableUnique.columnNames.length > 1 && !metadata.uniques.find(uniqueMetadata => uniqueMetadata.name === tableUnique.name);\n            });\n\n            if (compositeUniques.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old unique constraint: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropUniqueConstraints(table, compositeUniques);\n        }\n    }\n\n    protected async dropOldExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const oldExclusions = table.exclusions.filter(tableExclusion => {\n                return !metadata.exclusions.find(exclusionMetadata => exclusionMetadata.name === tableExclusion.name);\n            });\n\n            if (oldExclusions.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping old exclusion constraint: ${oldExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} from table \"${table.name}\"`);\n            await this.queryRunner.dropExclusionConstraints(table, oldExclusions);\n        }\n    }\n\n    /**\n     * Creates tables that do not exist in the database yet.\n     * New tables are created without foreign and primary keys.\n     * Primary key only can be created in conclusion with auto generated column.\n     */\n    protected async createNewTables(): Promise<void> {\n        const currentSchema = await this.queryRunner.getCurrentSchema();\n        for (const metadata of this.entityToSyncMetadatas) {\n            // check if table does not exist yet\n            const existTable = this.queryRunner.loadedTables.find(table => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                let schema = metadata.schema || (<SqlServerDriver|PostgresDriver|SapDriver>this.connection.driver).options.schema;\n                // if schema is default db schema (e.g. \"public\" in PostgreSQL), skip it.\n                schema = schema === currentSchema ? undefined : schema;\n                const fullTableName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n\n                return table.name === fullTableName;\n            });\n            if (existTable)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`creating a new table: ${metadata.tablePath}`);\n\n            // create a new table and sync it in the database\n            const table = Table.create(metadata, this.connection.driver);\n            await this.queryRunner.createTable(table, false, false);\n            this.queryRunner.loadedTables.push(table);\n        }\n    }\n\n    protected async createViews(): Promise<void> {\n        for (const metadata of this.viewEntityToSyncMetadatas) {\n            // check if view does not exist yet\n            const existView = this.queryRunner.loadedViews.find(view => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver>this.connection.driver).options.schema;\n                const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression!(this.connection).getQuery();\n                return view.name === fullViewName && viewExpression === metadataExpression;\n            });\n            if (existView)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`creating a new view: ${metadata.tablePath}`);\n\n            // create a new view and sync it in the database\n            const view = View.create(metadata, this.connection.driver);\n            await this.queryRunner.createView(view);\n            this.queryRunner.loadedViews.push(view);\n        }\n    }\n\n    protected async dropOldViews(): Promise<void> {\n        const droppedViews: Set<View> = new Set();\n        for (const view of this.queryRunner.loadedViews) {\n            const existViewMetadata = this.viewEntityToSyncMetadatas.find(metadata => {\n                const database = metadata.database && metadata.database !== this.connection.driver.database ? metadata.database : undefined;\n                const schema = metadata.schema || (<SqlServerDriver|PostgresDriver>this.connection.driver).options.schema;\n                const fullViewName = this.connection.driver.buildTableName(metadata.tableName, schema, database);\n                const viewExpression = typeof view.expression === \"string\" ? view.expression.trim() : view.expression(this.connection).getQuery();\n                const metadataExpression = typeof metadata.expression === \"string\" ? metadata.expression.trim() : metadata.expression!(this.connection).getQuery();\n                return view.name === fullViewName && viewExpression === metadataExpression;\n            });\n\n            if (existViewMetadata)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`dropping an old view: ${view.name}`);\n\n            // drop an old view\n            await this.queryRunner.dropView(view);\n            droppedViews.add(view);\n        }\n        this.queryRunner.loadedViews = this.queryRunner.loadedViews.filter(view => !droppedViews.has(view));\n    }\n\n    /**\n     * Drops all columns that exist in the table, but does not exist in the metadata (left old).\n     * We drop their keys too, since it should be safe.\n     */\n    protected async dropRemovedColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            // find columns that exist in the database but does not exist in the metadata\n            const droppedTableColumns = table.columns.filter(tableColumn => {\n                return !metadata.columns.find(columnMetadata => columnMetadata.databaseName === tableColumn.name);\n            });\n            if (droppedTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`columns dropped in ${table.name}: ` + droppedTableColumns.map(column => column.name).join(\", \"));\n\n            // drop columns from the database\n            await this.queryRunner.dropColumns(table, droppedTableColumns);\n        }\n    }\n\n    /**\n     * Adds columns from metadata which does not exist in the table.\n     * Columns are created without keys.\n     */\n    protected async addNewColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            // find which columns are new\n            const newColumnMetadatas = metadata.columns.filter(columnMetadata => {\n                return !table.columns.find(tableColumn => tableColumn.name === columnMetadata.databaseName);\n            });\n            if (newColumnMetadatas.length === 0)\n                continue;\n\n            // create columns in the database\n            const newTableColumnOptions = this.metadataColumnsToTableColumnOptions(newColumnMetadatas);\n            const newTableColumns = newTableColumnOptions.map(option => new TableColumn(option));\n\n            if (newTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`new columns added: ` + newColumnMetadatas.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.addColumns(table, newTableColumns);\n        }\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    protected async updatePrimaryKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const primaryMetadataColumns = metadata.columns.filter(column => column.isPrimary);\n            const primaryTableColumns = table.columns.filter(column => column.isPrimary);\n            if (primaryTableColumns.length !== primaryMetadataColumns.length && primaryMetadataColumns.length > 1) {\n                const changedPrimaryColumns = primaryMetadataColumns.map(primaryMetadataColumn => {\n                    return new TableColumn(TableUtils.createTableColumnOptions(primaryMetadataColumn, this.connection.driver));\n                });\n                await this.queryRunner.updatePrimaryKeys(table, changedPrimaryColumns);\n            }\n        }\n    }\n\n    /**\n     * Update all exist columns which metadata has changed.\n     * Still don't create keys. Also we don't touch foreign keys of the changed columns.\n     */\n    protected async updateExistColumns(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const changedColumns = this.connection.driver.findChangedColumns(table.columns, metadata.columns);\n            if (changedColumns.length === 0)\n                continue;\n\n            // drop all foreign keys that point to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnReferencedForeignKeys(metadata.tablePath, changedColumn.databaseName);\n            }\n\n            // drop all composite indices related to this column\n            for (const changedColumn of changedColumns) {\n                await this.dropColumnCompositeIndices(metadata.tablePath, changedColumn.databaseName);\n            }\n\n            // drop all composite uniques related to this column\n            // Mysql does not support unique constraints.\n            if (!(this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)) {\n                for (const changedColumn of changedColumns) {\n                    await this.dropColumnCompositeUniques(metadata.tablePath, changedColumn.databaseName);\n                }\n            }\n\n            // generate a map of new/old columns\n            const newAndOldTableColumns = changedColumns.map(changedColumn => {\n                const oldTableColumn = table.columns.find(column => column.name === changedColumn.databaseName)!;\n                const newTableColumnOptions = TableUtils.createTableColumnOptions(changedColumn, this.connection.driver);\n                const newTableColumn = new TableColumn(newTableColumnOptions);\n\n                return {\n                    oldColumn: oldTableColumn,\n                    newColumn: newTableColumn\n                };\n            });\n\n            if (newAndOldTableColumns.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`columns changed in \"${table.name}\". updating: ` + changedColumns.map(column => column.databaseName).join(\", \"));\n            await this.queryRunner.changeColumns(table, newAndOldTableColumns);\n        }\n    }\n\n    /**\n     * Creates composite indices which are missing in db yet.\n     */\n    protected async createNewIndices(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newIndices = metadata.indices\n                .filter(indexMetadata => !table.indices.find(tableIndex => tableIndex.name === indexMetadata.name) && indexMetadata.synchronize === true)\n                .map(indexMetadata => TableIndex.create(indexMetadata));\n\n            if (newIndices.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new indices ${newIndices.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createIndices(table, newIndices);\n        }\n    }\n\n    protected async createNewChecks(): Promise<void> {\n        // Mysql does not support check constraints\n        if (this.connection.driver instanceof MysqlDriver || this.connection.driver instanceof AuroraDataApiDriver)\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newChecks = metadata.checks\n                .filter(checkMetadata => !table.checks.find(tableCheck => tableCheck.name === checkMetadata.name))\n                .map(checkMetadata => TableCheck.create(checkMetadata));\n\n            if (newChecks.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new check constraints: ${newChecks.map(index => `\"${index.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createCheckConstraints(table, newChecks);\n        }\n    }\n\n    /**\n     * Creates composite uniques which are missing in db yet.\n     */\n    protected async createCompositeUniqueConstraints(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const compositeUniques = metadata.uniques\n                .filter(uniqueMetadata => uniqueMetadata.columns.length > 1 && !table.uniques.find(tableUnique => tableUnique.name === uniqueMetadata.name))\n                .map(uniqueMetadata => TableUnique.create(uniqueMetadata));\n\n            if (compositeUniques.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new unique constraints: ${compositeUniques.map(unique => `\"${unique.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createUniqueConstraints(table, compositeUniques);\n        }\n    }\n\n    /**\n     * Creates exclusions which are missing in db yet.\n     */\n    protected async createNewExclusions(): Promise<void> {\n        // Only PostgreSQL supports exclusion constraints\n        if (!(this.connection.driver instanceof PostgresDriver))\n            return;\n\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newExclusions = metadata.exclusions\n            .filter(exclusionMetadata => !table.exclusions.find(tableExclusion => tableExclusion.name === exclusionMetadata.name))\n            .map(exclusionMetadata => TableExclusion.create(exclusionMetadata));\n\n            if (newExclusions.length === 0)\n                continue;\n\n            this.connection.logger.logSchemaBuild(`adding new exclusion constraints: ${newExclusions.map(exclusion => `\"${exclusion.name}\"`).join(\", \")} in table \"${table.name}\"`);\n            await this.queryRunner.createExclusionConstraints(table, newExclusions);\n        }\n    }\n\n    /**\n     * Creates foreign keys which does not exist in the table yet.\n     */\n    protected async createForeignKeys(): Promise<void> {\n        for (const metadata of this.entityToSyncMetadatas) {\n            const table = this.queryRunner.loadedTables.find(table => table.name === metadata.tablePath);\n            if (!table)\n                continue;\n\n            const newKeys = metadata.foreignKeys\n                .filter(foreignKey => {\n                return !table.foreignKeys.find(dbForeignKey => foreignKeysMatch(dbForeignKey, foreignKey));\n            });\n            if (newKeys.length === 0)\n                continue;\n\n            const dbForeignKeys = newKeys.map(foreignKeyMetadata => TableForeignKey.create(foreignKeyMetadata));\n            this.connection.logger.logSchemaBuild(`creating a foreign keys: ${newKeys.map(key => key.name).join(\", \")} on table \"${table.name}\"`);\n            await this.queryRunner.createForeignKeys(table, dbForeignKeys);\n        }\n    }\n\n    /**\n     * Drops all foreign keys where given column of the given table is being used.\n     */\n    protected async dropColumnReferencedForeignKeys(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const tablesWithFK: Table[] = [];\n        const columnForeignKey = table.foreignKeys.find(foreignKey => foreignKey.columnNames.indexOf(columnName) !== -1);\n        if (columnForeignKey) {\n            const clonedTable = table.clone();\n            clonedTable.foreignKeys = [columnForeignKey];\n            tablesWithFK.push(clonedTable);\n            table.removeForeignKey(columnForeignKey);\n        }\n\n        this.queryRunner.loadedTables.forEach(loadedTable => {\n            const dependForeignKeys = loadedTable.foreignKeys.filter(foreignKey => {\n                return foreignKey.referencedTableName === tablePath && foreignKey.referencedColumnNames.indexOf(columnName) !== -1;\n            });\n\n            if (dependForeignKeys.length > 0) {\n                const clonedTable = loadedTable.clone();\n                clonedTable.foreignKeys = dependForeignKeys;\n                tablesWithFK.push(clonedTable);\n                dependForeignKeys.forEach(dependForeignKey => loadedTable.removeForeignKey(dependForeignKey));\n            }\n        });\n\n        if (tablesWithFK.length > 0) {\n            for (const tableWithFK of tablesWithFK) {\n                this.connection.logger.logSchemaBuild(`dropping related foreign keys of ${tableWithFK.name}: ${tableWithFK.foreignKeys.map(foreignKey => foreignKey.name).join(\", \")}`);\n                await this.queryRunner.dropForeignKeys(tableWithFK, tableWithFK.foreignKeys);\n            }\n        }\n    }\n\n    /**\n     * Drops all composite indices, related to given column.\n     */\n    protected async dropColumnCompositeIndices(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const relatedIndices = table.indices.filter(index => index.columnNames.length > 1 && index.columnNames.indexOf(columnName) !== -1);\n        if (relatedIndices.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related indices of \"${tablePath}\".\"${columnName}\": ${relatedIndices.map(index => index.name).join(\", \")}`);\n        await this.queryRunner.dropIndices(table, relatedIndices);\n    }\n\n    /**\n     * Drops all composite uniques, related to given column.\n     */\n    protected async dropColumnCompositeUniques(tablePath: string, columnName: string): Promise<void> {\n        const table = this.queryRunner.loadedTables.find(table => table.name === tablePath);\n        if (!table)\n            return;\n\n        const relatedUniques = table.uniques.filter(unique => unique.columnNames.length > 1 && unique.columnNames.indexOf(columnName) !== -1);\n        if (relatedUniques.length === 0)\n            return;\n\n        this.connection.logger.logSchemaBuild(`dropping related unique constraints of \"${tablePath}\".\"${columnName}\": ${relatedUniques.map(unique => unique.name).join(\", \")}`);\n        await this.queryRunner.dropUniqueConstraints(table, relatedUniques);\n    }\n\n    /**\n     * Creates new columns from the given column metadatas.\n     */\n    protected metadataColumnsToTableColumnOptions(columns: ColumnMetadata[]): TableColumnOptions[] {\n        return columns.map(columnMetadata => TableUtils.createTableColumnOptions(columnMetadata, this.connection.driver));\n    }\n\n    /**\n     * Creates typeorm service table for storing user defined Views.\n     */\n    protected async createTypeormMetadataTable() {\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        const typeormMetadataTable = this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n\n        await this.queryRunner.createTable(new Table(\n            {\n                name: typeormMetadataTable,\n                columns: [\n                    {\n                        name: \"type\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataType}),\n                        isNullable: false\n                    },\n                    {\n                        name: \"database\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataDatabase}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"schema\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataSchema}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"table\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataTable}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"name\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataName}),\n                        isNullable: true\n                    },\n                    {\n                        name: \"value\",\n                        type: this.connection.driver.normalizeType({type: this.connection.driver.mappedDataTypes.metadataValue}),\n                        isNullable: true\n                    },\n                ]\n            },\n        ), true);\n    }\n\n}\n\nfunction foreignKeysMatch(\n    tableForeignKey: TableForeignKey, metadataForeignKey: ForeignKeyMetadata\n): boolean {\n    return (tableForeignKey.name === metadataForeignKey.name)\n        && (tableForeignKey.referencedTableName === metadataForeignKey.referencedTablePath);\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}