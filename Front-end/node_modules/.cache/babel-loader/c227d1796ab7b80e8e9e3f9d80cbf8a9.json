{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../\";\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\n\nexport function PrimaryGeneratedColumn(strategyOrOptions, maybeOptions) {\n  // normalize parameters\n  var options = {};\n  var strategy;\n\n  if (strategyOrOptions) {\n    if (typeof strategyOrOptions === \"string\") strategy = strategyOrOptions;\n\n    if (strategyOrOptions instanceof Object) {\n      strategy = \"increment\";\n      Object.assign(options, strategyOrOptions);\n    }\n  } else {\n    strategy = \"increment\";\n  }\n\n  if (maybeOptions instanceof Object) Object.assign(options, maybeOptions);\n  return function (object, propertyName) {\n    // if column type is not explicitly set then determine it based on generation strategy\n    if (!options.type) {\n      if (strategy === \"increment\") {\n        options.type = Number;\n      } else if (strategy === \"uuid\") {\n        options.type = \"uuid\";\n      } else if (strategy === \"rowid\") {\n        options.type = \"int\";\n      }\n    } // explicitly set a primary and generated to column options\n\n\n    options.primary = true; // register column metadata args\n\n    getMetadataArgsStorage().columns.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      mode: \"regular\",\n      options: options\n    }); // register generated metadata args\n\n    getMetadataArgsStorage().generations.push({\n      target: object.constructor,\n      propertyName: propertyName,\n      strategy: strategy\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/columns/PrimaryGeneratedColumn.ts"],"names":[],"mappings":"AAAA,SAAuB,sBAAvB,QAAoD,QAApD;AA8BA;;;;AAIG;;AACH,OAAM,SAAU,sBAAV,CAAiC,iBAAjC,EACiC,YADjC,EACsH;AAExH;AACA,MAAM,OAAO,GAAkB,EAA/B;AACA,MAAI,QAAJ;;AACA,MAAI,iBAAJ,EAAuB;AACnB,QAAI,OAAO,iBAAP,KAA6B,QAAjC,EACI,QAAQ,GAAG,iBAAX;;AAEJ,QAAI,iBAAiB,YAAY,MAAjC,EAAyC;AACrC,MAAA,QAAQ,GAAG,WAAX;AACA,MAAA,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,iBAAvB;AACH;AACJ,GARD,MAQO;AACH,IAAA,QAAQ,GAAG,WAAX;AACH;;AACD,MAAI,YAAY,YAAY,MAA5B,EACI,MAAM,CAAC,MAAP,CAAc,OAAd,EAAuB,YAAvB;AAEJ,SAAO,UAAU,MAAV,EAA0B,YAA1B,EAA8C;AAEjD;AACA,QAAI,CAAC,OAAO,CAAC,IAAb,EAAmB;AACf,UAAI,QAAQ,KAAK,WAAjB,EAA8B;AAC1B,QAAA,OAAO,CAAC,IAAR,GAAe,MAAf;AACH,OAFD,MAEO,IAAI,QAAQ,KAAK,MAAjB,EAAyB;AAC5B,QAAA,OAAO,CAAC,IAAR,GAAe,MAAf;AACH,OAFM,MAEA,IAAI,QAAQ,KAAK,OAAjB,EAA0B;AAC7B,QAAA,OAAO,CAAC,IAAR,GAAe,KAAf;AACH;AACJ,KAXgD,CAajD;;;AACA,IAAA,OAAO,CAAC,OAAR,GAAkB,IAAlB,CAdiD,CAgBjD;;AACA,IAAA,sBAAsB,GAAG,OAAzB,CAAiC,IAAjC,CAAsC;AAClC,MAAA,MAAM,EAAE,MAAM,CAAC,WADmB;AAElC,MAAA,YAAY,EAAE,YAFoB;AAGlC,MAAA,IAAI,EAAE,SAH4B;AAIlC,MAAA,OAAO,EAAE;AAJyB,KAAtC,EAjBiD,CAwBjD;;AACA,IAAA,sBAAsB,GAAG,WAAzB,CAAqC,IAArC,CAA0C;AACtC,MAAA,MAAM,EAAE,MAAM,CAAC,WADuB;AAEtC,MAAA,YAAY,EAAE,YAFwB;AAGtC,MAAA,QAAQ,EAAE;AAH4B,KAA1C;AAKH,GA9BD;AA+BH","sourcesContent":["import {ColumnOptions, getMetadataArgsStorage} from \"../../\";\nimport {PrimaryGeneratedColumnNumericOptions} from \"../options/PrimaryGeneratedColumnNumericOptions\";\nimport {PrimaryGeneratedColumnUUIDOptions} from \"../options/PrimaryGeneratedColumnUUIDOptions\";\nimport {GeneratedMetadataArgs} from \"../../metadata-args/GeneratedMetadataArgs\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(options: PrimaryGeneratedColumnNumericOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"increment\", options?: PrimaryGeneratedColumnNumericOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"uuid\", options?: PrimaryGeneratedColumnUUIDOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"rowid\", options?: PrimaryGeneratedColumnUUIDOptions): PropertyDecorator;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n */\nexport function PrimaryGeneratedColumn(strategyOrOptions?: \"increment\"|\"uuid\"|\"rowid\"|PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions,\n                                       maybeOptions?: PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions): PropertyDecorator {\n\n    // normalize parameters\n    const options: ColumnOptions = {};\n    let strategy: \"increment\"|\"uuid\"|\"rowid\";\n    if (strategyOrOptions) {\n        if (typeof strategyOrOptions === \"string\")\n            strategy = strategyOrOptions as \"increment\"|\"uuid\"|\"rowid\";\n\n        if (strategyOrOptions instanceof Object) {\n            strategy = \"increment\";\n            Object.assign(options, strategyOrOptions);\n        }\n    } else {\n        strategy = \"increment\";\n    }\n    if (maybeOptions instanceof Object)\n        Object.assign(options, maybeOptions);\n\n    return function (object: Object, propertyName: string) {\n\n        // if column type is not explicitly set then determine it based on generation strategy\n        if (!options.type) {\n            if (strategy === \"increment\") {\n                options.type = Number;\n            } else if (strategy === \"uuid\") {\n                options.type = \"uuid\";\n            } else if (strategy === \"rowid\") {\n                options.type = \"int\";\n            }\n        }\n\n        // explicitly set a primary and generated to column options\n        options.primary = true;\n\n        // register column metadata args\n        getMetadataArgsStorage().columns.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options\n        });\n\n        // register generated metadata args\n        getMetadataArgsStorage().generations.push({\n            target: object.constructor,\n            propertyName: propertyName,\n            strategy: strategy\n        } as GeneratedMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}