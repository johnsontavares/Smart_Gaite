{"ast":null,"code":"/**\n * Find Operator used in Find Conditions.\n */\nvar FindOperator =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function FindOperator(type, value, useParameter, multipleParameters, getSql, objectLiteralParameters) {\n    if (useParameter === void 0) {\n      useParameter = true;\n    }\n\n    if (multipleParameters === void 0) {\n      multipleParameters = false;\n    }\n\n    this._type = type;\n    this._value = value;\n    this._useParameter = useParameter;\n    this._multipleParameters = multipleParameters;\n    this._getSql = getSql;\n    this._objectLiteralParameters = objectLiteralParameters;\n  }\n\n  Object.defineProperty(FindOperator.prototype, \"useParameter\", {\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get: function () {\n      if (this._value instanceof FindOperator) return this._value.useParameter;\n      return this._useParameter;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FindOperator.prototype, \"multipleParameters\", {\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get: function () {\n      if (this._value instanceof FindOperator) return this._value.multipleParameters;\n      return this._multipleParameters;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FindOperator.prototype, \"type\", {\n    /**\n     * Gets the Type of this FindOperator\n     */\n    get: function () {\n      return this._type;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FindOperator.prototype, \"value\", {\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get: function () {\n      if (this._value instanceof FindOperator) return this._value.value;\n      return this._value;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FindOperator.prototype, \"objectLiteralParameters\", {\n    /**\n     * Gets ObjectLiteral parameters.\n     */\n    get: function () {\n      if (this._value instanceof FindOperator) return this._value.objectLiteralParameters;\n      return this._objectLiteralParameters;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FindOperator.prototype, \"child\", {\n    /**\n     * Gets the child FindOperator if it exists\n     */\n    get: function () {\n      if (this._value instanceof FindOperator) return this._value;\n      return undefined;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FindOperator.prototype, \"getSql\", {\n    /**\n     * Gets the SQL generator\n     */\n    get: function () {\n      if (this._value instanceof FindOperator) return this._value.getSql;\n      return this._getSql;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return FindOperator;\n}();\n\nexport { FindOperator };","map":{"version":3,"sources":["../browser/src/find-options/FindOperator.ts"],"names":[],"mappings":"AAKA;;AAEG;AACH,IAAA,YAAA;AAAA;AAAA,YAAA;AAoCI;AACA;AACA;AAEA,WAAA,YAAA,CACI,IADJ,EAEI,KAFJ,EAGI,YAHJ,EAII,kBAJJ,EAKI,MALJ,EAMI,uBANJ,EAM2C;AAHvC,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,IAAA;AAA4B;;AAC5B,QAAA,kBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,kBAAA,GAAA,KAAA;AAAmC;;AAInC,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,aAAL,GAAqB,YAArB;AACA,SAAK,mBAAL,GAA2B,kBAA3B;AACA,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,wBAAL,GAAgC,uBAAhC;AACH;;AAUD,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,cAAJ,EAAgB;AARhB;AACA;AACA;;AAEA;;;AAGG;SACH,YAAA;AACI,UAAI,KAAK,MAAL,YAAuB,YAA3B,EACI,OAAO,KAAK,MAAL,CAAY,YAAnB;AAEJ,aAAO,KAAK,aAAZ;AACH,KALe;qBAAA;;AAAA,GAAhB;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,oBAAJ,EAAsB;AAJtB;;;AAGG;SACH,YAAA;AACI,UAAI,KAAK,MAAL,YAAuB,YAA3B,EACI,OAAO,KAAK,MAAL,CAAY,kBAAnB;AAEJ,aAAO,KAAK,mBAAZ;AACH,KALqB;qBAAA;;AAAA,GAAtB;AAUA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,MAAJ,EAAQ;AAHR;;AAEG;SACH,YAAA;AACI,aAAO,KAAK,KAAZ;AACH,KAFO;qBAAA;;AAAA,GAAR;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAHT;;AAEG;SACH,YAAA;AACI,UAAI,KAAK,MAAL,YAAuB,YAA3B,EACI,OAAO,KAAK,MAAL,CAAY,KAAnB;AAEJ,aAAO,KAAK,MAAZ;AACH,KALQ;qBAAA;;AAAA,GAAT;AAUA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,yBAAJ,EAA2B;AAH3B;;AAEG;SACH,YAAA;AACI,UAAI,KAAK,MAAL,YAAuB,YAA3B,EACI,OAAO,KAAK,MAAL,CAAY,uBAAnB;AAEJ,aAAO,KAAK,wBAAZ;AACH,KAL0B;qBAAA;;AAAA,GAA3B;AAWA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,OAAJ,EAAS;AAHT;;AAEG;SACH,YAAA;AACI,UAAI,KAAK,MAAL,YAAuB,YAA3B,EACI,OAAO,KAAK,MAAZ;AAEJ,aAAO,SAAP;AACH,KALQ;qBAAA;;AAAA,GAAT;AAUA,EAAA,MAAA,CAAA,cAAA,CAAI,YAAA,CAAA,SAAJ,EAAI,QAAJ,EAAU;AAHV;;AAEG;SACH,YAAA;AACI,UAAI,KAAK,MAAL,YAAuB,YAA3B,EACI,OAAO,KAAK,MAAL,CAAY,MAAnB;AAEJ,aAAO,KAAK,OAAZ;AACH,KALS;qBAAA;;AAAA,GAAV;AAMJ,SAAA,YAAA;AAAC,CAjID,EAAA","sourcesContent":["import {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {FindOperatorType} from \"./FindOperatorType\";\n\ntype SqlGeneratorType = (aliasPath: string) => string;\n\n/**\n * Find Operator used in Find Conditions.\n */\nexport class FindOperator<T> {\n\n    // -------------------------------------------------------------------------\n    // Private Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Operator type.\n     */\n    private _type: FindOperatorType;\n\n    /**\n     * Parameter value.\n     */\n    private _value: T|FindOperator<T>;\n\n    /**\n     * ObjectLiteral parameters.\n     */\n    private _objectLiteralParameters: ObjectLiteral|undefined;\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     */\n    private _useParameter: boolean;\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     */\n    private _multipleParameters: boolean;\n\n    /**\n     * SQL generator\n     */\n    private _getSql: SqlGeneratorType|undefined;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(\n        type: FindOperatorType,\n        value: T|FindOperator<T>,\n        useParameter: boolean = true,\n        multipleParameters: boolean = false,\n        getSql?: SqlGeneratorType,\n        objectLiteralParameters?: ObjectLiteral,\n    ) {\n        this._type = type;\n        this._value = value;\n        this._useParameter = useParameter;\n        this._multipleParameters = multipleParameters;\n        this._getSql = getSql; \n        this._objectLiteralParameters = objectLiteralParameters;\n    }\n\n    // -------------------------------------------------------------------------\n    // Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if parameter is used or not for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get useParameter(): boolean {\n        if (this._value instanceof FindOperator)\n            return this._value.useParameter;\n\n        return this._useParameter;\n    }\n\n    /**\n     * Indicates if multiple parameters must be used for this operator.\n     * Extracts final value if value is another find operator.\n     */\n    get multipleParameters(): boolean {\n        if (this._value instanceof FindOperator)\n            return this._value.multipleParameters;\n\n        return this._multipleParameters;\n    }\n\n    /**\n     * Gets the Type of this FindOperator\n     */\n    get type(): string {\n        return this._type;\n    }\n\n    /**\n     * Gets the final value needs to be used as parameter value.\n     */\n    get value(): T {\n        if (this._value instanceof FindOperator)\n            return this._value.value;\n\n        return this._value;\n    }\n\n    /**\n     * Gets ObjectLiteral parameters.\n     */\n    get objectLiteralParameters(): ObjectLiteral|undefined {\n        if (this._value instanceof FindOperator)\n            return this._value.objectLiteralParameters;\n\n        return this._objectLiteralParameters;\n    }\n\n\n    /**\n     * Gets the child FindOperator if it exists\n     */\n    get child(): FindOperator<T>|undefined {\n        if (this._value instanceof FindOperator)\n            return this._value;\n\n        return undefined;\n    }\n\n    /**\n     * Gets the SQL generator\n     */\n    get getSql(): SqlGeneratorType|undefined {\n        if (this._value instanceof FindOperator)\n            return this._value.getSql;\n\n        return this._getSql;\n    }\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}