{"ast":null,"code":"import { __awaiter, __generator, __read, __spreadArray, __values } from \"tslib\";\nimport { Query } from \"../driver/Query\";\nimport { SqlInMemory } from \"../driver/SqlInMemory\";\n\nvar BaseQueryRunner =\n/** @class */\nfunction () {\n  function BaseQueryRunner() {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    this.isReleased = false;\n    /**\n     * Indicates if transaction is in progress.\n     */\n\n    this.isTransactionActive = false;\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n\n    this.data = {};\n    /**\n     * All synchronized tables in the database.\n     */\n\n    this.loadedTables = [];\n    /**\n     * All synchronized views in the database.\n     */\n\n    this.loadedViews = [];\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n\n    this.sqlMemoryMode = false;\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n\n    this.sqlInMemory = new SqlInMemory();\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Loads given table's data from the database.\n   */\n\n\n  BaseQueryRunner.prototype.getTable = function (tablePath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this.loadTables([tablePath])];\n\n          case 1:\n            _a.loadedTables = _b.sent();\n            return [2\n            /*return*/\n            , this.loadedTables.length > 0 ? this.loadedTables[0] : undefined];\n        }\n      });\n    });\n  };\n  /**\n   * Loads all tables (with given names) from the database.\n   */\n\n\n  BaseQueryRunner.prototype.getTables = function (tableNames) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this.loadTables(tableNames)];\n\n          case 1:\n            _a.loadedTables = _b.sent();\n            return [2\n            /*return*/\n            , this.loadedTables];\n        }\n      });\n    });\n  };\n  /**\n   * Loads given view's data from the database.\n   */\n\n\n  BaseQueryRunner.prototype.getView = function (viewPath) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this.loadViews([viewPath])];\n\n          case 1:\n            _a.loadedViews = _b.sent();\n            return [2\n            /*return*/\n            , this.loadedViews.length > 0 ? this.loadedViews[0] : undefined];\n        }\n      });\n    });\n  };\n  /**\n   * Loads given view's data from the database.\n   */\n\n\n  BaseQueryRunner.prototype.getViews = function (viewPaths) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this;\n            return [4\n            /*yield*/\n            , this.loadViews(viewPaths)];\n\n          case 1:\n            _a.loadedViews = _b.sent();\n            return [2\n            /*return*/\n            , this.loadedViews];\n        }\n      });\n    });\n  };\n  /**\n   * Enables special query runner mode in which sql queries won't be executed,\n   * instead they will be memorized into a special variable inside query runner.\n   * You can get memorized sql using getMemorySql() method.\n   */\n\n\n  BaseQueryRunner.prototype.enableSqlMemory = function () {\n    this.sqlInMemory = new SqlInMemory();\n    this.sqlMemoryMode = true;\n  };\n  /**\n   * Disables special query runner mode in which sql queries won't be executed\n   * started by calling enableSqlMemory() method.\n   *\n   * Previously memorized sql will be flushed.\n   */\n\n\n  BaseQueryRunner.prototype.disableSqlMemory = function () {\n    this.sqlInMemory = new SqlInMemory();\n    this.sqlMemoryMode = false;\n  };\n  /**\n   * Flushes all memorized sqls.\n   */\n\n\n  BaseQueryRunner.prototype.clearSqlMemory = function () {\n    this.sqlInMemory = new SqlInMemory();\n  };\n  /**\n   * Gets sql stored in the memory. Parameters in the sql are already replaced.\n   */\n\n\n  BaseQueryRunner.prototype.getMemorySql = function () {\n    return this.sqlInMemory;\n  };\n  /**\n   * Executes up sql queries.\n   */\n\n\n  BaseQueryRunner.prototype.executeMemoryUpSql = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, query, parameters, e_1_1;\n\n      var e_1, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 5, 6, 7]);\n\n            _a = __values(this.sqlInMemory.upQueries), _b = _a.next();\n            _e.label = 1;\n\n          case 1:\n            if (!!_b.done) return [3\n            /*break*/\n            , 4];\n            _c = _b.value, query = _c.query, parameters = _c.parameters;\n            return [4\n            /*yield*/\n            , this.query(query, parameters)];\n\n          case 2:\n            _e.sent();\n\n            _e.label = 3;\n\n          case 3:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_1_1 = _e.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Executes down sql queries.\n   */\n\n\n  BaseQueryRunner.prototype.executeMemoryDownSql = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, query, parameters, e_2_1;\n\n      var e_2, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            _e.trys.push([0, 5, 6, 7]);\n\n            _a = __values(this.sqlInMemory.downQueries.reverse()), _b = _a.next();\n            _e.label = 1;\n\n          case 1:\n            if (!!_b.done) return [3\n            /*break*/\n            , 4];\n            _c = _b.value, query = _c.query, parameters = _c.parameters;\n            return [4\n            /*yield*/\n            , this.query(query, parameters)];\n\n          case 2:\n            _e.sent();\n\n            _e.label = 3;\n\n          case 3:\n            _b = _a.next();\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [3\n            /*break*/\n            , 7];\n\n          case 5:\n            e_2_1 = _e.sent();\n            e_2 = {\n              error: e_2_1\n            };\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            try {\n              if (_b && !_b.done && (_d = _a.return)) _d.call(_a);\n            } finally {\n              if (e_2) throw e_2.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 7:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Gets view from previously loaded views, otherwise loads it from database.\n   */\n\n\n  BaseQueryRunner.prototype.getCachedView = function (viewName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var view, foundViews;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            view = this.loadedViews.find(function (view) {\n              return view.name === viewName;\n            });\n            if (view) return [2\n            /*return*/\n            , view];\n            return [4\n            /*yield*/\n            , this.loadViews([viewName])];\n\n          case 1:\n            foundViews = _a.sent();\n\n            if (foundViews.length > 0) {\n              this.loadedViews.push(foundViews[0]);\n              return [2\n              /*return*/\n              , foundViews[0]];\n            } else {\n              throw new Error(\"View \\\"\" + viewName + \"\\\" does not exist.\");\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Gets table from previously loaded tables, otherwise loads it from database.\n   */\n\n\n  BaseQueryRunner.prototype.getCachedTable = function (tableName) {\n    return __awaiter(this, void 0, void 0, function () {\n      var table, foundTables;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            table = this.loadedTables.find(function (table) {\n              return table.name === tableName;\n            });\n            if (table) return [2\n            /*return*/\n            , table];\n            return [4\n            /*yield*/\n            , this.loadTables([tableName])];\n\n          case 1:\n            foundTables = _a.sent();\n\n            if (foundTables.length > 0) {\n              this.loadedTables.push(foundTables[0]);\n              return [2\n              /*return*/\n              , foundTables[0]];\n            } else {\n              throw new Error(\"Table \\\"\" + tableName + \"\\\" does not exist.\");\n            }\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Replaces loaded table with given changed table.\n   */\n\n\n  BaseQueryRunner.prototype.replaceCachedTable = function (table, changedTable) {\n    var foundTable = this.loadedTables.find(function (loadedTable) {\n      return loadedTable.name === table.name;\n    });\n\n    if (foundTable) {\n      foundTable.name = changedTable.name;\n      foundTable.columns = changedTable.columns;\n      foundTable.indices = changedTable.indices;\n      foundTable.foreignKeys = changedTable.foreignKeys;\n      foundTable.uniques = changedTable.uniques;\n      foundTable.checks = changedTable.checks;\n      foundTable.justCreated = changedTable.justCreated;\n      foundTable.engine = changedTable.engine;\n    }\n  };\n\n  BaseQueryRunner.prototype.getTypeormMetadataTableName = function () {\n    var options = this.connection.driver.options;\n    return this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n  };\n  /**\n   * Checks if at least one of column properties was changed.\n   * Does not checks column type, length and autoincrement, because these properties changes separately.\n   */\n\n\n  BaseQueryRunner.prototype.isColumnChanged = function (oldColumn, newColumn, checkDefault, checkComment) {\n    // this logs need to debug issues in column change detection. Do not delete it!\n    // console.log(\"charset ---------------\");\n    // console.log(oldColumn.charset !== newColumn.charset);\n    // console.log(oldColumn.charset, newColumn.charset);\n    // console.log(\"collation ---------------\");\n    // console.log(oldColumn.collation !== newColumn.collation);\n    // console.log(oldColumn.collation, newColumn.collation);\n    // console.log(\"precision ---------------\");\n    // console.log(oldColumn.precision !== newColumn.precision);\n    // console.log(oldColumn.precision, newColumn.precision);\n    // console.log(\"scale ---------------\");\n    // console.log(oldColumn.scale !== newColumn.scale);\n    // console.log(oldColumn.scale, newColumn.scale);\n    // console.log(\"default ---------------\");\n    // console.log((checkDefault && oldColumn.default !== newColumn.default));\n    // console.log(oldColumn.default, newColumn.default);\n    // console.log(\"isNullable ---------------\");\n    // console.log(oldColumn.isNullable !== newColumn.isNullable);\n    // console.log(oldColumn.isNullable, newColumn.isNullable);\n    // console.log(\"comment ---------------\");\n    // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n    // console.log(oldColumn.comment, newColumn.comment);\n    // console.log(\"enum ---------------\");\n    // console.log(oldColumn.enum !== newColumn.enum);\n    // console.log(oldColumn.enum, newColumn.enum);\n    return oldColumn.charset !== newColumn.charset || oldColumn.collation !== newColumn.collation || oldColumn.precision !== newColumn.precision || oldColumn.scale !== newColumn.scale || oldColumn.width !== newColumn.width // MySQL only\n    || oldColumn.zerofill !== newColumn.zerofill // MySQL only\n    || oldColumn.unsigned !== newColumn.unsigned // MySQL only\n    || oldColumn.asExpression !== newColumn.asExpression // MySQL only\n    || checkDefault && oldColumn.default !== newColumn.default || oldColumn.onUpdate !== newColumn.onUpdate // MySQL only\n    || oldColumn.isNullable !== newColumn.isNullable || checkComment && oldColumn.comment !== newColumn.comment || oldColumn.enum !== newColumn.enum;\n  };\n  /**\n   * Checks if column length is by default.\n   */\n\n\n  BaseQueryRunner.prototype.isDefaultColumnLength = function (table, column, length) {\n    // if table have metadata, we check if length is specified in column metadata\n    if (this.connection.hasMetadata(table.name)) {\n      var metadata = this.connection.getMetadata(table.name);\n      var columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n      if (columnMetadata && columnMetadata.length) return false;\n    }\n\n    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].length) {\n      return this.connection.driver.dataTypeDefaults[column.type].length.toString() === length.toString();\n    }\n\n    return false;\n  };\n  /**\n   * Checks if column precision is by default.\n   */\n\n\n  BaseQueryRunner.prototype.isDefaultColumnPrecision = function (table, column, precision) {\n    // if table have metadata, we check if length is specified in column metadata\n    if (this.connection.hasMetadata(table.name)) {\n      var metadata = this.connection.getMetadata(table.name);\n      var columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n      if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined) return false;\n    }\n\n    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].precision !== null && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined) return this.connection.driver.dataTypeDefaults[column.type].precision === precision;\n    return false;\n  };\n  /**\n   * Checks if column scale is by default.\n   */\n\n\n  BaseQueryRunner.prototype.isDefaultColumnScale = function (table, column, scale) {\n    // if table have metadata, we check if length is specified in column metadata\n    if (this.connection.hasMetadata(table.name)) {\n      var metadata = this.connection.getMetadata(table.name);\n      var columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n      if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined) return false;\n    }\n\n    if (this.connection.driver.dataTypeDefaults && this.connection.driver.dataTypeDefaults[column.type] && this.connection.driver.dataTypeDefaults[column.type].scale !== null && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined) return this.connection.driver.dataTypeDefaults[column.type].scale === scale;\n    return false;\n  };\n  /**\n   * Executes sql used special for schema build.\n   */\n\n\n  BaseQueryRunner.prototype.executeQueries = function (upQueries, downQueries) {\n    return __awaiter(this, void 0, void 0, function () {\n      var upQueries_1, upQueries_1_1, _a, query, parameters, e_3_1;\n\n      var _b, _c, e_3, _d;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (upQueries instanceof Query) upQueries = [upQueries];\n            if (downQueries instanceof Query) downQueries = [downQueries];\n\n            (_b = this.sqlInMemory.upQueries).push.apply(_b, __spreadArray([], __read(upQueries)));\n\n            (_c = this.sqlInMemory.downQueries).push.apply(_c, __spreadArray([], __read(downQueries))); // if sql-in-memory mode is enabled then simply store sql in memory and return\n\n\n            if (this.sqlMemoryMode === true) return [2\n            /*return*/\n            , Promise.resolve()];\n            _e.label = 1;\n\n          case 1:\n            _e.trys.push([1, 6, 7, 8]);\n\n            upQueries_1 = __values(upQueries), upQueries_1_1 = upQueries_1.next();\n            _e.label = 2;\n\n          case 2:\n            if (!!upQueries_1_1.done) return [3\n            /*break*/\n            , 5];\n            _a = upQueries_1_1.value, query = _a.query, parameters = _a.parameters;\n            return [4\n            /*yield*/\n            , this.query(query, parameters)];\n\n          case 3:\n            _e.sent();\n\n            _e.label = 4;\n\n          case 4:\n            upQueries_1_1 = upQueries_1.next();\n            return [3\n            /*break*/\n            , 2];\n\n          case 5:\n            return [3\n            /*break*/\n            , 8];\n\n          case 6:\n            e_3_1 = _e.sent();\n            e_3 = {\n              error: e_3_1\n            };\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            try {\n              if (upQueries_1_1 && !upQueries_1_1.done && (_d = upQueries_1.return)) _d.call(upQueries_1);\n            } finally {\n              if (e_3) throw e_3.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 8:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return BaseQueryRunner;\n}();\n\nexport { BaseQueryRunner };","map":{"version":3,"sources":["../browser/src/query-runner/BaseQueryRunner.ts"],"names":[],"mappings":"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","sourcesContent":["import {PostgresConnectionOptions} from \"../driver/postgres/PostgresConnectionOptions\";\nimport {Query} from \"../driver/Query\";\nimport {SqlInMemory} from \"../driver/SqlInMemory\";\nimport {SqlServerConnectionOptions} from \"../driver/sqlserver/SqlServerConnectionOptions\";\nimport {View} from \"../schema-builder/view/View\";\nimport {Connection} from \"../connection/Connection\";\nimport {Table} from \"../schema-builder/table/Table\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {TableColumn} from \"../schema-builder/table/TableColumn\";\nimport {Broadcaster} from \"../subscriber/Broadcaster\";\nimport {ReplicationMode} from \"../driver/types/ReplicationMode\";\n\nexport abstract class BaseQueryRunner {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by this query runner.\n     */\n    connection: Connection;\n\n    /**\n     * Entity manager working only with current query runner.\n     */\n    manager: EntityManager;\n\n    /**\n     * Indicates if connection for this query runner is released.\n     * Once its released, query runner cannot run queries anymore.\n     */\n    isReleased = false;\n\n    /**\n     * Indicates if transaction is in progress.\n     */\n    isTransactionActive = false;\n\n    /**\n     * Stores temporarily user data.\n     * Useful for sharing data with subscribers.\n     */\n    data = {};\n\n    /**\n     * All synchronized tables in the database.\n     */\n    loadedTables: Table[] = [];\n\n    /**\n     * All synchronized views in the database.\n     */\n    loadedViews: View[] = [];\n\n    /**\n     * Broadcaster used on this query runner to broadcast entity events.\n     */\n    broadcaster: Broadcaster;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Real database connection from a connection pool used to perform queries.\n     */\n    protected databaseConnection: any;\n\n    /**\n     * Indicates if special query runner mode in which sql queries won't be executed is enabled.\n     */\n    protected sqlMemoryMode: boolean = false;\n\n    /**\n     * Sql-s stored if \"sql in memory\" mode is enabled.\n     */\n    protected sqlInMemory: SqlInMemory = new SqlInMemory();\n\n    /**\n     * Mode in which query runner executes.\n     * Used for replication.\n     * If replication is not setup its value is ignored.\n     */\n    protected mode: ReplicationMode;\n\n    // -------------------------------------------------------------------------\n    // Public Abstract Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Executes a given SQL query.\n     */\n    abstract query(query: string, parameters?: any[]): Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Protected Abstract Methods\n    // -------------------------------------------------------------------------\n\n    protected abstract loadTables(tablePaths: string[]): Promise<Table[]>;\n\n    protected abstract loadViews(tablePaths: string[]): Promise<View[]>;\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads given table's data from the database.\n     */\n    async getTable(tablePath: string): Promise<Table|undefined> {\n        this.loadedTables = await this.loadTables([tablePath]);\n        return this.loadedTables.length > 0 ? this.loadedTables[0] : undefined;\n    }\n\n    /**\n     * Loads all tables (with given names) from the database.\n     */\n    async getTables(tableNames: string[]): Promise<Table[]> {\n        this.loadedTables = await this.loadTables(tableNames);\n        return this.loadedTables;\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getView(viewPath: string): Promise<View|undefined> {\n        this.loadedViews = await this.loadViews([viewPath]);\n        return this.loadedViews.length > 0 ? this.loadedViews[0] : undefined;\n    }\n\n    /**\n     * Loads given view's data from the database.\n     */\n    async getViews(viewPaths: string[]): Promise<View[]> {\n        this.loadedViews = await this.loadViews(viewPaths);\n        return this.loadedViews;\n    }\n\n    /**\n     * Enables special query runner mode in which sql queries won't be executed,\n     * instead they will be memorized into a special variable inside query runner.\n     * You can get memorized sql using getMemorySql() method.\n     */\n    enableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = true;\n    }\n\n    /**\n     * Disables special query runner mode in which sql queries won't be executed\n     * started by calling enableSqlMemory() method.\n     *\n     * Previously memorized sql will be flushed.\n     */\n    disableSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n        this.sqlMemoryMode = false;\n    }\n\n    /**\n     * Flushes all memorized sqls.\n     */\n    clearSqlMemory(): void {\n        this.sqlInMemory = new SqlInMemory();\n    }\n\n    /**\n     * Gets sql stored in the memory. Parameters in the sql are already replaced.\n     */\n    getMemorySql(): SqlInMemory {\n        return this.sqlInMemory;\n    }\n\n    /**\n     * Executes up sql queries.\n     */\n    async executeMemoryUpSql(): Promise<void> {\n        for (const {query, parameters} of this.sqlInMemory.upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n\n    /**\n     * Executes down sql queries.\n     */\n    async executeMemoryDownSql(): Promise<void> {\n        for (const {query, parameters} of this.sqlInMemory.downQueries.reverse()) {\n            await this.query(query, parameters);\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets view from previously loaded views, otherwise loads it from database.\n     */\n    protected async getCachedView(viewName: string): Promise<View> {\n        const view = this.loadedViews.find(view => view.name === viewName);\n        if (view) return view;\n\n        const foundViews = await this.loadViews([viewName]);\n        if (foundViews.length > 0) {\n            this.loadedViews.push(foundViews[0]);\n            return foundViews[0];\n        } else {\n            throw new Error(`View \"${viewName}\" does not exist.`);\n        }\n    }\n\n    /**\n     * Gets table from previously loaded tables, otherwise loads it from database.\n     */\n    protected async getCachedTable(tableName: string): Promise<Table> {\n        const table = this.loadedTables.find(table => table.name === tableName);\n        if (table) return table;\n\n        const foundTables = await this.loadTables([tableName]);\n        if (foundTables.length > 0) {\n            this.loadedTables.push(foundTables[0]);\n            return foundTables[0];\n        } else {\n            throw new Error(`Table \"${tableName}\" does not exist.`);\n        }\n    }\n\n    /**\n     * Replaces loaded table with given changed table.\n     */\n    protected replaceCachedTable(table: Table, changedTable: Table): void {\n        const foundTable = this.loadedTables.find(loadedTable => loadedTable.name === table.name);\n        if (foundTable) {\n            foundTable.name = changedTable.name;\n            foundTable.columns = changedTable.columns;\n            foundTable.indices = changedTable.indices;\n            foundTable.foreignKeys = changedTable.foreignKeys;\n            foundTable.uniques = changedTable.uniques;\n            foundTable.checks = changedTable.checks;\n            foundTable.justCreated = changedTable.justCreated;\n            foundTable.engine = changedTable.engine;\n        }\n    }\n\n    protected getTypeormMetadataTableName(): string {\n        const options = <SqlServerConnectionOptions|PostgresConnectionOptions>this.connection.driver.options;\n        return this.connection.driver.buildTableName(\"typeorm_metadata\", options.schema, options.database);\n    }\n\n    /**\n     * Checks if at least one of column properties was changed.\n     * Does not checks column type, length and autoincrement, because these properties changes separately.\n     */\n    protected isColumnChanged(oldColumn: TableColumn, newColumn: TableColumn, checkDefault?: boolean, checkComment?: boolean): boolean {\n        // this logs need to debug issues in column change detection. Do not delete it!\n\n        // console.log(\"charset ---------------\");\n        // console.log(oldColumn.charset !== newColumn.charset);\n        // console.log(oldColumn.charset, newColumn.charset);\n        // console.log(\"collation ---------------\");\n        // console.log(oldColumn.collation !== newColumn.collation);\n        // console.log(oldColumn.collation, newColumn.collation);\n        // console.log(\"precision ---------------\");\n        // console.log(oldColumn.precision !== newColumn.precision);\n        // console.log(oldColumn.precision, newColumn.precision);\n        // console.log(\"scale ---------------\");\n        // console.log(oldColumn.scale !== newColumn.scale);\n        // console.log(oldColumn.scale, newColumn.scale);\n        // console.log(\"default ---------------\");\n        // console.log((checkDefault && oldColumn.default !== newColumn.default));\n        // console.log(oldColumn.default, newColumn.default);\n        // console.log(\"isNullable ---------------\");\n        // console.log(oldColumn.isNullable !== newColumn.isNullable);\n        // console.log(oldColumn.isNullable, newColumn.isNullable);\n        // console.log(\"comment ---------------\");\n        // console.log((checkComment && oldColumn.comment !== newColumn.comment));\n        // console.log(oldColumn.comment, newColumn.comment);\n        // console.log(\"enum ---------------\");\n        // console.log(oldColumn.enum !== newColumn.enum);\n        // console.log(oldColumn.enum, newColumn.enum);\n\n        return oldColumn.charset !== newColumn.charset\n            || oldColumn.collation !== newColumn.collation\n            || oldColumn.precision !== newColumn.precision\n            || oldColumn.scale !== newColumn.scale\n            || oldColumn.width !== newColumn.width // MySQL only\n            || oldColumn.zerofill !== newColumn.zerofill // MySQL only\n            || oldColumn.unsigned !== newColumn.unsigned // MySQL only\n            || oldColumn.asExpression !== newColumn.asExpression // MySQL only\n            || (checkDefault && oldColumn.default !== newColumn.default)\n            || oldColumn.onUpdate !== newColumn.onUpdate // MySQL only\n            || oldColumn.isNullable !== newColumn.isNullable\n            || (checkComment && oldColumn.comment !== newColumn.comment)\n            || oldColumn.enum !== newColumn.enum;\n    }\n\n    /**\n     * Checks if column length is by default.\n     */\n    protected isDefaultColumnLength(table: Table, column: TableColumn, length: string): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.length)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].length) {\n            return this.connection.driver.dataTypeDefaults[column.type].length!.toString() === length.toString();\n        }\n\n        return false;\n    }\n\n    /**\n     * Checks if column precision is by default.\n     */\n    protected isDefaultColumnPrecision(table: Table, column: TableColumn, precision: number): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.precision !== null && columnMetadata.precision !== undefined)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== null\n            && this.connection.driver.dataTypeDefaults[column.type].precision !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].precision === precision;\n\n        return false;\n    }\n\n    /**\n     * Checks if column scale is by default.\n     */\n    protected isDefaultColumnScale(table: Table, column: TableColumn, scale: number): boolean {\n        // if table have metadata, we check if length is specified in column metadata\n        if (this.connection.hasMetadata(table.name)) {\n            const metadata = this.connection.getMetadata(table.name);\n            const columnMetadata = metadata.findColumnWithDatabaseName(column.name);\n            if (columnMetadata && columnMetadata.scale !== null && columnMetadata.scale !== undefined)\n                return false;\n        }\n\n        if (this.connection.driver.dataTypeDefaults\n            && this.connection.driver.dataTypeDefaults[column.type]\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== null\n            && this.connection.driver.dataTypeDefaults[column.type].scale !== undefined)\n            return this.connection.driver.dataTypeDefaults[column.type].scale === scale;\n\n        return false;\n    }\n\n    /**\n     * Executes sql used special for schema build.\n     */\n    protected async executeQueries(upQueries: Query|Query[], downQueries: Query|Query[]): Promise<void> {\n        if (upQueries instanceof Query)\n            upQueries = [upQueries];\n        if (downQueries instanceof Query)\n            downQueries = [downQueries];\n\n        this.sqlInMemory.upQueries.push(...upQueries);\n        this.sqlInMemory.downQueries.push(...downQueries);\n\n        // if sql-in-memory mode is enabled then simply store sql in memory and return\n        if (this.sqlMemoryMode === true)\n            return Promise.resolve() as Promise<any>;\n\n        for (const {query, parameters} of upQueries) {\n            await this.query(query, parameters);\n        }\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}