{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { ExpoQueryRunner } from \"./ExpoQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\n\nvar ExpoDriver =\n/** @class */\nfunction (_super) {\n  __extends(ExpoDriver, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function ExpoDriver(connection) {\n    var _this = _super.call(this, connection) || this;\n\n    _this.database = _this.options.database; // validate options to make sure everything is set\n\n    if (!_this.options.database) throw new DriverOptionNotSetError(\"database\");\n    if (!_this.options.driver) throw new DriverOptionNotSetError(\"driver\"); // load sqlite package\n\n    _this.sqlite = _this.options.driver;\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Closes connection with database.\n   */\n\n\n  ExpoDriver.prototype.disconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (ok, fail) {\n          try {\n            _this.queryRunner = undefined;\n\n            _this.databaseConnection._db.close();\n\n            _this.databaseConnection = undefined;\n            ok();\n          } catch (error) {\n            fail(error);\n          }\n        })];\n      });\n    });\n  };\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  ExpoDriver.prototype.createQueryRunner = function (mode) {\n    if (!this.queryRunner) this.queryRunner = new ExpoQueryRunner(this);\n    return this.queryRunner;\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   */\n\n\n  ExpoDriver.prototype.createDatabaseConnection = function () {\n    var _this = this;\n\n    return new Promise(function (ok, fail) {\n      try {\n        var databaseConnection_1 = _this.sqlite.openDatabase(_this.options.database);\n        /*\n        // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete work with sqlite.\n        */\n\n\n        databaseConnection_1.transaction(function (tsx) {\n          tsx.executeSql(\"PRAGMA foreign_keys = ON;\", [], function (t, result) {\n            ok(databaseConnection_1);\n          }, function (t, err) {\n            fail({\n              transaction: t,\n              error: err\n            });\n          });\n        }, function (err) {\n          fail(err);\n        });\n      } catch (error) {\n        fail(error);\n      }\n    });\n  };\n\n  return ExpoDriver;\n}(AbstractSqliteDriver);\n\nexport { ExpoDriver };","map":{"version":3,"sources":["../browser/src/driver/expo/ExpoDriver.ts"],"names":[],"mappings":";AAAA,SAAQ,oBAAR,QAAmC,yCAAnC;AAEA,SAAQ,eAAR,QAA8B,mBAA9B;AAGA,SAAQ,uBAAR,QAAsC,qCAAtC;;AAGA,IAAA,UAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAAgC,EAAA,SAAA,CAAA,UAAA,EAAA,MAAA,CAAA,CAAhC,CAGI;AACA;AACA;;;AAEA,WAAA,UAAA,CAAY,UAAZ,EAAkC;AAAlC,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,UAAN,KAAiB,IADrB;;AAGI,IAAA,KAAI,CAAC,QAAL,GAAgB,KAAI,CAAC,OAAL,CAAa,QAA7B,CAH8B,CAK9B;;AACA,QAAI,CAAC,KAAI,CAAC,OAAL,CAAa,QAAlB,EACI,MAAM,IAAI,uBAAJ,CAA4B,UAA5B,CAAN;AAEJ,QAAI,CAAC,KAAI,CAAC,OAAL,CAAa,MAAlB,EACI,MAAM,IAAI,uBAAJ,CAA4B,QAA5B,CAAN,CAV0B,CAY9B;;AACA,IAAA,KAAI,CAAC,MAAL,GAAc,KAAI,CAAC,OAAL,CAAa,MAA3B;;AACH,GArBL,CAwBI;AACA;AACA;;AAEA;;AAEG;;;AACG,EAAA,UAAA,CAAA,SAAA,CAAA,UAAA,GAAN,YAAA;;;;;AACI,eAAA,CAAA;AAAA;AAAA,UAAO,IAAI,OAAJ,CAAkB,UAAC,EAAD,EAAK,IAAL,EAAS;AAC9B,cAAI;AACA,YAAA,KAAI,CAAC,WAAL,GAAmB,SAAnB;;AACA,YAAA,KAAI,CAAC,kBAAL,CAAwB,GAAxB,CAA4B,KAA5B;;AACA,YAAA,KAAI,CAAC,kBAAL,GAA0B,SAA1B;AACA,YAAA,EAAE;AACL,WALD,CAKE,OAAO,KAAP,EAAc;AACZ,YAAA,IAAI,CAAC,KAAD,CAAJ;AACH;AACJ,SATM,CAAP,CAAA;;;AAUH,GAXK;AAaN;;AAEG;;;AACH,EAAA,UAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,IAAlB,EAAuC;AACnC,QAAI,CAAC,KAAK,WAAV,EACI,KAAK,WAAL,GAAmB,IAAI,eAAJ,CAAoB,IAApB,CAAnB;AAEJ,WAAO,KAAK,WAAZ;AACH,GALD,CA/CJ,CAsDI;AACA;AACA;;AAEA;;AAEG;;;AACO,EAAA,UAAA,CAAA,SAAA,CAAA,wBAAA,GAAV,YAAA;AAAA,QAAA,KAAA,GAAA,IAAA;;AACI,WAAO,IAAI,OAAJ,CAAkB,UAAC,EAAD,EAAK,IAAL,EAAS;AAC9B,UAAI;AACA,YAAM,oBAAkB,GAAG,KAAI,CAAC,MAAL,CAAY,YAAZ,CAAyB,KAAI,CAAC,OAAL,CAAa,QAAtC,CAA3B;AACA;;;AAGE;;;AACF,QAAA,oBAAkB,CAAC,WAAnB,CAA+B,UAAC,GAAD,EAAS;AACpC,UAAA,GAAG,CAAC,UAAJ,CAAe,2BAAf,EAA4C,EAA5C,EAAgD,UAAC,CAAD,EAAS,MAAT,EAAoB;AAChE,YAAA,EAAE,CAAC,oBAAD,CAAF;AACH,WAFD,EAEG,UAAC,CAAD,EAAS,GAAT,EAAiB;AAChB,YAAA,IAAI,CAAC;AAAC,cAAA,WAAW,EAAE,CAAd;AAAiB,cAAA,KAAK,EAAE;AAAxB,aAAD,CAAJ;AACH,WAJD;AAKH,SAND,EAMG,UAAC,GAAD,EAAS;AACR,UAAA,IAAI,CAAC,GAAD,CAAJ;AACH,SARD;AASH,OAfD,CAeE,OAAO,KAAP,EAAc;AACZ,QAAA,IAAI,CAAC,KAAD,CAAJ;AACH;AACJ,KAnBM,CAAP;AAoBH,GArBS;;AAsBd,SAAA,UAAA;AAAC,CAnFD,CAAgC,oBAAhC,CAAA","sourcesContent":["import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {ExpoConnectionOptions} from \"./ExpoConnectionOptions\";\nimport {ExpoQueryRunner} from \"./ExpoQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\nexport class ExpoDriver extends AbstractSqliteDriver {\n    options: ExpoConnectionOptions;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.database = this.options.database;\n\n        // validate options to make sure everything is set\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        if (!this.options.driver)\n            throw new DriverOptionNotSetError(\"driver\");\n\n        // load sqlite package\n        this.sqlite = this.options.driver;\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            try {\n                this.queryRunner = undefined;\n                this.databaseConnection._db.close();\n                this.databaseConnection = undefined;\n                ok();\n            } catch (error) {\n                fail(error);\n            }\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner)\n            this.queryRunner = new ExpoQueryRunner(this);\n\n        return this.queryRunner;\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            try {\n                const databaseConnection = this.sqlite.openDatabase(this.options.database);\n                /*\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                */\n                databaseConnection.transaction((tsx: any) => {\n                    tsx.executeSql(`PRAGMA foreign_keys = ON;`, [], (t: any, result: any) => {\n                        ok(databaseConnection);\n                    }, (t: any, err: any) => {\n                        fail({transaction: t, error: err});\n                    });\n                }, (err: any) => {\n                    fail(err);\n                });\n            } catch (error) {\n                fail(error);\n            }\n        });\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}