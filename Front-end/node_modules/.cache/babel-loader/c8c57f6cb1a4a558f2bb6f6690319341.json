{"ast":null,"code":"import { MetadataUtils } from \"../metadata-builder/MetadataUtils\";\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\n\nvar MetadataArgsStorage =\n/** @class */\nfunction () {\n  function MetadataArgsStorage() {\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n    this.tables = [];\n    this.trees = [];\n    this.entityRepositories = [];\n    this.transactionEntityManagers = [];\n    this.transactionRepositories = [];\n    this.namingStrategies = [];\n    this.entitySubscribers = [];\n    this.indices = [];\n    this.uniques = [];\n    this.checks = [];\n    this.exclusions = [];\n    this.columns = [];\n    this.generations = [];\n    this.relations = [];\n    this.joinColumns = [];\n    this.joinTables = [];\n    this.entityListeners = [];\n    this.relationCounts = [];\n    this.relationIds = [];\n    this.embeddeds = [];\n    this.inheritances = [];\n    this.discriminatorValues = [];\n  }\n\n  MetadataArgsStorage.prototype.filterTables = function (target) {\n    return this.filterByTarget(this.tables, target);\n  };\n\n  MetadataArgsStorage.prototype.filterColumns = function (target) {\n    return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);\n  };\n\n  MetadataArgsStorage.prototype.findGenerated = function (target, propertyName) {\n    return this.generations.find(function (generated) {\n      return (Array.isArray(target) ? target.indexOf(generated.target) !== -1 : generated.target === target) && generated.propertyName === propertyName;\n    });\n  };\n\n  MetadataArgsStorage.prototype.findTree = function (target) {\n    return this.trees.find(function (tree) {\n      return Array.isArray(target) ? target.indexOf(tree.target) !== -1 : tree.target === target;\n    });\n  };\n\n  MetadataArgsStorage.prototype.filterRelations = function (target) {\n    return this.filterByTargetAndWithoutDuplicateRelationProperties(this.relations, target);\n  };\n\n  MetadataArgsStorage.prototype.filterRelationIds = function (target) {\n    return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);\n  };\n\n  MetadataArgsStorage.prototype.filterRelationCounts = function (target) {\n    return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);\n  };\n\n  MetadataArgsStorage.prototype.filterIndices = function (target) {\n    // todo: implement parent-entity overrides?\n    return this.indices.filter(function (index) {\n      return Array.isArray(target) ? target.indexOf(index.target) !== -1 : index.target === target;\n    });\n  };\n\n  MetadataArgsStorage.prototype.filterUniques = function (target) {\n    return this.uniques.filter(function (unique) {\n      return Array.isArray(target) ? target.indexOf(unique.target) !== -1 : unique.target === target;\n    });\n  };\n\n  MetadataArgsStorage.prototype.filterChecks = function (target) {\n    return this.checks.filter(function (check) {\n      return Array.isArray(target) ? target.indexOf(check.target) !== -1 : check.target === target;\n    });\n  };\n\n  MetadataArgsStorage.prototype.filterExclusions = function (target) {\n    return this.exclusions.filter(function (exclusion) {\n      return Array.isArray(target) ? target.indexOf(exclusion.target) !== -1 : exclusion.target === target;\n    });\n  };\n\n  MetadataArgsStorage.prototype.filterListeners = function (target) {\n    return this.filterByTarget(this.entityListeners, target);\n  };\n\n  MetadataArgsStorage.prototype.filterEmbeddeds = function (target) {\n    return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);\n  };\n\n  MetadataArgsStorage.prototype.findJoinTable = function (target, propertyName) {\n    return this.joinTables.find(function (joinTable) {\n      return joinTable.target === target && joinTable.propertyName === propertyName;\n    });\n  };\n\n  MetadataArgsStorage.prototype.filterJoinColumns = function (target, propertyName) {\n    // todo: implement parent-entity overrides?\n    return this.joinColumns.filter(function (joinColumn) {\n      return joinColumn.target === target && joinColumn.propertyName === propertyName;\n    });\n  };\n\n  MetadataArgsStorage.prototype.filterSubscribers = function (target) {\n    return this.filterByTarget(this.entitySubscribers, target);\n  };\n\n  MetadataArgsStorage.prototype.filterNamingStrategies = function (target) {\n    return this.filterByTarget(this.namingStrategies, target);\n  };\n\n  MetadataArgsStorage.prototype.filterTransactionEntityManagers = function (target, propertyName) {\n    return this.transactionEntityManagers.filter(function (transactionEm) {\n      return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n    });\n  };\n\n  MetadataArgsStorage.prototype.filterTransactionRepository = function (target, propertyName) {\n    return this.transactionRepositories.filter(function (transactionEm) {\n      return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n    });\n  };\n\n  MetadataArgsStorage.prototype.filterSingleTableChildren = function (target) {\n    return this.tables.filter(function (table) {\n      return table.target instanceof Function && target instanceof Function && MetadataUtils.isInherited(table.target, target) && table.type === \"entity-child\";\n    });\n  };\n\n  MetadataArgsStorage.prototype.findInheritanceType = function (target) {\n    return this.inheritances.find(function (inheritance) {\n      return inheritance.target === target;\n    });\n  };\n\n  MetadataArgsStorage.prototype.findDiscriminatorValue = function (target) {\n    return this.discriminatorValues.find(function (discriminatorValue) {\n      return discriminatorValue.target === target;\n    });\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Filters given array by a given target or targets.\n   */\n\n\n  MetadataArgsStorage.prototype.filterByTarget = function (array, target) {\n    return array.filter(function (table) {\n      return Array.isArray(target) ? target.indexOf(table.target) !== -1 : table.target === target;\n    });\n  };\n  /**\n   * Filters given array by a given target or targets and prevents duplicate property names.\n   */\n\n\n  MetadataArgsStorage.prototype.filterByTargetAndWithoutDuplicateProperties = function (array, target) {\n    var newArray = [];\n    array.forEach(function (item) {\n      var sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n\n      if (sameTarget) {\n        if (!newArray.find(function (newItem) {\n          return newItem.propertyName === item.propertyName;\n        })) newArray.push(item);\n      }\n    });\n    return newArray;\n  };\n  /**\n   * Filters given array by a given target or targets and prevents duplicate relation property names.\n   */\n\n\n  MetadataArgsStorage.prototype.filterByTargetAndWithoutDuplicateRelationProperties = function (array, target) {\n    var newArray = [];\n    array.forEach(function (item) {\n      var sameTarget = target instanceof Array ? target.indexOf(item.target) !== -1 : item.target === target;\n\n      if (sameTarget) {\n        var existingIndex = newArray.findIndex(function (newItem) {\n          return newItem.propertyName === item.propertyName;\n        });\n\n        if (target instanceof Array && existingIndex !== -1 && target.indexOf(item.target) < target.indexOf(newArray[existingIndex].target)) {\n          var clone = Object.create(newArray[existingIndex]);\n          clone.type = item.type;\n          newArray[existingIndex] = clone;\n        } else if (existingIndex === -1) {\n          newArray.push(item);\n        }\n      }\n    });\n    return newArray;\n  };\n  /**\n   * Filters given array by a given target or targets and prevents duplicate embedded property names.\n   */\n\n\n  MetadataArgsStorage.prototype.filterByTargetAndWithoutDuplicateEmbeddedProperties = function (array, target) {\n    var newArray = [];\n    array.forEach(function (item) {\n      var sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n\n      if (sameTarget) {\n        var isDuplicateEmbeddedProperty = newArray.find(function (newItem) {\n          return newItem.prefix === item.prefix && newItem.propertyName === item.propertyName;\n        });\n        if (!isDuplicateEmbeddedProperty) newArray.push(item);\n      }\n    });\n    return newArray;\n  };\n\n  return MetadataArgsStorage;\n}();\n\nexport { MetadataArgsStorage };","map":{"version":3,"sources":["../browser/src/metadata-args/MetadataArgsStorage.ts"],"names":[],"mappings":"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","sourcesContent":["import {RelationMetadataArgs} from \"./RelationMetadataArgs\";\nimport {ColumnMetadataArgs} from \"./ColumnMetadataArgs\";\nimport {RelationCountMetadataArgs} from \"./RelationCountMetadataArgs\";\nimport {IndexMetadataArgs} from \"./IndexMetadataArgs\";\nimport {EntityListenerMetadataArgs} from \"./EntityListenerMetadataArgs\";\nimport {TableMetadataArgs} from \"./TableMetadataArgs\";\nimport {NamingStrategyMetadataArgs} from \"./NamingStrategyMetadataArgs\";\nimport {JoinTableMetadataArgs} from \"./JoinTableMetadataArgs\";\nimport {JoinColumnMetadataArgs} from \"./JoinColumnMetadataArgs\";\nimport {EmbeddedMetadataArgs} from \"./EmbeddedMetadataArgs\";\nimport {EntitySubscriberMetadataArgs} from \"./EntitySubscriberMetadataArgs\";\nimport {RelationIdMetadataArgs} from \"./RelationIdMetadataArgs\";\nimport {InheritanceMetadataArgs} from \"./InheritanceMetadataArgs\";\nimport {DiscriminatorValueMetadataArgs} from \"./DiscriminatorValueMetadataArgs\";\nimport {EntityRepositoryMetadataArgs} from \"./EntityRepositoryMetadataArgs\";\nimport {TransactionEntityMetadataArgs} from \"./TransactionEntityMetadataArgs\";\nimport {TransactionRepositoryMetadataArgs} from \"./TransactionRepositoryMetadataArgs\";\nimport {MetadataUtils} from \"../metadata-builder/MetadataUtils\";\nimport {GeneratedMetadataArgs} from \"./GeneratedMetadataArgs\";\nimport {TreeMetadataArgs} from \"./TreeMetadataArgs\";\nimport {UniqueMetadataArgs} from \"./UniqueMetadataArgs\";\nimport {CheckMetadataArgs} from \"./CheckMetadataArgs\";\nimport {ExclusionMetadataArgs} from \"./ExclusionMetadataArgs\";\n\n/**\n * Storage all metadatas args of all available types: tables, columns, subscribers, relations, etc.\n * Each metadata args represents some specifications of what it represents.\n * MetadataArgs used to create a real Metadata objects.\n */\nexport class MetadataArgsStorage {\n\n    // -------------------------------------------------------------------------\n    // Properties\n    // -------------------------------------------------------------------------\n\n    readonly tables: TableMetadataArgs[] = [];\n    readonly trees: TreeMetadataArgs[] = [];\n    readonly entityRepositories: EntityRepositoryMetadataArgs[] = [];\n    readonly transactionEntityManagers: TransactionEntityMetadataArgs[] = [];\n    readonly transactionRepositories: TransactionRepositoryMetadataArgs[] = [];\n    readonly namingStrategies: NamingStrategyMetadataArgs[] = [];\n    readonly entitySubscribers: EntitySubscriberMetadataArgs[] = [];\n    readonly indices: IndexMetadataArgs[] = [];\n    readonly uniques: UniqueMetadataArgs[] = [];\n    readonly checks: CheckMetadataArgs[] = [];\n    readonly exclusions: ExclusionMetadataArgs[] = [];\n    readonly columns: ColumnMetadataArgs[] = [];\n    readonly generations: GeneratedMetadataArgs[] = [];\n    readonly relations: RelationMetadataArgs[] = [];\n    readonly joinColumns: JoinColumnMetadataArgs[] = [];\n    readonly joinTables: JoinTableMetadataArgs[] = [];\n    readonly entityListeners: EntityListenerMetadataArgs[] = [];\n    readonly relationCounts: RelationCountMetadataArgs[] = [];\n    readonly relationIds: RelationIdMetadataArgs[] = [];\n    readonly embeddeds: EmbeddedMetadataArgs[] = [];\n    readonly inheritances: InheritanceMetadataArgs[] = [];\n    readonly discriminatorValues: DiscriminatorValueMetadataArgs[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    filterTables(target: Function|string): TableMetadataArgs[];\n    filterTables(target: (Function|string)[]): TableMetadataArgs[];\n    filterTables(target: (Function|string)|(Function|string)[]): TableMetadataArgs[] {\n        return this.filterByTarget(this.tables, target);\n    }\n\n    filterColumns(target: Function|string): ColumnMetadataArgs[];\n    filterColumns(target: (Function|string)[]): ColumnMetadataArgs[];\n    filterColumns(target: (Function|string)|(Function|string)[]): ColumnMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.columns, target);\n    }\n\n    findGenerated(target: Function|string, propertyName: string): GeneratedMetadataArgs|undefined;\n    findGenerated(target: (Function|string)[], propertyName: string): GeneratedMetadataArgs|undefined;\n    findGenerated(target: (Function|string)|(Function|string)[], propertyName: string): GeneratedMetadataArgs|undefined {\n        return this.generations.find(generated => {\n            return (Array.isArray(target) ? target.indexOf(generated.target) !== -1 : generated.target === target) && generated.propertyName === propertyName;\n        });\n    }\n\n    findTree(target: (Function|string)|(Function|string)[]): TreeMetadataArgs|undefined {\n        return this.trees.find(tree => {\n            return (Array.isArray(target) ? target.indexOf(tree.target) !== -1 : tree.target === target);\n        });\n    }\n\n    filterRelations(target: Function|string): RelationMetadataArgs[];\n    filterRelations(target: (Function|string)[]): RelationMetadataArgs[];\n    filterRelations(target: (Function|string)|(Function|string)[]): RelationMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateRelationProperties(this.relations, target);\n    }\n\n    filterRelationIds(target: Function|string): RelationIdMetadataArgs[];\n    filterRelationIds(target: (Function|string)[]): RelationIdMetadataArgs[];\n    filterRelationIds(target: (Function|string)|(Function|string)[]): RelationIdMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationIds, target);\n    }\n\n    filterRelationCounts(target: Function|string): RelationCountMetadataArgs[];\n    filterRelationCounts(target: (Function|string)[]): RelationCountMetadataArgs[];\n    filterRelationCounts(target: (Function|string)|(Function|string)[]): RelationCountMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateProperties(this.relationCounts, target);\n    }\n\n    filterIndices(target: Function|string): IndexMetadataArgs[];\n    filterIndices(target: (Function|string)[]): IndexMetadataArgs[];\n    filterIndices(target: (Function|string)|(Function|string)[]): IndexMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.indices.filter(index => {\n            return Array.isArray(target) ? target.indexOf(index.target) !== -1 : index.target === target;\n        });\n    }\n\n    filterUniques(target: Function|string): UniqueMetadataArgs[];\n    filterUniques(target: (Function|string)[]): UniqueMetadataArgs[];\n    filterUniques(target: (Function|string)|(Function|string)[]): UniqueMetadataArgs[] {\n        return this.uniques.filter(unique => {\n            return Array.isArray(target) ? target.indexOf(unique.target) !== -1 : unique.target === target;\n        });\n    }\n\n    filterChecks(target: Function|string): CheckMetadataArgs[];\n    filterChecks(target: (Function|string)[]): CheckMetadataArgs[];\n    filterChecks(target: (Function|string)|(Function|string)[]): CheckMetadataArgs[] {\n        return this.checks.filter(check => {\n            return Array.isArray(target) ? target.indexOf(check.target) !== -1 : check.target === target;\n        });\n    }\n\n    filterExclusions(target: Function|string): ExclusionMetadataArgs[];\n    filterExclusions(target: (Function|string)[]): ExclusionMetadataArgs[];\n    filterExclusions(target: (Function|string)|(Function|string)[]): ExclusionMetadataArgs[] {\n        return this.exclusions.filter(exclusion => {\n            return Array.isArray(target) ? target.indexOf(exclusion.target) !== -1 : exclusion.target === target;\n        });\n    }\n\n    filterListeners(target: Function|string): EntityListenerMetadataArgs[];\n    filterListeners(target: (Function|string)[]): EntityListenerMetadataArgs[];\n    filterListeners(target: (Function|string)|(Function|string)[]): EntityListenerMetadataArgs[] {\n        return this.filterByTarget(this.entityListeners, target);\n    }\n\n    filterEmbeddeds(target: Function|string): EmbeddedMetadataArgs[];\n    filterEmbeddeds(target: (Function|string)[]): EmbeddedMetadataArgs[];\n    filterEmbeddeds(target: (Function|string)|(Function|string)[]): EmbeddedMetadataArgs[] {\n        return this.filterByTargetAndWithoutDuplicateEmbeddedProperties(this.embeddeds, target);\n    }\n\n    findJoinTable(target: Function|string, propertyName: string): JoinTableMetadataArgs|undefined {\n        return this.joinTables.find(joinTable => {\n            return joinTable.target === target && joinTable.propertyName === propertyName;\n        });\n    }\n\n    filterJoinColumns(target: Function|string, propertyName: string): JoinColumnMetadataArgs[] {\n        // todo: implement parent-entity overrides?\n        return this.joinColumns.filter(joinColumn => {\n            return joinColumn.target === target && joinColumn.propertyName === propertyName;\n        });\n    }\n\n    filterSubscribers(target: Function|string): EntitySubscriberMetadataArgs[];\n    filterSubscribers(target: (Function|string)[]): EntitySubscriberMetadataArgs[];\n    filterSubscribers(target: (Function|string)|(Function|string)[]): EntitySubscriberMetadataArgs[] {\n        return this.filterByTarget(this.entitySubscribers, target);\n    }\n\n    filterNamingStrategies(target: Function|string): NamingStrategyMetadataArgs[];\n    filterNamingStrategies(target: (Function|string)[]): NamingStrategyMetadataArgs[];\n    filterNamingStrategies(target: (Function|string)|(Function|string)[]): NamingStrategyMetadataArgs[] {\n        return this.filterByTarget(this.namingStrategies, target);\n    }\n\n    filterTransactionEntityManagers(target: Function|string, propertyName: string): TransactionEntityMetadataArgs[] {\n        return this.transactionEntityManagers.filter(transactionEm => {\n            return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n        });\n    }\n\n    filterTransactionRepository(target: Function|string, propertyName: string): TransactionRepositoryMetadataArgs[] {\n        return this.transactionRepositories.filter(transactionEm => {\n            return (Array.isArray(target) ? target.indexOf(transactionEm.target) !== -1 : transactionEm.target === target) && transactionEm.methodName === propertyName;\n        });\n    }\n\n    filterSingleTableChildren(target: Function|string): TableMetadataArgs[] {\n        return this.tables.filter(table => {\n            return table.target instanceof Function\n                && target instanceof Function\n                && MetadataUtils.isInherited(table.target, target)\n                && table.type === \"entity-child\";\n        });\n    }\n\n    findInheritanceType(target: Function|string): InheritanceMetadataArgs|undefined {\n        return this.inheritances.find(inheritance => inheritance.target === target);\n    }\n\n    findDiscriminatorValue(target: Function|string): DiscriminatorValueMetadataArgs|undefined {\n        return this.discriminatorValues.find(discriminatorValue => discriminatorValue.target === target);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Filters given array by a given target or targets.\n     */\n    protected filterByTarget<T extends { target: Function|string }>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        return array.filter(table => {\n            return Array.isArray(target) ? target.indexOf(table.target) !== -1 : table.target === target;\n        });\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate property names.\n     */\n    protected filterByTargetAndWithoutDuplicateProperties<T extends { target: Function|string, propertyName: string }>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        const newArray: T[] = [];\n        array.forEach(item => {\n            const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n            if (sameTarget) {\n                if (!newArray.find(newItem => newItem.propertyName === item.propertyName))\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate relation property names.\n     */\n    protected filterByTargetAndWithoutDuplicateRelationProperties<T extends RelationMetadataArgs>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        const newArray: T[] = [];\n        array.forEach(item => {\n            const sameTarget = target instanceof Array ? target.indexOf(item.target) !== -1 : item.target === target;\n            if (sameTarget) {\n                const existingIndex = newArray.findIndex(newItem => newItem.propertyName === item.propertyName);\n                if (target instanceof Array && existingIndex !== -1 && target.indexOf(item.target) < target.indexOf(newArray[existingIndex].target)) {\n                    const clone = Object.create(newArray[existingIndex]);\n                    clone.type = item.type;\n                    newArray[existingIndex] = clone;\n                } else if (existingIndex === -1) {\n                    newArray.push(item);\n                }\n            }\n        });\n        return newArray;\n    }\n\n    /**\n     * Filters given array by a given target or targets and prevents duplicate embedded property names.\n     */\n    protected filterByTargetAndWithoutDuplicateEmbeddedProperties<T extends EmbeddedMetadataArgs>(array: T[], target: (Function|string)|(Function|string)[]): T[] {\n        const newArray: T[] = [];\n        array.forEach(item => {\n            const sameTarget = Array.isArray(target) ? target.indexOf(item.target) !== -1 : item.target === target;\n            if (sameTarget) {\n                const isDuplicateEmbeddedProperty = newArray.find((newItem: EmbeddedMetadataArgs): boolean =>\n                    newItem.prefix === item.prefix && newItem.propertyName === item.propertyName\n                );\n                if (!isDuplicateEmbeddedProperty)\n                    newArray.push(item);\n            }\n        });\n        return newArray;\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}