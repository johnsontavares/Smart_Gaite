{"ast":null,"code":"import { getMetadataArgsStorage } from \"../\";\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can manage some specific entity or just be generic.\n * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.\n */\n\nexport function EntityRepository(entity) {\n  return function (target) {\n    getMetadataArgsStorage().entityRepositories.push({\n      target: target,\n      entity: entity\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/EntityRepository.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAR,QAAqC,KAArC;AAIA;;;;AAIG;;AACH,OAAM,SAAU,gBAAV,CAA2B,MAA3B,EAAgE;AAClE,SAAO,UAAU,MAAV,EAA0B;AAE7B,IAAA,sBAAsB,GAAG,kBAAzB,CAA4C,IAA5C,CAAiD;AAC7C,MAAA,MAAM,EAAE,MADqC;AAE7C,MAAA,MAAM,EAAE;AAFqC,KAAjD;AAIH,GAND;AAOH","sourcesContent":["import {getMetadataArgsStorage} from \"../\";\nimport {EntityRepositoryMetadataArgs} from \"../metadata-args/EntityRepositoryMetadataArgs\";\nimport {EntitySchema} from \"../entity-schema/EntitySchema\";\n\n/**\n * Used to declare a class as a custom repository.\n * Custom repository can manage some specific entity or just be generic.\n * Custom repository optionally can extend AbstractRepository, Repository or TreeRepository.\n */\nexport function EntityRepository(entity?: Function | EntitySchema<any>): ClassDecorator {\n    return function (target: Function) {\n\n        getMetadataArgsStorage().entityRepositories.push({\n            target: target,\n            entity: entity,\n        } as EntityRepositoryMetadataArgs);\n    };\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}