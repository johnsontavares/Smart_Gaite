{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\nimport { AbstractSqliteDriver } from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport { NativescriptQueryRunner } from \"./NativescriptQueryRunner\";\nimport { DriverOptionNotSetError } from \"../../error/DriverOptionNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\n\nvar NativescriptDriver =\n/** @class */\nfunction (_super) {\n  __extends(NativescriptDriver, _super); // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n\n\n  function NativescriptDriver(connection) {\n    var _this = _super.call(this, connection) || this;\n\n    _this.connection = connection;\n    _this.options = connection.options;\n    _this.database = _this.options.database;\n    _this.driver = _this.options.driver; // validate options to make sure everything is set\n\n    if (!_this.options.database) {\n      throw new DriverOptionNotSetError(\"database\");\n    } // load sqlite package\n\n\n    _this.loadDependencies();\n\n    return _this;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Closes connection with database.\n   */\n\n\n  NativescriptDriver.prototype.disconnect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , new Promise(function (ok, fail) {\n          _this.queryRunner = undefined;\n\n          _this.databaseConnection.close().then(ok).catch(fail);\n        })];\n      });\n    });\n  };\n  /**\n   * Creates a query runner used to execute database queries.\n   */\n\n\n  NativescriptDriver.prototype.createQueryRunner = function (mode) {\n    if (!this.queryRunner) {\n      this.queryRunner = new NativescriptQueryRunner(this);\n    }\n\n    return this.queryRunner;\n  };\n\n  NativescriptDriver.prototype.normalizeType = function (column) {\n    if (column.type === Buffer) {\n      return \"blob\";\n    }\n\n    return _super.prototype.normalizeType.call(this, column);\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates connection with the database.\n   */\n\n\n  NativescriptDriver.prototype.createDatabaseConnection = function () {\n    var _this = this;\n\n    return new Promise(function (ok, fail) {\n      var options = Object.assign({}, {\n        readOnly: _this.options.readOnly,\n        key: _this.options.key,\n        multithreading: _this.options.multithreading,\n        migrate: _this.options.migrate,\n        iosFlags: _this.options.iosFlags,\n        androidFlags: _this.options.androidFlags\n      }, _this.options.extra || {});\n      new _this.sqlite(_this.options.database, options, function (err, db) {\n        if (err) return fail(err); // use object mode to work with TypeORM\n\n        db.resultType(_this.sqlite.RESULTSASOBJECT); // we need to enable foreign keys in sqlite to make sure all foreign key related features\n        // working properly. this also makes onDelete work with sqlite.\n\n        db.execSQL(\"PRAGMA foreign_keys = ON;\", [], function (err, result) {\n          if (err) return fail(err); // We are all set\n\n          ok(db);\n        });\n      });\n    });\n  };\n  /**\n   * If driver dependency is not given explicitly, then try to load it via \"require\".\n   */\n\n\n  NativescriptDriver.prototype.loadDependencies = function () {\n    this.sqlite = this.driver;\n\n    if (!this.driver) {\n      throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n    }\n  };\n\n  return NativescriptDriver;\n}(AbstractSqliteDriver);\n\nexport { NativescriptDriver };","map":{"version":3,"sources":["../browser/src/driver/nativescript/NativescriptDriver.ts"],"names":[],"mappings":"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","sourcesContent":["import {AbstractSqliteDriver} from \"../sqlite-abstract/AbstractSqliteDriver\";\nimport {NativescriptConnectionOptions} from \"./NativescriptConnectionOptions\";\nimport {NativescriptQueryRunner} from \"./NativescriptQueryRunner\";\nimport {QueryRunner} from \"../../query-runner/QueryRunner\";\nimport {Connection} from \"../../connection/Connection\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {ReplicationMode} from \"../types/ReplicationMode\";\n\n/**\n * Organizes communication with sqlite DBMS within Nativescript.\n */\nexport class NativescriptDriver extends AbstractSqliteDriver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: NativescriptConnectionOptions;\n\n    /**\n     * Nativescript driver module\n     * this is most likely `nativescript-sqlite`\n     * but user can pass his own\n     */\n    driver: any;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        super(connection);\n\n        this.connection = connection;\n        this.options = connection.options as NativescriptConnectionOptions;\n        this.database = this.options.database;\n        this.driver = this.options.driver;\n\n        // validate options to make sure everything is set\n        if (!this.options.database) {\n            throw new DriverOptionNotSetError(\"database\");\n        }\n\n        // load sqlite package\n        this.loadDependencies();\n    }\n\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Closes connection with database.\n     */\n    async disconnect(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.queryRunner = undefined;\n            this.databaseConnection.close().then(ok).catch(fail);\n        });\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode): QueryRunner {\n        if (!this.queryRunner) {\n            this.queryRunner = new NativescriptQueryRunner(this);\n        }\n\n        return this.queryRunner;\n    }\n\n    normalizeType(column: { type?: ColumnType, length?: number | string, precision?: number|null, scale?: number }): string {\n        if ((column.type as any) === Buffer) {\n            return \"blob\";\n        }\n\n        return super.normalizeType(column);\n    }\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates connection with the database.\n     */\n    protected createDatabaseConnection() {\n        return new Promise<void>((ok, fail) => {\n            const options = Object.assign({}, {\n                readOnly: this.options.readOnly,\n                key: this.options.key,\n                multithreading: this.options.multithreading,\n                migrate: this.options.migrate,\n                iosFlags: this.options.iosFlags,\n                androidFlags: this.options.androidFlags,\n            }, this.options.extra || {});\n\n            new this.sqlite(this.options.database, options, (err: Error, db: any): any => {\n                if (err) return fail(err);\n\n                // use object mode to work with TypeORM\n                db.resultType(this.sqlite.RESULTSASOBJECT);\n\n\n                // we need to enable foreign keys in sqlite to make sure all foreign key related features\n                // working properly. this also makes onDelete work with sqlite.\n                db.execSQL(`PRAGMA foreign_keys = ON;`, [], (err: Error, result: any): any => {\n                    if (err) return fail(err);\n                    // We are all set\n                    ok(db);\n                });\n            });\n        });\n    }\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        this.sqlite = this.driver;\n        if (!this.driver) {\n            throw new DriverPackageNotInstalledError(\"Nativescript\", \"nativescript-sqlite\");\n        }\n    }\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}