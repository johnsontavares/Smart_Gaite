{"ast":null,"code":"import { __extends } from \"tslib\";\n\nvar DataTypeNotSupportedError =\n/** @class */\nfunction (_super) {\n  __extends(DataTypeNotSupportedError, _super);\n\n  function DataTypeNotSupportedError(column, dataType, database) {\n    var _this = _super.call(this) || this;\n\n    _this.name = \"DataTypeNotSupportedError\";\n    Object.setPrototypeOf(_this, DataTypeNotSupportedError.prototype);\n    var type = typeof dataType === \"string\" ? dataType : dataType.name;\n    _this.message = \"Data type \\\"\" + type + \"\\\" in \\\"\" + column.entityMetadata.targetName + \".\" + column.propertyName + \"\\\" is not supported by \\\"\" + database + \"\\\" database.\";\n    return _this;\n  }\n\n  return DataTypeNotSupportedError;\n}(Error);\n\nexport { DataTypeNotSupportedError };","map":{"version":3,"sources":["../browser/src/error/DataTypeNotSupportedError.ts"],"names":[],"mappings":";;AAIA,IAAA,yBAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA+C,EAAA,SAAA,CAAA,yBAAA,EAAA,MAAA,CAAA;;AAG3C,WAAA,yBAAA,CAAY,MAAZ,EAAoC,QAApC,EAA0D,QAA1D,EAAiF;AAAjF,QAAA,KAAA,GACI,MAAA,CAAA,IAAA,CAAA,IAAA,KAAO,IADX;;AAFA,IAAA,KAAA,CAAA,IAAA,GAAO,2BAAP;AAII,IAAA,MAAM,CAAC,cAAP,CAAsB,KAAtB,EAA4B,yBAAyB,CAAC,SAAtD;AACA,QAAM,IAAI,GAAG,OAAO,QAAP,KAAoB,QAApB,GAA+B,QAA/B,GAAgD,QAAS,CAAC,IAAvE;AACA,IAAA,KAAI,CAAC,OAAL,GAAe,iBAAc,IAAd,GAAkB,UAAlB,GAA2B,MAAM,CAAC,cAAP,CAAsB,UAAjD,GAA2D,GAA3D,GAA+D,MAAM,CAAC,YAAtE,GAAkF,2BAAlF,GAA4G,QAA5G,GAAoH,cAAnI;;AACH;;AAEL,SAAA,yBAAA;AAAC,CAVD,CAA+C,KAA/C,CAAA","sourcesContent":["import {ColumnType} from \"../driver/types/ColumnTypes\";\nimport {DatabaseType} from \"../driver/types/DatabaseType\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\n\nexport class DataTypeNotSupportedError extends Error {\n    name = \"DataTypeNotSupportedError\";\n\n    constructor(column: ColumnMetadata, dataType: ColumnType, database?: DatabaseType) {\n        super();\n        Object.setPrototypeOf(this, DataTypeNotSupportedError.prototype);\n        const type = typeof dataType === \"string\" ? dataType : (<any>dataType).name;\n        this.message = `Data type \"${type}\" in \"${column.entityMetadata.targetName}.${column.propertyName}\" is not supported by \"${database}\" database.`;\n    }\n\n}"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}