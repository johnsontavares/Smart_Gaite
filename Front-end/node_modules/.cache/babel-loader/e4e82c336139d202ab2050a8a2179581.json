{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\n/**\n * Foreign key from the database stored in this class.\n */\n\nvar TableForeignKey =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function TableForeignKey(options) {\n    /**\n     * Column names which included by this foreign key.\n     */\n    this.columnNames = [];\n    /**\n     * Column names which included by this foreign key.\n     */\n\n    this.referencedColumnNames = [];\n    this.name = options.name;\n    this.columnNames = options.columnNames;\n    this.referencedColumnNames = options.referencedColumnNames;\n    this.referencedTableName = options.referencedTableName;\n    this.onDelete = options.onDelete;\n    this.onUpdate = options.onUpdate;\n    this.deferrable = options.deferrable;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new copy of this foreign key with exactly same properties.\n   */\n\n\n  TableForeignKey.prototype.clone = function () {\n    return new TableForeignKey({\n      name: this.name,\n      columnNames: __spreadArray([], __read(this.columnNames)),\n      referencedColumnNames: __spreadArray([], __read(this.referencedColumnNames)),\n      referencedTableName: this.referencedTableName,\n      onDelete: this.onDelete,\n      onUpdate: this.onUpdate,\n      deferrable: this.deferrable\n    });\n  }; // -------------------------------------------------------------------------\n  // Static Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Creates a new table foreign key from the given foreign key metadata.\n   */\n\n\n  TableForeignKey.create = function (metadata) {\n    return new TableForeignKey({\n      name: metadata.name,\n      columnNames: metadata.columnNames,\n      referencedColumnNames: metadata.referencedColumnNames,\n      referencedTableName: metadata.referencedTablePath,\n      onDelete: metadata.onDelete,\n      onUpdate: metadata.onUpdate,\n      deferrable: metadata.deferrable\n    });\n  };\n\n  return TableForeignKey;\n}();\n\nexport { TableForeignKey };","map":{"version":3,"sources":["../browser/src/schema-builder/table/TableForeignKey.ts"],"names":[],"mappings":";AAGA;;AAEG;;AACH,IAAA,eAAA;AAAA;AAAA,YAAA;AA4CI;AACA;AACA;AAEA,WAAA,eAAA,CAAY,OAAZ,EAA2C;AArC3C;;AAEG;AACH,SAAA,WAAA,GAAwB,EAAxB;AAOA;;AAEG;;AACH,SAAA,qBAAA,GAAkC,EAAlC;AAyBI,SAAK,IAAL,GAAY,OAAO,CAAC,IAApB;AACA,SAAK,WAAL,GAAmB,OAAO,CAAC,WAA3B;AACA,SAAK,qBAAL,GAA6B,OAAO,CAAC,qBAArC;AACA,SAAK,mBAAL,GAA2B,OAAO,CAAC,mBAAnC;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACH,GAxDL,CA0DI;AACA;AACA;;AAEA;;AAEG;;;AACH,EAAA,eAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACI,WAAO,IAAI,eAAJ,CAA4C;AAC/C,MAAA,IAAI,EAAE,KAAK,IADoC;AAE/C,MAAA,WAAW,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAM,KAAK,WAAX,CAAA,CAFoC;AAG/C,MAAA,qBAAqB,EAAA,aAAA,CAAA,EAAA,EAAA,MAAA,CAAM,KAAK,qBAAX,CAAA,CAH0B;AAI/C,MAAA,mBAAmB,EAAE,KAAK,mBAJqB;AAK/C,MAAA,QAAQ,EAAE,KAAK,QALgC;AAM/C,MAAA,QAAQ,EAAE,KAAK,QANgC;AAO/C,MAAA,UAAU,EAAE,KAAK;AAP8B,KAA5C,CAAP;AASH,GAVD,CAjEJ,CA6EI;AACA;AACA;;AAEA;;AAEG;;;AACI,EAAA,eAAA,CAAA,MAAA,GAAP,UAAc,QAAd,EAA0C;AACtC,WAAO,IAAI,eAAJ,CAA4C;AAC/C,MAAA,IAAI,EAAE,QAAQ,CAAC,IADgC;AAE/C,MAAA,WAAW,EAAE,QAAQ,CAAC,WAFyB;AAG/C,MAAA,qBAAqB,EAAE,QAAQ,CAAC,qBAHe;AAI/C,MAAA,mBAAmB,EAAE,QAAQ,CAAC,mBAJiB;AAK/C,MAAA,QAAQ,EAAE,QAAQ,CAAC,QAL4B;AAM/C,MAAA,QAAQ,EAAE,QAAQ,CAAC,QAN4B;AAO/C,MAAA,UAAU,EAAE,QAAQ,CAAC;AAP0B,KAA5C,CAAP;AASH,GAVM;;AAYX,SAAA,eAAA;AAAC,CAhGD,EAAA","sourcesContent":["import {ForeignKeyMetadata} from \"../../metadata/ForeignKeyMetadata\";\nimport {TableForeignKeyOptions} from \"../options/TableForeignKeyOptions\";\n\n/**\n * Foreign key from the database stored in this class.\n */\nexport class TableForeignKey {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Name of the foreign key constraint.\n     */\n    name?: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Table referenced in the foreign key.\n     */\n    referencedTableName: string;\n\n    /**\n     * Column names which included by this foreign key.\n     */\n    referencedColumnNames: string[] = [];\n\n    /**\n     * \"ON DELETE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being deleted.\n     */\n    onDelete?: string;\n\n    /**\n     * \"ON UPDATE\" of this foreign key, e.g. what action database should perform when\n     * referenced stuff is being updated.\n     */\n    onUpdate?: string;\n\n    /**\n     * Set this foreign key constraint as \"DEFERRABLE\" e.g. check constraints at start\n     * or at the end of a transaction\n     */\n    deferrable?: string;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: TableForeignKeyOptions) {\n        this.name = options.name;\n        this.columnNames = options.columnNames;\n        this.referencedColumnNames = options.referencedColumnNames;\n        this.referencedTableName = options.referencedTableName;\n        this.onDelete = options.onDelete;\n        this.onUpdate = options.onUpdate;\n        this.deferrable = options.deferrable;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new copy of this foreign key with exactly same properties.\n     */\n    clone(): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: this.name,\n            columnNames: [...this.columnNames],\n            referencedColumnNames: [...this.referencedColumnNames],\n            referencedTableName: this.referencedTableName,\n            onDelete: this.onDelete,\n            onUpdate: this.onUpdate,\n            deferrable: this.deferrable,\n        });\n    }\n\n    // -------------------------------------------------------------------------\n    // Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates a new table foreign key from the given foreign key metadata.\n     */\n    static create(metadata: ForeignKeyMetadata): TableForeignKey {\n        return new TableForeignKey(<TableForeignKeyOptions>{\n            name: metadata.name,\n            columnNames: metadata.columnNames,\n            referencedColumnNames: metadata.referencedColumnNames,\n            referencedTableName: metadata.referencedTablePath,\n            onDelete: metadata.onDelete,\n            onUpdate: metadata.onUpdate,\n            deferrable: metadata.deferrable,\n        });\n    }\n\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}