{"ast":null,"code":"import { __awaiter, __generator, __values } from \"tslib\";\nimport { DefaultNamingStrategy } from \"../naming-strategy/DefaultNamingStrategy\";\nimport { CannotExecuteNotConnectedError } from \"../error/CannotExecuteNotConnectedError\";\nimport { CannotConnectAlreadyConnectedError } from \"../error/CannotConnectAlreadyConnectedError\";\nimport { EntityMetadataNotFoundError } from \"../error/EntityMetadataNotFoundError\";\nimport { MigrationExecutor } from \"../migration/MigrationExecutor\";\nimport { MongoDriver } from \"../driver/mongodb/MongoDriver\";\nimport { MongoEntityManager } from \"../entity-manager/MongoEntityManager\";\nimport { EntityMetadataValidator } from \"../metadata-builder/EntityMetadataValidator\";\nimport { QueryRunnerProviderAlreadyReleasedError } from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport { EntityManagerFactory } from \"../entity-manager/EntityManagerFactory\";\nimport { DriverFactory } from \"../driver/DriverFactory\";\nimport { ConnectionMetadataBuilder } from \"./ConnectionMetadataBuilder\";\nimport { SelectQueryBuilder } from \"../query-builder/SelectQueryBuilder\";\nimport { LoggerFactory } from \"../logger/LoggerFactory\";\nimport { QueryResultCacheFactory } from \"../cache/QueryResultCacheFactory\";\nimport { SqljsEntityManager } from \"../entity-manager/SqljsEntityManager\";\nimport { RelationLoader } from \"../query-builder/RelationLoader\";\nimport { RelationIdLoader } from \"../query-builder/RelationIdLoader\";\nimport { EntitySchema } from \"../\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\nimport { MysqlDriver } from \"../driver/mysql/MysqlDriver\";\nimport { ObjectUtils } from \"../util/ObjectUtils\";\nimport { AuroraDataApiDriver } from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n/**\n * Connection is a single database ORM connection to a specific database.\n * Its not required to be a database connection, depend on database type it can create connection pool.\n * You can have multiple connections to multiple databases in your application.\n */\n\nvar Connection =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function Connection(options) {\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    this.migrations = [];\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n\n    this.subscribers = [];\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n\n    this.entityMetadatas = [];\n    this.name = options.name || \"default\";\n    this.options = options;\n    this.logger = new LoggerFactory().create(this.options.logger, this.options.logging);\n    this.driver = new DriverFactory().create(this);\n    this.manager = this.createEntityManager();\n    this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy();\n    this.queryResultCache = options.cache ? new QueryResultCacheFactory(this).create() : undefined;\n    this.relationLoader = new RelationLoader(this);\n    this.relationIdLoader = new RelationIdLoader(this);\n    this.isConnected = false;\n  }\n\n  Object.defineProperty(Connection.prototype, \"mongoManager\", {\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get: function () {\n      if (!(this.manager instanceof MongoEntityManager)) throw new Error(\"MongoEntityManager is only available for MongoDB databases.\");\n      return this.manager;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Connection.prototype, \"sqljsManager\", {\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get: function () {\n      if (!(this.manager instanceof SqljsEntityManager)) throw new Error(\"SqljsEntityManager is only available for Sqljs databases.\");\n      return this.manager;\n    },\n    enumerable: false,\n    configurable: true\n  }); // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Performs connection to the database.\n   * This method should be called once on application bootstrap.\n   * This method not necessarily creates database connection (depend on database type),\n   * but it also can setup a connection pool with database to use.\n   */\n\n  Connection.prototype.connect = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var error_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this.isConnected) throw new CannotConnectAlreadyConnectedError(this.name); // connect to the database via its driver\n\n            return [4\n            /*yield*/\n            , this.driver.connect()];\n\n          case 1:\n            // connect to the database via its driver\n            _a.sent();\n\n            if (!this.queryResultCache) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.queryResultCache.connect()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            // set connected status for the current connection\n            ObjectUtils.assign(this, {\n              isConnected: true\n            });\n            _a.label = 4;\n\n          case 4:\n            _a.trys.push([4, 12,, 14]); // build all metadatas registered in the current connection\n\n\n            this.buildMetadatas();\n            return [4\n            /*yield*/\n            , this.driver.afterConnect()];\n\n          case 5:\n            _a.sent();\n\n            if (!this.options.dropSchema) return [3\n            /*break*/\n            , 7];\n            return [4\n            /*yield*/\n            , this.dropDatabase()];\n\n          case 6:\n            _a.sent();\n\n            _a.label = 7;\n\n          case 7:\n            if (!this.options.synchronize) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this.synchronize()];\n\n          case 8:\n            _a.sent();\n\n            _a.label = 9;\n\n          case 9:\n            if (!this.options.migrationsRun) return [3\n            /*break*/\n            , 11];\n            return [4\n            /*yield*/\n            , this.runMigrations({\n              transaction: this.options.migrationsTransactionMode\n            })];\n\n          case 10:\n            _a.sent();\n\n            _a.label = 11;\n\n          case 11:\n            return [3\n            /*break*/\n            , 14];\n\n          case 12:\n            error_1 = _a.sent(); // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n\n            return [4\n            /*yield*/\n            , this.close()];\n\n          case 13:\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            _a.sent();\n\n            throw error_1;\n\n          case 14:\n            return [2\n            /*return*/\n            , this];\n        }\n      });\n    });\n  };\n  /**\n   * Closes connection with the database.\n   * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n   */\n\n\n  Connection.prototype.close = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isConnected) throw new CannotExecuteNotConnectedError(this.name);\n            return [4\n            /*yield*/\n            , this.driver.disconnect()];\n\n          case 1:\n            _a.sent();\n\n            if (!this.queryResultCache) return [3\n            /*break*/\n            , 3];\n            return [4\n            /*yield*/\n            , this.queryResultCache.disconnect()];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            ObjectUtils.assign(this, {\n              isConnected: false\n            });\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates database schema for all entities registered in this connection.\n   * Can be used only after connection to the database is established.\n   *\n   * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n   */\n\n\n  Connection.prototype.synchronize = function (dropBeforeSync) {\n    if (dropBeforeSync === void 0) {\n      dropBeforeSync = false;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var schemaBuilder;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isConnected) throw new CannotExecuteNotConnectedError(this.name);\n            if (!dropBeforeSync) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.dropDatabase()];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            schemaBuilder = this.driver.createSchemaBuilder();\n            return [4\n            /*yield*/\n            , schemaBuilder.build()];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Drops the database and all its data.\n   * Be careful with this method on production since this method will erase all your database tables and their data.\n   * Can be used only after connection to the database is established.\n   */\n  // TODO rename\n\n\n  Connection.prototype.dropDatabase = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var queryRunner, databases_2, databases_1, databases_1_1, database, e_1_1;\n\n      var e_1, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            queryRunner = this.createQueryRunner();\n            _b.label = 1;\n\n          case 1:\n            _b.trys.push([1,, 13, 15]);\n\n            if (!(this.driver instanceof SqlServerDriver || this.driver instanceof MysqlDriver || this.driver instanceof AuroraDataApiDriver)) return [3\n            /*break*/\n            , 10];\n            databases_2 = this.driver.database ? [this.driver.database] : [];\n            this.entityMetadatas.forEach(function (metadata) {\n              if (metadata.database && databases_2.indexOf(metadata.database) === -1) databases_2.push(metadata.database);\n            });\n            _b.label = 2;\n\n          case 2:\n            _b.trys.push([2, 7, 8, 9]);\n\n            databases_1 = __values(databases_2), databases_1_1 = databases_1.next();\n            _b.label = 3;\n\n          case 3:\n            if (!!databases_1_1.done) return [3\n            /*break*/\n            , 6];\n            database = databases_1_1.value;\n            return [4\n            /*yield*/\n            , queryRunner.clearDatabase(database)];\n\n          case 4:\n            _b.sent();\n\n            _b.label = 5;\n\n          case 5:\n            databases_1_1 = databases_1.next();\n            return [3\n            /*break*/\n            , 3];\n\n          case 6:\n            return [3\n            /*break*/\n            , 9];\n\n          case 7:\n            e_1_1 = _b.sent();\n            e_1 = {\n              error: e_1_1\n            };\n            return [3\n            /*break*/\n            , 9];\n\n          case 8:\n            try {\n              if (databases_1_1 && !databases_1_1.done && (_a = databases_1.return)) _a.call(databases_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 9:\n            return [3\n            /*break*/\n            , 12];\n\n          case 10:\n            return [4\n            /*yield*/\n            , queryRunner.clearDatabase()];\n\n          case 11:\n            _b.sent();\n\n            _b.label = 12;\n\n          case 12:\n            return [3\n            /*break*/\n            , 15];\n\n          case 13:\n            return [4\n            /*yield*/\n            , queryRunner.release()];\n\n          case 14:\n            _b.sent();\n\n            return [7\n            /*endfinally*/\n            ];\n\n          case 15:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Runs all pending migrations.\n   * Can be used only after connection to the database is established.\n   */\n\n\n  Connection.prototype.runMigrations = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var migrationExecutor, successMigrations;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isConnected) throw new CannotExecuteNotConnectedError(this.name);\n            migrationExecutor = new MigrationExecutor(this);\n            migrationExecutor.transaction = options && options.transaction || \"all\";\n            return [4\n            /*yield*/\n            , migrationExecutor.executePendingMigrations()];\n\n          case 1:\n            successMigrations = _a.sent();\n            return [2\n            /*return*/\n            , successMigrations];\n        }\n      });\n    });\n  };\n  /**\n   * Reverts last executed migration.\n   * Can be used only after connection to the database is established.\n   */\n\n\n  Connection.prototype.undoLastMigration = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var migrationExecutor;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isConnected) throw new CannotExecuteNotConnectedError(this.name);\n            migrationExecutor = new MigrationExecutor(this);\n            migrationExecutor.transaction = options && options.transaction || \"all\";\n            return [4\n            /*yield*/\n            , migrationExecutor.undoLastMigration()];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Lists all migrations and whether they have been run.\n   * Returns true if there are pending migrations\n   */\n\n\n  Connection.prototype.showMigrations = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var migrationExecutor;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.isConnected) {\n              throw new CannotExecuteNotConnectedError(this.name);\n            }\n\n            migrationExecutor = new MigrationExecutor(this);\n            return [4\n            /*yield*/\n            , migrationExecutor.showMigrations()];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Checks if entity metadata exist for the given entity class, target name or table name.\n   */\n\n\n  Connection.prototype.hasMetadata = function (target) {\n    return !!this.findMetadata(target);\n  };\n  /**\n   * Gets entity metadata for the given entity class or schema name.\n   */\n\n\n  Connection.prototype.getMetadata = function (target) {\n    var metadata = this.findMetadata(target);\n    if (!metadata) throw new EntityMetadataNotFoundError(target);\n    return metadata;\n  };\n  /**\n   * Gets repository for the given entity.\n   */\n\n\n  Connection.prototype.getRepository = function (target) {\n    return this.manager.getRepository(target);\n  };\n  /**\n   * Gets tree repository for the given entity class or name.\n   * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n   */\n\n\n  Connection.prototype.getTreeRepository = function (target) {\n    return this.manager.getTreeRepository(target);\n  };\n  /**\n   * Gets mongodb-specific repository for the given entity class or name.\n   * Works only if connection is mongodb-specific.\n   */\n\n\n  Connection.prototype.getMongoRepository = function (target) {\n    if (!(this.driver instanceof MongoDriver)) throw new Error(\"You can use getMongoRepository only for MongoDB connections.\");\n    return this.manager.getRepository(target);\n  };\n  /**\n   * Gets custom entity repository marked with @EntityRepository decorator.\n   */\n\n\n  Connection.prototype.getCustomRepository = function (customRepository) {\n    return this.manager.getCustomRepository(customRepository);\n  };\n\n  Connection.prototype.transaction = function (isolationOrRunInTransaction, runInTransactionParam) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2\n        /*return*/\n        , this.manager.transaction(isolationOrRunInTransaction, runInTransactionParam)];\n      });\n    });\n  };\n  /**\n   * Executes raw SQL query and returns raw database results.\n   */\n\n\n  Connection.prototype.query = function (query, parameters, queryRunner) {\n    return __awaiter(this, void 0, void 0, function () {\n      var usedQueryRunner;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (this instanceof MongoEntityManager) throw new Error(\"Queries aren't supported by MongoDB.\");\n            if (queryRunner && queryRunner.isReleased) throw new QueryRunnerProviderAlreadyReleasedError();\n            usedQueryRunner = queryRunner || this.createQueryRunner();\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1,, 3, 6]);\n\n            return [4\n            /*yield*/\n            , usedQueryRunner.query(query, parameters)];\n\n          case 2:\n            return [2\n            /*return*/\n            , _a.sent()];\n          // await is needed here because we are using finally\n\n          case 3:\n            if (!!queryRunner) return [3\n            /*break*/\n            , 5];\n            return [4\n            /*yield*/\n            , usedQueryRunner.release()];\n\n          case 4:\n            _a.sent();\n\n            _a.label = 5;\n\n          case 5:\n            return [7\n            /*endfinally*/\n            ];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * Creates a new query builder that can be used to build a sql query.\n   */\n\n\n  Connection.prototype.createQueryBuilder = function (entityOrRunner, alias, queryRunner) {\n    if (this instanceof MongoEntityManager) throw new Error(\"Query Builder is not supported by MongoDB.\");\n\n    if (alias) {\n      var metadata = this.getMetadata(entityOrRunner);\n      return new SelectQueryBuilder(this, queryRunner).select(alias).from(metadata.target, alias);\n    } else {\n      return new SelectQueryBuilder(this, entityOrRunner);\n    }\n  };\n  /**\n   * Creates a query runner used for perform queries on a single database connection.\n   * Using query runners you can control your queries to execute using single database connection and\n   * manually control your database transaction.\n   *\n   * Mode is used in replication mode and indicates whatever you want to connect\n   * to master database or any of slave databases.\n   * If you perform writes you must use master database,\n   * if you perform reads you can use slave databases.\n   */\n\n\n  Connection.prototype.createQueryRunner = function (mode) {\n    if (mode === void 0) {\n      mode = \"master\";\n    }\n\n    var queryRunner = this.driver.createQueryRunner(mode);\n    var manager = this.createEntityManager(queryRunner);\n    Object.assign(queryRunner, {\n      manager: manager\n    });\n    return queryRunner;\n  };\n  /**\n   * Gets entity metadata of the junction table (many-to-many table).\n   */\n\n\n  Connection.prototype.getManyToManyMetadata = function (entityTarget, relationPropertyPath) {\n    var relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);\n    if (!relationMetadata) throw new Error(\"Relation \\\"\" + relationPropertyPath + \"\\\" was not found in \" + entityTarget + \" entity.\");\n    if (!relationMetadata.isManyToMany) throw new Error(\"Relation \\\"\" + entityTarget + \"#\" + relationPropertyPath + \"\\\" does not have a many-to-many relationship.\" + \"You can use this method only on many-to-many relations.\");\n    return relationMetadata.junctionEntityMetadata;\n  };\n  /**\n   * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n   */\n\n\n  Connection.prototype.createEntityManager = function (queryRunner) {\n    return new EntityManagerFactory().create(this, queryRunner);\n  }; // -------------------------------------------------------------------------\n  // Protected Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Finds exist entity metadata by the given entity class, target name or table name.\n   */\n\n\n  Connection.prototype.findMetadata = function (target) {\n    return this.entityMetadatas.find(function (metadata) {\n      if (metadata.target === target) return true;\n\n      if (target instanceof EntitySchema) {\n        return metadata.name === target.options.name;\n      }\n\n      if (typeof target === \"string\") {\n        if (target.indexOf(\".\") !== -1) {\n          return metadata.tablePath === target;\n        } else {\n          return metadata.name === target || metadata.tableName === target;\n        }\n      }\n\n      return false;\n    });\n  };\n  /**\n   * Builds metadatas for all registered classes inside this connection.\n   */\n\n\n  Connection.prototype.buildMetadatas = function () {\n    var connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\n    var entityMetadataValidator = new EntityMetadataValidator(); // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n\n    var subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);\n    ObjectUtils.assign(this, {\n      subscribers: subscribers\n    }); // build entity metadatas\n\n    var entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || []);\n    ObjectUtils.assign(this, {\n      entityMetadatas: entityMetadatas\n    }); // create migration instances\n\n    var migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);\n    ObjectUtils.assign(this, {\n      migrations: migrations\n    });\n    this.driver.database = this.getDatabaseName(); // validate all created entity metadatas to make sure user created entities are valid and correct\n\n    entityMetadataValidator.validateMany(this.entityMetadatas.filter(function (metadata) {\n      return metadata.tableType !== \"view\";\n    }), this.driver);\n  }; // This database name property is nested for replication configs.\n\n\n  Connection.prototype.getDatabaseName = function () {\n    var options = this.options;\n\n    switch (options.type) {\n      case \"mysql\":\n      case \"mariadb\":\n      case \"postgres\":\n      case \"cockroachdb\":\n      case \"mssql\":\n      case \"oracle\":\n        return DriverUtils.buildDriverOptions(options.replication ? options.replication.master : options).database;\n\n      case \"mongodb\":\n        return DriverUtils.buildMongoDBDriverOptions(options).database;\n\n      default:\n        return DriverUtils.buildDriverOptions(options).database;\n    }\n  };\n\n  return Connection;\n}();\n\nexport { Connection };","map":{"version":3,"sources":["../browser/src/connection/Connection.ts"],"names":[],"mappings":"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","sourcesContent":["import {Driver} from \"../driver/Driver\";\nimport {Repository} from \"../repository/Repository\";\nimport {EntitySubscriberInterface} from \"../subscriber/EntitySubscriberInterface\";\nimport {EntityTarget} from \"../common/EntityTarget\";\nimport {ObjectType} from \"../common/ObjectType\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {DefaultNamingStrategy} from \"../naming-strategy/DefaultNamingStrategy\";\nimport {CannotExecuteNotConnectedError} from \"../error/CannotExecuteNotConnectedError\";\nimport {CannotConnectAlreadyConnectedError} from \"../error/CannotConnectAlreadyConnectedError\";\nimport {TreeRepository} from \"../repository/TreeRepository\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {Logger} from \"../logger/Logger\";\nimport {EntityMetadataNotFoundError} from \"../error/EntityMetadataNotFoundError\";\nimport {MigrationInterface} from \"../migration/MigrationInterface\";\nimport {MigrationExecutor} from \"../migration/MigrationExecutor\";\nimport {Migration} from \"../migration/Migration\";\nimport {MongoRepository} from \"../repository/MongoRepository\";\nimport {MongoDriver} from \"../driver/mongodb/MongoDriver\";\nimport {MongoEntityManager} from \"../entity-manager/MongoEntityManager\";\nimport {EntityMetadataValidator} from \"../metadata-builder/EntityMetadataValidator\";\nimport {ConnectionOptions} from \"./ConnectionOptions\";\nimport {QueryRunnerProviderAlreadyReleasedError} from \"../error/QueryRunnerProviderAlreadyReleasedError\";\nimport {EntityManagerFactory} from \"../entity-manager/EntityManagerFactory\";\nimport {DriverFactory} from \"../driver/DriverFactory\";\nimport {ConnectionMetadataBuilder} from \"./ConnectionMetadataBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {LoggerFactory} from \"../logger/LoggerFactory\";\nimport {QueryResultCacheFactory} from \"../cache/QueryResultCacheFactory\";\nimport {QueryResultCache} from \"../cache/QueryResultCache\";\nimport {SqljsEntityManager} from \"../entity-manager/SqljsEntityManager\";\nimport {RelationLoader} from \"../query-builder/RelationLoader\";\nimport {RelationIdLoader} from \"../query-builder/RelationIdLoader\";\nimport {EntitySchema} from \"../\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\nimport {MysqlDriver} from \"../driver/mysql/MysqlDriver\";\nimport {ObjectUtils} from \"../util/ObjectUtils\";\nimport {IsolationLevel} from \"../driver/types/IsolationLevel\";\nimport {AuroraDataApiDriver} from \"../driver/aurora-data-api/AuroraDataApiDriver\";\nimport {DriverUtils} from \"../driver/DriverUtils\";\nimport {ReplicationMode} from \"../driver/types/ReplicationMode\";\n\n/**\n * Connection is a single database ORM connection to a specific database.\n * Its not required to be a database connection, depend on database type it can create connection pool.\n * You can have multiple connections to multiple databases in your application.\n */\nexport class Connection {\n\n    // -------------------------------------------------------------------------\n    // Public Readonly Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection name.\n     */\n    readonly name: string;\n\n    /**\n     * Connection options.\n     */\n    readonly options: ConnectionOptions;\n\n    /**\n     * Indicates if connection is initialized or not.\n     */\n    readonly isConnected: boolean;\n\n    /**\n     * Database driver used by this connection.\n     */\n    readonly driver: Driver;\n\n    /**\n     * EntityManager of this connection.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Naming strategy used in the connection.\n     */\n    readonly namingStrategy: NamingStrategyInterface;\n\n    /**\n     * Logger used to log orm events.\n     */\n    readonly logger: Logger;\n\n    /**\n     * Migration instances that are registered for this connection.\n     */\n    readonly migrations: MigrationInterface[] = [];\n\n    /**\n     * Entity subscriber instances that are registered for this connection.\n     */\n    readonly subscribers: EntitySubscriberInterface<any>[] = [];\n\n    /**\n     * All entity metadatas that are registered for this connection.\n     */\n    readonly entityMetadatas: EntityMetadata[] = [];\n\n    /**\n     * Used to work with query result cache.\n     */\n    readonly queryResultCache?: QueryResultCache;\n\n    /**\n     * Used to load relations and work with lazy relations.\n     */\n    readonly relationLoader: RelationLoader;\n\n    /**\n     * Used to load relation ids of specific entity relations.\n     */\n    readonly relationIdLoader: RelationIdLoader;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(options: ConnectionOptions) {\n        this.name = options.name || \"default\";\n        this.options = options;\n        this.logger = new LoggerFactory().create(this.options.logger, this.options.logging);\n        this.driver = new DriverFactory().create(this);\n        this.manager = this.createEntityManager();\n        this.namingStrategy = options.namingStrategy || new DefaultNamingStrategy();\n        this.queryResultCache = options.cache ? new QueryResultCacheFactory(this).create() : undefined;\n        this.relationLoader = new RelationLoader(this);\n        this.relationIdLoader = new RelationIdLoader(this);\n        this.isConnected = false;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Accessors\n    // -------------------------------------------------------------------------\n\n    /**\n     * Gets the mongodb entity manager that allows to perform mongodb-specific repository operations\n     * with any entity in this connection.\n     *\n     * Available only in mongodb connections.\n     */\n    get mongoManager(): MongoEntityManager {\n        if (!(this.manager instanceof MongoEntityManager))\n            throw new Error(`MongoEntityManager is only available for MongoDB databases.`);\n\n        return this.manager as MongoEntityManager;\n    }\n\n    /**\n     * Gets a sql.js specific Entity Manager that allows to perform special load and save operations\n     *\n     * Available only in connection with the sqljs driver.\n     */\n    get sqljsManager(): SqljsEntityManager {\n        if (!(this.manager instanceof SqljsEntityManager))\n            throw new Error(`SqljsEntityManager is only available for Sqljs databases.`);\n\n        return this.manager as SqljsEntityManager;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * This method should be called once on application bootstrap.\n     * This method not necessarily creates database connection (depend on database type),\n     * but it also can setup a connection pool with database to use.\n     */\n    async connect(): Promise<this> {\n        if (this.isConnected)\n            throw new CannotConnectAlreadyConnectedError(this.name);\n\n        // connect to the database via its driver\n        await this.driver.connect();\n\n        // connect to the cache-specific database if cache is enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.connect();\n\n        // set connected status for the current connection\n        ObjectUtils.assign(this, { isConnected: true });\n\n        try {\n\n            // build all metadatas registered in the current connection\n            this.buildMetadatas();\n\n            await this.driver.afterConnect();\n\n            // if option is set - drop schema once connection is done\n            if (this.options.dropSchema)\n                await this.dropDatabase();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.synchronize)\n                await this.synchronize();\n\n            // if option is set - automatically synchronize a schema\n            if (this.options.migrationsRun)\n                await this.runMigrations({ transaction: this.options.migrationsTransactionMode });\n\n        } catch (error) {\n\n            // if for some reason build metadata fail (for example validation error during entity metadata check)\n            // connection needs to be closed\n            await this.close();\n            throw error;\n        }\n\n        return this;\n    }\n\n    /**\n     * Closes connection with the database.\n     * Once connection is closed, you cannot use repositories or perform any operations except opening connection again.\n     */\n    async close(): Promise<void> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        await this.driver.disconnect();\n\n        // disconnect from the cache-specific database if cache was enabled\n        if (this.queryResultCache)\n            await this.queryResultCache.disconnect();\n\n        ObjectUtils.assign(this, { isConnected: false });\n    }\n\n    /**\n     * Creates database schema for all entities registered in this connection.\n     * Can be used only after connection to the database is established.\n     *\n     * @param dropBeforeSync If set to true then it drops the database with all its tables and data\n     */\n    async synchronize(dropBeforeSync: boolean = false): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        if (dropBeforeSync)\n            await this.dropDatabase();\n\n        const schemaBuilder = this.driver.createSchemaBuilder();\n        await schemaBuilder.build();\n    }\n\n    /**\n     * Drops the database and all its data.\n     * Be careful with this method on production since this method will erase all your database tables and their data.\n     * Can be used only after connection to the database is established.\n     */\n    // TODO rename\n    async dropDatabase(): Promise<void> {\n        const queryRunner = this.createQueryRunner();\n        try {\n            if (this.driver instanceof SqlServerDriver || this.driver instanceof MysqlDriver || this.driver instanceof AuroraDataApiDriver) {\n                const databases: string[] = this.driver.database ? [this.driver.database] : [];\n                this.entityMetadatas.forEach(metadata => {\n                    if (metadata.database && databases.indexOf(metadata.database) === -1)\n                        databases.push(metadata.database);\n                });\n\n                for (const database of databases) {\n                    await queryRunner.clearDatabase(database);\n                }\n            } else {\n                await queryRunner.clearDatabase();\n            }\n        } finally {\n            await queryRunner.release();\n        }\n    }\n\n    /**\n     * Runs all pending migrations.\n     * Can be used only after connection to the database is established.\n     */\n    async runMigrations(options?: { transaction?: \"all\" | \"none\" | \"each\" }): Promise<Migration[]> {\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        migrationExecutor.transaction = (options && options.transaction) || \"all\";\n\n        const successMigrations = await migrationExecutor.executePendingMigrations();\n        return successMigrations;\n    }\n\n    /**\n     * Reverts last executed migration.\n     * Can be used only after connection to the database is established.\n     */\n    async undoLastMigration(options?: { transaction?: \"all\" | \"none\" | \"each\" }): Promise<void> {\n\n        if (!this.isConnected)\n            throw new CannotExecuteNotConnectedError(this.name);\n\n        const migrationExecutor = new MigrationExecutor(this);\n        migrationExecutor.transaction = (options && options.transaction) || \"all\";\n\n        await migrationExecutor.undoLastMigration();\n    }\n\n    /**\n     * Lists all migrations and whether they have been run.\n     * Returns true if there are pending migrations\n     */\n    async showMigrations(): Promise<boolean> {\n        if (!this.isConnected) {\n            throw new CannotExecuteNotConnectedError(this.name);\n        }\n        const migrationExecutor = new MigrationExecutor(this);\n        return await migrationExecutor.showMigrations();\n    }\n\n    /**\n     * Checks if entity metadata exist for the given entity class, target name or table name.\n     */\n    hasMetadata(target: EntityTarget<any>): boolean {\n        return !!this.findMetadata(target);\n    }\n\n    /**\n     * Gets entity metadata for the given entity class or schema name.\n     */\n    getMetadata(target: EntityTarget<any>): EntityMetadata {\n        const metadata = this.findMetadata(target);\n        if (!metadata)\n            throw new EntityMetadataNotFoundError(target);\n\n        return metadata;\n    }\n\n    /**\n     * Gets repository for the given entity.\n     */\n    getRepository<Entity>(target: EntityTarget<Entity>): Repository<Entity> {\n        return this.manager.getRepository(target);\n    }\n\n    /**\n     * Gets tree repository for the given entity class or name.\n     * Only tree-type entities can have a TreeRepository, like ones decorated with @Tree decorator.\n     */\n    getTreeRepository<Entity>(target: EntityTarget<Entity>): TreeRepository<Entity> {\n        return this.manager.getTreeRepository(target);\n    }\n\n    /**\n     * Gets mongodb-specific repository for the given entity class or name.\n     * Works only if connection is mongodb-specific.\n     */\n    getMongoRepository<Entity>(target: EntityTarget<Entity>): MongoRepository<Entity> {\n        if (!(this.driver instanceof MongoDriver))\n            throw new Error(`You can use getMongoRepository only for MongoDB connections.`);\n\n        return this.manager.getRepository(target) as any;\n    }\n\n    /**\n     * Gets custom entity repository marked with @EntityRepository decorator.\n     */\n    getCustomRepository<T>(customRepository: ObjectType<T>): T {\n        return this.manager.getCustomRepository(customRepository);\n    }\n\n    /**\n     * Wraps given function execution (and all operations made there) into a transaction.\n     * All database operations must be executed using provided entity manager.\n     */\n    async transaction<T>(runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n    async transaction<T>(isolationLevel: IsolationLevel, runInTransaction: (entityManager: EntityManager) => Promise<T>): Promise<T>;\n    async transaction<T>(\n        isolationOrRunInTransaction: IsolationLevel | ((entityManager: EntityManager) => Promise<T>),\n        runInTransactionParam?: (entityManager: EntityManager) => Promise<T>\n    ): Promise<any> {\n        return this.manager.transaction(\n            isolationOrRunInTransaction as any,\n            runInTransactionParam as any\n        );\n    }\n\n    /**\n     * Executes raw SQL query and returns raw database results.\n     */\n    async query(query: string, parameters?: any[], queryRunner?: QueryRunner): Promise<any> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Queries aren't supported by MongoDB.`);\n\n        if (queryRunner && queryRunner.isReleased)\n            throw new QueryRunnerProviderAlreadyReleasedError();\n\n        const usedQueryRunner = queryRunner || this.createQueryRunner();\n\n        try {\n            return await usedQueryRunner.query(query, parameters);  // await is needed here because we are using finally\n\n        } finally {\n            if (!queryRunner)\n                await usedQueryRunner.release();\n        }\n    }\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityClass: EntityTarget<Entity>, alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(queryRunner?: QueryRunner): SelectQueryBuilder<any>;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder<Entity>(entityOrRunner?: EntityTarget<Entity>|QueryRunner, alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n        if (this instanceof MongoEntityManager)\n            throw new Error(`Query Builder is not supported by MongoDB.`);\n\n        if (alias) {\n            const metadata = this.getMetadata(entityOrRunner as EntityTarget<Entity>);\n            return new SelectQueryBuilder(this, queryRunner)\n                .select(alias)\n                .from(metadata.target, alias);\n\n        } else {\n            return new SelectQueryBuilder(this, entityOrRunner as QueryRunner|undefined);\n        }\n    }\n\n    /**\n     * Creates a query runner used for perform queries on a single database connection.\n     * Using query runners you can control your queries to execute using single database connection and\n     * manually control your database transaction.\n     *\n     * Mode is used in replication mode and indicates whatever you want to connect\n     * to master database or any of slave databases.\n     * If you perform writes you must use master database,\n     * if you perform reads you can use slave databases.\n     */\n    createQueryRunner(mode: ReplicationMode = \"master\"): QueryRunner {\n        const queryRunner = this.driver.createQueryRunner(mode);\n        const manager = this.createEntityManager(queryRunner);\n        Object.assign(queryRunner, { manager: manager });\n        return queryRunner;\n    }\n\n    /**\n     * Gets entity metadata of the junction table (many-to-many table).\n     */\n    getManyToManyMetadata(entityTarget: EntityTarget<any>, relationPropertyPath: string) {\n        const relationMetadata = this.getMetadata(entityTarget).findRelationWithPropertyPath(relationPropertyPath);\n        if (!relationMetadata)\n            throw new Error(`Relation \"${relationPropertyPath}\" was not found in ${entityTarget} entity.`);\n        if (!relationMetadata.isManyToMany)\n            throw new Error(`Relation \"${entityTarget}#${relationPropertyPath}\" does not have a many-to-many relationship.` +\n                `You can use this method only on many-to-many relations.`);\n\n        return relationMetadata.junctionEntityMetadata;\n    }\n\n    /**\n     * Creates an Entity Manager for the current connection with the help of the EntityManagerFactory.\n     */\n    createEntityManager(queryRunner?: QueryRunner): EntityManager {\n        return new EntityManagerFactory().create(this, queryRunner);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Finds exist entity metadata by the given entity class, target name or table name.\n     */\n    protected findMetadata(target: EntityTarget<any>): EntityMetadata|undefined {\n        return this.entityMetadatas.find(metadata => {\n            if (metadata.target === target)\n                return true;\n            if (target instanceof EntitySchema) {\n                return metadata.name === target.options.name;\n            }\n            if (typeof target === \"string\") {\n                if (target.indexOf(\".\") !== -1) {\n                    return metadata.tablePath === target;\n                } else {\n                    return metadata.name === target || metadata.tableName === target;\n                }\n            }\n\n            return false;\n        });\n    }\n\n    /**\n     * Builds metadatas for all registered classes inside this connection.\n     */\n    protected buildMetadatas(): void {\n\n        const connectionMetadataBuilder = new ConnectionMetadataBuilder(this);\n        const entityMetadataValidator = new EntityMetadataValidator();\n\n        // create subscribers instances if they are not disallowed from high-level (for example they can disallowed from migrations run process)\n        const subscribers = connectionMetadataBuilder.buildSubscribers(this.options.subscribers || []);\n        ObjectUtils.assign(this, { subscribers: subscribers });\n\n        // build entity metadatas\n        const entityMetadatas = connectionMetadataBuilder.buildEntityMetadatas(this.options.entities || []);\n        ObjectUtils.assign(this, { entityMetadatas: entityMetadatas });\n\n        // create migration instances\n        const migrations = connectionMetadataBuilder.buildMigrations(this.options.migrations || []);\n        ObjectUtils.assign(this, { migrations: migrations });\n\n        this.driver.database = this.getDatabaseName();\n\n        // validate all created entity metadatas to make sure user created entities are valid and correct\n        entityMetadataValidator.validateMany(this.entityMetadatas.filter(metadata => metadata.tableType !== \"view\"), this.driver);\n    }\n\n    // This database name property is nested for replication configs.\n    protected getDatabaseName(): string {\n        const options = this.options;\n        switch (options.type) {\n            case \"mysql\" :\n            case \"mariadb\" :\n            case \"postgres\":\n            case \"cockroachdb\":\n            case \"mssql\":\n            case \"oracle\":\n                return DriverUtils.buildDriverOptions(options.replication ? options.replication.master : options).database;\n            case \"mongodb\":\n                return DriverUtils.buildMongoDBDriverOptions(options).database;\n            default:\n                return DriverUtils.buildDriverOptions(options).database;\n    }\n}\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}