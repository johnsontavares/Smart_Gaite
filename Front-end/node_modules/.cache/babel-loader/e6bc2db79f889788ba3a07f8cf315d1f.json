{"ast":null,"code":"import { EntityMetadata } from \"../metadata/EntityMetadata\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { ForeignKeyMetadata } from \"../metadata/ForeignKeyMetadata\";\nimport { IndexMetadata } from \"../metadata/IndexMetadata\";\nimport { SqlServerDriver } from \"../driver/sqlserver/SqlServerDriver\";\n/**\n * Creates EntityMetadata for junction tables of the closure entities.\n * Closure junction tables are tables generated by closure entities.\n */\n\nvar ClosureJunctionEntityMetadataBuilder =\n/** @class */\nfunction () {\n  // -------------------------------------------------------------------------\n  // Constructor\n  // -------------------------------------------------------------------------\n  function ClosureJunctionEntityMetadataBuilder(connection) {\n    this.connection = connection;\n  } // -------------------------------------------------------------------------\n  // Public Methods\n  // -------------------------------------------------------------------------\n\n  /**\n   * Builds EntityMetadata for the closure junction of the given closure entity.\n   */\n\n\n  ClosureJunctionEntityMetadataBuilder.prototype.build = function (parentClosureEntityMetadata) {\n    var _this = this; // create entity metadata itself\n\n\n    var entityMetadata = new EntityMetadata({\n      parentClosureEntityMetadata: parentClosureEntityMetadata,\n      connection: this.connection,\n      args: {\n        target: \"\",\n        name: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.closureTableName ? parentClosureEntityMetadata.treeOptions.closureTableName : parentClosureEntityMetadata.tableNameWithoutPrefix,\n        type: \"closure-junction\"\n      }\n    });\n    entityMetadata.build(); // create ancestor and descendant columns for new closure junction table\n\n    parentClosureEntityMetadata.primaryColumns.forEach(function (primaryColumn) {\n      entityMetadata.ownColumns.push(new ColumnMetadata({\n        connection: _this.connection,\n        entityMetadata: entityMetadata,\n        closureType: \"ancestor\",\n        referencedColumn: primaryColumn,\n        args: {\n          target: \"\",\n          mode: \"virtual\",\n          propertyName: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.ancestorColumnName ? parentClosureEntityMetadata.treeOptions.ancestorColumnName(primaryColumn) : primaryColumn.propertyName + \"_ancestor\",\n          options: {\n            primary: true,\n            length: primaryColumn.length,\n            type: primaryColumn.type\n          }\n        }\n      }));\n      entityMetadata.ownColumns.push(new ColumnMetadata({\n        connection: _this.connection,\n        entityMetadata: entityMetadata,\n        closureType: \"descendant\",\n        referencedColumn: primaryColumn,\n        args: {\n          target: \"\",\n          mode: \"virtual\",\n          propertyName: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.descendantColumnName ? parentClosureEntityMetadata.treeOptions.descendantColumnName(primaryColumn) : primaryColumn.propertyName + \"_descendant\",\n          options: {\n            primary: true,\n            length: primaryColumn.length,\n            type: primaryColumn.type\n          }\n        }\n      }));\n    });\n    entityMetadata.ownIndices = [new IndexMetadata({\n      entityMetadata: entityMetadata,\n      columns: [entityMetadata.ownColumns[0]],\n      args: {\n        target: entityMetadata.target,\n        synchronize: true\n      }\n    }), new IndexMetadata({\n      entityMetadata: entityMetadata,\n      columns: [entityMetadata.ownColumns[1]],\n      args: {\n        target: entityMetadata.target,\n        synchronize: true\n      }\n    })]; // if tree level column was defined by a closure entity then add it to the junction columns as well\n\n    if (parentClosureEntityMetadata.treeLevelColumn) {\n      entityMetadata.ownColumns.push(new ColumnMetadata({\n        connection: this.connection,\n        entityMetadata: entityMetadata,\n        args: {\n          target: \"\",\n          mode: \"virtual\",\n          propertyName: \"level\",\n          options: {\n            type: this.connection.driver.mappedDataTypes.treeLevel\n          }\n        }\n      }));\n    } // create junction table foreign keys\n    // Note: CASCADE is not applied to mssql because it does not support multi cascade paths\n\n\n    entityMetadata.foreignKeys = [new ForeignKeyMetadata({\n      entityMetadata: entityMetadata,\n      referencedEntityMetadata: parentClosureEntityMetadata,\n      columns: [entityMetadata.ownColumns[0]],\n      referencedColumns: parentClosureEntityMetadata.primaryColumns,\n      onDelete: this.connection.driver instanceof SqlServerDriver ? \"NO ACTION\" : \"CASCADE\"\n    }), new ForeignKeyMetadata({\n      entityMetadata: entityMetadata,\n      referencedEntityMetadata: parentClosureEntityMetadata,\n      columns: [entityMetadata.ownColumns[1]],\n      referencedColumns: parentClosureEntityMetadata.primaryColumns,\n      onDelete: this.connection.driver instanceof SqlServerDriver ? \"NO ACTION\" : \"CASCADE\"\n    })];\n    return entityMetadata;\n  };\n\n  return ClosureJunctionEntityMetadataBuilder;\n}();\n\nexport { ClosureJunctionEntityMetadataBuilder };","map":{"version":3,"sources":["../browser/src/metadata-builder/ClosureJunctionEntityMetadataBuilder.ts"],"names":[],"mappings":"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","sourcesContent":["import {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {ColumnMetadata} from \"../metadata/ColumnMetadata\";\nimport {ForeignKeyMetadata} from \"../metadata/ForeignKeyMetadata\";\nimport {Connection} from \"../connection/Connection\";\nimport {IndexMetadata} from \"../metadata/IndexMetadata\";\nimport {SqlServerDriver} from \"../driver/sqlserver/SqlServerDriver\";\n\n/**\n * Creates EntityMetadata for junction tables of the closure entities.\n * Closure junction tables are tables generated by closure entities.\n */\nexport class ClosureJunctionEntityMetadataBuilder {\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Builds EntityMetadata for the closure junction of the given closure entity.\n     */\n    build(parentClosureEntityMetadata: EntityMetadata) {\n\n        // create entity metadata itself\n        const entityMetadata = new EntityMetadata({\n            parentClosureEntityMetadata: parentClosureEntityMetadata,\n            connection: this.connection,\n            args: {\n                target: \"\",\n                name: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.closureTableName ? parentClosureEntityMetadata.treeOptions.closureTableName : parentClosureEntityMetadata.tableNameWithoutPrefix,\n                type: \"closure-junction\"\n            }\n        });\n        entityMetadata.build();\n\n        // create ancestor and descendant columns for new closure junction table\n        parentClosureEntityMetadata.primaryColumns.forEach(primaryColumn => {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"ancestor\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.ancestorColumnName ? parentClosureEntityMetadata.treeOptions.ancestorColumnName(primaryColumn) : primaryColumn.propertyName + \"_ancestor\",\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type\n                    }\n                }\n            }));\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                closureType: \"descendant\",\n                referencedColumn: primaryColumn,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: parentClosureEntityMetadata.treeOptions && parentClosureEntityMetadata.treeOptions.descendantColumnName ? parentClosureEntityMetadata.treeOptions.descendantColumnName(primaryColumn) : primaryColumn.propertyName + \"_descendant\",\n                    options: {\n                        primary: true,\n                        length: primaryColumn.length,\n                        type: primaryColumn.type,\n                    }\n                }\n            }));\n        });\n\n        entityMetadata.ownIndices = [\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            }),\n            new IndexMetadata({\n                entityMetadata: entityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                args: {\n                    target: entityMetadata.target,\n                    synchronize: true\n                }\n            })\n        ];\n\n        // if tree level column was defined by a closure entity then add it to the junction columns as well\n        if (parentClosureEntityMetadata.treeLevelColumn) {\n            entityMetadata.ownColumns.push(new ColumnMetadata({\n                connection: this.connection,\n                entityMetadata: entityMetadata,\n                args: {\n                    target: \"\",\n                    mode: \"virtual\",\n                    propertyName: \"level\",\n                    options: {\n                        type: this.connection.driver.mappedDataTypes.treeLevel,\n                    }\n                }\n            }));\n        }\n\n        // create junction table foreign keys\n        // Note: CASCADE is not applied to mssql because it does not support multi cascade paths\n        entityMetadata.foreignKeys = [\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[0]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                onDelete: this.connection.driver instanceof SqlServerDriver ? \"NO ACTION\" : \"CASCADE\"\n            }),\n            new ForeignKeyMetadata({\n                entityMetadata: entityMetadata,\n                referencedEntityMetadata: parentClosureEntityMetadata,\n                columns: [entityMetadata.ownColumns[1]],\n                referencedColumns: parentClosureEntityMetadata.primaryColumns,\n                onDelete: this.connection.driver instanceof SqlServerDriver ? \"NO ACTION\" : \"CASCADE\"\n            }),\n        ];\n\n        return entityMetadata;\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}