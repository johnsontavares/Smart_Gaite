{"ast":null,"code":"import { getMetadataArgsStorage } from \"../../\";\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\n\nexport function ViewEntity(nameOrOptions, maybeOptions) {\n  var options = (typeof nameOrOptions === \"object\" ? nameOrOptions : maybeOptions) || {};\n  var name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n  return function (target) {\n    getMetadataArgsStorage().tables.push({\n      target: target,\n      name: name,\n      expression: options.expression,\n      type: \"view\",\n      database: options.database ? options.database : undefined,\n      schema: options.schema ? options.schema : undefined,\n      synchronize: options.synchronize === false ? false : true,\n      materialized: !!options.materialized\n    });\n  };\n}","map":{"version":3,"sources":["../browser/src/decorator/entity-view/ViewEntity.ts"],"names":[],"mappings":"AAAA,SAAQ,sBAAR,QAAqC,QAArC;AAgBA;;;AAGG;;AACH,OAAM,SAAU,UAAV,CAAqB,aAArB,EAA+D,YAA/D,EAA+F;AACjG,MAAM,OAAO,GAAG,CAAC,OAAO,aAAP,KAAyB,QAAzB,GAAoC,aAApC,GAAyE,YAA1E,KAA2F,EAA3G;AACA,MAAM,IAAI,GAAG,OAAO,aAAP,KAAyB,QAAzB,GAAoC,aAApC,GAAoD,OAAO,CAAC,IAAzE;AAEA,SAAO,UAAU,MAAV,EAA0B;AAC7B,IAAA,sBAAsB,GAAG,MAAzB,CAAgC,IAAhC,CAAqC;AACjC,MAAA,MAAM,EAAE,MADyB;AAEjC,MAAA,IAAI,EAAE,IAF2B;AAGjC,MAAA,UAAU,EAAE,OAAO,CAAC,UAHa;AAIjC,MAAA,IAAI,EAAE,MAJ2B;AAKjC,MAAA,QAAQ,EAAE,OAAO,CAAC,QAAR,GAAmB,OAAO,CAAC,QAA3B,GAAsC,SALf;AAMjC,MAAA,MAAM,EAAE,OAAO,CAAC,MAAR,GAAiB,OAAO,CAAC,MAAzB,GAAkC,SANT;AAOjC,MAAA,WAAW,EAAE,OAAO,CAAC,WAAR,KAAwB,KAAxB,GAAgC,KAAhC,GAAwC,IAPpB;AAQjC,MAAA,YAAY,EAAE,CAAC,CAAC,OAAO,CAAC;AARS,KAArC;AAUH,GAXD;AAYH","sourcesContent":["import {getMetadataArgsStorage} from \"../../\";\nimport {TableMetadataArgs} from \"../../metadata-args/TableMetadataArgs\";\nimport {ViewEntityOptions} from \"../options/ViewEntityOptions\";\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(options?: ViewEntityOptions): ClassDecorator;\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(name?: string, options?: ViewEntityOptions): ClassDecorator;\n\n/**\n * This decorator is used to mark classes that will be an entity view.\n * Database schema will be created for all classes decorated with it, and Repository can be retrieved and used for it.\n */\nexport function ViewEntity(nameOrOptions?: string|ViewEntityOptions, maybeOptions?: ViewEntityOptions): ClassDecorator {\n    const options = (typeof nameOrOptions === \"object\" ? nameOrOptions as ViewEntityOptions : maybeOptions) || {};\n    const name = typeof nameOrOptions === \"string\" ? nameOrOptions : options.name;\n\n    return function (target: Function) {\n        getMetadataArgsStorage().tables.push({\n            target: target,\n            name: name,\n            expression: options.expression,\n            type: \"view\",\n            database: options.database ? options.database : undefined,\n            schema: options.schema ? options.schema : undefined,\n            synchronize: options.synchronize === false ? false : true,\n            materialized: !!options.materialized\n        } as TableMetadataArgs);\n    };\n}\n"],"sourceRoot":"../.."},"metadata":{},"sourceType":"module"}