{"ast":null,"code":"import shajs from \"sha.js\";\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\n\nexport function camelCase(str, firstCapital) {\n  if (firstCapital === void 0) {\n    firstCapital = false;\n  }\n\n  return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function (match, p1, p2, offset) {\n    if (firstCapital === true && offset === 0) return p1;\n    if (p2) return p2.toUpperCase();\n    return p1.toLowerCase();\n  });\n}\n/**\n * Converts string into snake_case.\n *\n * @see https://regex101.com/r/QeSm2I/1\n */\n\nexport function snakeCase(str) {\n  return str.replace(/(?:([a-z])([A-Z]))|(?:((?!^)[A-Z])([a-z]))/g, \"$1_$3$2$4\").toLowerCase();\n}\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\n\nexport function titleCase(str) {\n  return str.replace(/\\w\\S*/g, function (txt) {\n    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();\n  });\n}\n/**\n * Builds abbreviated string from given string;\n */\n\nexport function abbreviate(str, abbrLettersCount) {\n  if (abbrLettersCount === void 0) {\n    abbrLettersCount = 1;\n  }\n\n  var words = str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\").split(\" \");\n  return words.reduce(function (res, word) {\n    res += word.substr(0, abbrLettersCount);\n    return res;\n  }, \"\");\n}\n/**\n * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n * maximum length of aliases and column names in SQL queries.\n *\n * @param input String to be shortened.\n * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n *\n * @return Shortened `input`.\n *\n * @example\n * // returns: \"UsShCa__orde__mark__dire\"\n * shorten('UserShoppingCart__order__market__director')\n *\n * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n * shorten(\n *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n *   { separator: '_', segmentLength: 3 }\n * )\n *\n * // equals: UsShCa__orde__mark_market_id\n * `${shorten('UserShoppingCart__order__market')}_market_id`\n */\n\nexport function shorten(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.segmentLength,\n      segmentLength = _a === void 0 ? 4 : _a,\n      _b = options.separator,\n      separator = _b === void 0 ? \"__\" : _b,\n      _c = options.termLength,\n      termLength = _c === void 0 ? 2 : _c;\n  var segments = input.split(separator);\n  var shortSegments = segments.reduce(function (acc, val) {\n    // split the given segment into many terms based on an eventual camel cased name\n    var segmentTerms = val.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\").split(\" \"); // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n\n    var length = segmentTerms.length > 1 ? termLength : segmentLength;\n    var shortSegment = segmentTerms.map(function (term) {\n      return term.substr(0, length);\n    }).join(\"\");\n    acc.push(shortSegment);\n    return acc;\n  }, []);\n  return shortSegments.join(separator);\n}\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\n\nexport function hash(input, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var hashFunction = shajs(\"sha256\");\n  hashFunction.update(input, \"utf8\");\n  var hashedInput = hashFunction.digest(\"hex\");\n\n  if (options.length) {\n    return hashedInput.slice(0, options.length);\n  }\n\n  return hashedInput;\n}","map":{"version":3,"sources":["../browser/src/util/StringUtils.ts"],"names":[],"mappings":"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","sourcesContent":["import shajs from \"sha.js\";\n\n/**\n * Converts string into camelCase.\n *\n * @see http://stackoverflow.com/questions/2970525/converting-any-string-into-camel-case\n */\nexport function camelCase(str: string, firstCapital: boolean = false): string {\n    return str.replace(/^([A-Z])|[\\s-_](\\w)/g, function(match, p1, p2, offset) {\n        if (firstCapital === true && offset === 0) return p1;\n        if (p2) return p2.toUpperCase();\n        return p1.toLowerCase();\n    });\n}\n\n/**\n * Converts string into snake_case.\n *\n * @see https://regex101.com/r/QeSm2I/1\n */\nexport function snakeCase(str: string) {\n    return str.replace(/(?:([a-z])([A-Z]))|(?:((?!^)[A-Z])([a-z]))/g, \"$1_$3$2$4\").toLowerCase();\n}\n\n/**\n * Converts string into Title Case.\n *\n * @see http://stackoverflow.com/questions/196972/convert-string-to-title-case-with-javascript\n */\nexport function titleCase(str: string): string {\n    return str.replace(/\\w\\S*/g, txt => txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase());\n}\n\n/**\n * Builds abbreviated string from given string;\n */\nexport function abbreviate(str: string, abbrLettersCount: number = 1): string {\n    const words = str.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0\\xDF])/g, \"$1 $2\").split(\" \");\n    return words.reduce((res, word) => {\n        res += word.substr(0, abbrLettersCount);\n        return res;\n    }, \"\");\n}\n\nexport interface IShortenOptions {\n    /** String used to split \"segments\" of the alias/column name */\n    separator?: string;\n    /** Maximum length of any \"segment\" */\n    segmentLength?: number;\n    /** Length of any \"term\" in a \"segment\"; \"OrderItem\" is a segment, \"Order\" and \"Items\" are terms */\n    termLength?: number;\n  }\n\n  /**\n   * Shorten a given `input`. Useful for RDBMS imposing a limit on the\n   * maximum length of aliases and column names in SQL queries.\n   *\n   * @param input String to be shortened.\n   * @param options Default to `4` for segments length, `2` for terms length, `'__'` as a separator.\n   *\n   * @return Shortened `input`.\n   *\n   * @example\n   * // returns: \"UsShCa__orde__mark__dire\"\n   * shorten('UserShoppingCart__order__market__director')\n   *\n   * // returns: \"cat_wit_ver_lon_nam_pos_wit_ver_lon_nam_pos_wit_ver_lon_nam\"\n   * shorten(\n   *   'category_with_very_long_name_posts_with_very_long_name_post_with_very_long_name',\n   *   { separator: '_', segmentLength: 3 }\n   * )\n   *\n   * // equals: UsShCa__orde__mark_market_id\n   * `${shorten('UserShoppingCart__order__market')}_market_id`\n   */\n  export function shorten(input: string, options: IShortenOptions = {}): string {\n    const { segmentLength = 4, separator = \"__\", termLength = 2 } = options;\n\n    const segments = input.split(separator);\n    const shortSegments = segments.reduce((acc: string[], val: string) => {\n        // split the given segment into many terms based on an eventual camel cased name\n        const segmentTerms = val.replace(/([a-z\\xE0-\\xFF])([A-Z\\xC0-\\xDF])/g, \"$1 $2\").split(\" \");\n        // \"OrderItemList\" becomes \"OrItLi\", while \"company\" becomes \"comp\"\n        const length = segmentTerms.length > 1 ? termLength : segmentLength;\n        const shortSegment = segmentTerms.map(term => term.substr(0, length)).join(\"\");\n\n        acc.push(shortSegment);\n        return acc;\n    }, []);\n\n    return shortSegments.join(separator);\n  }\n\ninterface IHashOptions {\n    length?: number;\n}\n\n/**\n * Returns a hashed input.\n *\n * @param input String to be hashed.\n * @param options.length Optionally, shorten the output to desired length.\n */\nexport function hash(input: string, options: IHashOptions = {}): string {\n    const hashFunction = shajs(\"sha256\");\n\n    hashFunction.update(input, \"utf8\");\n\n    const hashedInput = hashFunction.digest(\"hex\");\n\n    if (options.length) {\n        return hashedInput.slice(0, options.length);\n    }\n\n    return hashedInput;\n  }\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}