{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\n/*!\n */\n\nimport \"reflect-metadata\";\nimport { ConnectionManager } from \"./connection/ConnectionManager\";\nimport { MetadataArgsStorage } from \"./metadata-args/MetadataArgsStorage\";\nimport { getFromContainer } from \"./container\";\nimport { PlatformTools } from \"./platform/PlatformTools\";\nimport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\"; // -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./container\";\nexport * from \"./common/EntityTarget\";\nexport * from \"./common/ObjectType\";\nexport * from \"./common/ObjectLiteral\";\nexport * from \"./common/DeepPartial\";\nexport * from \"./error\";\nexport * from \"./decorator/columns/Column\";\nexport * from \"./decorator/columns/CreateDateColumn\";\nexport * from \"./decorator/columns/DeleteDateColumn\";\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\nexport * from \"./decorator/columns/PrimaryColumn\";\nexport * from \"./decorator/columns/UpdateDateColumn\";\nexport * from \"./decorator/columns/VersionColumn\";\nexport * from \"./decorator/columns/ViewColumn\";\nexport * from \"./decorator/columns/ObjectIdColumn\";\nexport * from \"./decorator/listeners/AfterInsert\";\nexport * from \"./decorator/listeners/AfterLoad\";\nexport * from \"./decorator/listeners/AfterRemove\";\nexport * from \"./decorator/listeners/AfterUpdate\";\nexport * from \"./decorator/listeners/BeforeInsert\";\nexport * from \"./decorator/listeners/BeforeRemove\";\nexport * from \"./decorator/listeners/BeforeUpdate\";\nexport * from \"./decorator/listeners/EventSubscriber\";\nexport * from \"./decorator/options/ColumnOptions\";\nexport * from \"./decorator/options/IndexOptions\";\nexport * from \"./decorator/options/JoinColumnOptions\";\nexport * from \"./decorator/options/JoinTableOptions\";\nexport * from \"./decorator/options/RelationOptions\";\nexport * from \"./decorator/options/EntityOptions\";\nexport * from \"./decorator/options/ValueTransformer\";\nexport * from \"./decorator/relations/JoinColumn\";\nexport * from \"./decorator/relations/JoinTable\";\nexport * from \"./decorator/relations/ManyToMany\";\nexport * from \"./decorator/relations/ManyToOne\";\nexport * from \"./decorator/relations/OneToMany\";\nexport * from \"./decorator/relations/OneToOne\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/RelationId\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/ChildEntity\";\nexport * from \"./decorator/entity/TableInheritance\";\nexport * from \"./decorator/entity-view/ViewEntity\";\nexport * from \"./decorator/transaction/Transaction\";\nexport * from \"./decorator/transaction/TransactionManager\";\nexport * from \"./decorator/transaction/TransactionRepository\";\nexport * from \"./decorator/tree/TreeLevelColumn\";\nexport * from \"./decorator/tree/TreeParent\";\nexport * from \"./decorator/tree/TreeChildren\";\nexport * from \"./decorator/tree/Tree\";\nexport * from \"./decorator/Index\";\nexport * from \"./decorator/Unique\";\nexport * from \"./decorator/Check\";\nexport * from \"./decorator/Exclusion\";\nexport * from \"./decorator/Generated\";\nexport * from \"./decorator/EntityRepository\";\nexport * from \"./find-options/operator/Any\";\nexport * from \"./find-options/operator/Between\";\nexport * from \"./find-options/operator/Equal\";\nexport * from \"./find-options/operator/In\";\nexport * from \"./find-options/operator/IsNull\";\nexport * from \"./find-options/operator/LessThan\";\nexport * from \"./find-options/operator/LessThanOrEqual\";\nexport * from \"./find-options/operator/ILike\";\nexport * from \"./find-options/operator/Like\";\nexport * from \"./find-options/operator/MoreThan\";\nexport * from \"./find-options/operator/MoreThanOrEqual\";\nexport * from \"./find-options/operator/Not\";\nexport * from \"./find-options/operator/Raw\";\nexport * from \"./find-options/FindConditions\";\nexport * from \"./find-options/FindManyOptions\";\nexport * from \"./find-options/FindOneOptions\";\nexport * from \"./find-options/FindOperator\";\nexport * from \"./find-options/FindOperatorType\";\nexport * from \"./find-options/JoinOptions\";\nexport * from \"./find-options/OrderByCondition\";\nexport * from \"./find-options/FindOptionsUtils\";\nexport * from \"./logger/Logger\";\nexport * from \"./logger/LoggerOptions\";\nexport * from \"./logger/AdvancedConsoleLogger\";\nexport * from \"./logger/SimpleConsoleLogger\";\nexport * from \"./logger/FileLogger\";\nexport * from \"./metadata/EntityMetadata\";\nexport * from \"./entity-manager/EntityManager\";\nexport * from \"./repository/AbstractRepository\";\nexport * from \"./repository/Repository\";\nexport * from \"./repository/BaseEntity\";\nexport * from \"./repository/TreeRepository\";\nexport * from \"./repository/MongoRepository\";\nexport * from \"./repository/RemoveOptions\";\nexport * from \"./repository/SaveOptions\";\nexport * from \"./schema-builder/table/TableCheck\";\nexport * from \"./schema-builder/table/TableColumn\";\nexport * from \"./schema-builder/table/TableExclusion\";\nexport * from \"./schema-builder/table/TableForeignKey\";\nexport * from \"./schema-builder/table/TableIndex\";\nexport * from \"./schema-builder/table/TableUnique\";\nexport * from \"./schema-builder/table/Table\";\nexport * from \"./driver/mongodb/typings\";\nexport * from \"./driver/types/DatabaseType\";\nexport * from \"./driver/types/ReplicationMode\";\nexport * from \"./driver/sqlserver/MssqlParameter\";\nexport { ConnectionOptionsReader } from \"./connection/ConnectionOptionsReader\";\nexport { Connection } from \"./connection/Connection\";\nexport { ConnectionManager } from \"./connection/ConnectionManager\";\nexport { QueryBuilder } from \"./query-builder/QueryBuilder\";\nexport { SelectQueryBuilder } from \"./query-builder/SelectQueryBuilder\";\nexport { DeleteQueryBuilder } from \"./query-builder/DeleteQueryBuilder\";\nexport { InsertQueryBuilder } from \"./query-builder/InsertQueryBuilder\";\nexport { UpdateQueryBuilder } from \"./query-builder/UpdateQueryBuilder\";\nexport { RelationQueryBuilder } from \"./query-builder/RelationQueryBuilder\";\nexport { Brackets } from \"./query-builder/Brackets\";\nexport { InsertResult } from \"./query-builder/result/InsertResult\";\nexport { UpdateResult } from \"./query-builder/result/UpdateResult\";\nexport { DeleteResult } from \"./query-builder/result/DeleteResult\";\nexport { MongoEntityManager } from \"./entity-manager/MongoEntityManager\";\nexport { Migration } from \"./migration/Migration\";\nexport { MigrationExecutor } from \"./migration/MigrationExecutor\";\nexport { DefaultNamingStrategy } from \"./naming-strategy/DefaultNamingStrategy\";\nexport { EntitySchema } from \"./entity-schema/EntitySchema\"; // -------------------------------------------------------------------------\n// Deprecated\n// -------------------------------------------------------------------------\n// -------------------------------------------------------------------------\n// Commonly used functionality\n// -------------------------------------------------------------------------\n\n/**\n * Gets metadata args storage.\n */\n\nexport function getMetadataArgsStorage() {\n  // we should store metadata storage in a global variable otherwise it brings too much problems\n  // one of the problem is that if any entity (or any other) will be imported before consumer will call\n  // useContainer method with his own container implementation, that entity will be registered in the\n  // old old container (default one post probably) and consumer will his entity.\n  // calling useContainer before he imports any entity (or any other) is not always convenient.\n  // another reason is that when we run migrations typeorm is being called from a global package\n  // and it may load entities which register decorators in typeorm of local package\n  // this leads to impossibility of usage of entities in migrations and cli related operations\n  var globalScope = PlatformTools.getGlobalVariable();\n  if (!globalScope.typeormMetadataArgsStorage) globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n  return globalScope.typeormMetadataArgsStorage;\n}\n/**\n * Reads connection options stored in ormconfig configuration file.\n */\n\nexport function getConnectionOptions(connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    return __generator(this, function (_a) {\n      return [2\n      /*return*/\n      , new ConnectionOptionsReader().get(connectionName)];\n    });\n  });\n}\n/**\n * Gets a ConnectionManager which creates connections.\n */\n\nexport function getConnectionManager() {\n  return getFromContainer(ConnectionManager);\n}\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n */\n\nexport function createConnection(optionsOrName) {\n  return __awaiter(this, void 0, void 0, function () {\n    var connectionName, options, _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\n          if (!(optionsOrName instanceof Object)) return [3\n          /*break*/\n          , 1];\n          _a = optionsOrName;\n          return [3\n          /*break*/\n          , 3];\n\n        case 1:\n          return [4\n          /*yield*/\n          , getConnectionOptions(connectionName)];\n\n        case 2:\n          _a = _b.sent();\n          _b.label = 3;\n\n        case 3:\n          options = _a;\n          return [2\n          /*return*/\n          , getConnectionManager().create(options).connect()];\n      }\n    });\n  });\n}\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * All connections from the ormconfig will be created.\n */\n\nexport function createConnections(options) {\n  return __awaiter(this, void 0, void 0, function () {\n    var connections;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (!!options) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , new ConnectionOptionsReader().all()];\n\n        case 1:\n          options = _a.sent();\n          _a.label = 2;\n\n        case 2:\n          connections = options.map(function (options) {\n            return getConnectionManager().create(options);\n          });\n          return [2\n          /*return*/\n          , Promise.all(connections.map(function (connection) {\n            return connection.connect();\n          }))];\n      }\n    });\n  });\n}\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\n\nexport function getConnection(connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  return getConnectionManager().get(connectionName);\n}\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\n\nexport function getManager(connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets MongoDB entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\n\nexport function getMongoManager(connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets Sqljs entity manager from connection name.\n * \"default\" connection is used, when no name is specified.\n * Only works when Sqljs driver is used.\n */\n\nexport function getSqljsManager(connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  return getConnectionManager().get(connectionName).manager;\n}\n/**\n * Gets repository for the given entity class.\n */\n\nexport function getRepository(entityClass, connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  return getConnectionManager().get(connectionName).getRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n */\n\nexport function getTreeRepository(entityClass, connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  return getConnectionManager().get(connectionName).getTreeRepository(entityClass);\n}\n/**\n * Gets tree repository for the given entity class.\n */\n\nexport function getCustomRepository(customRepository, connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  return getConnectionManager().get(connectionName).getCustomRepository(customRepository);\n}\n/**\n * Gets mongodb repository for the given entity class or name.\n */\n\nexport function getMongoRepository(entityClass, connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  return getConnectionManager().get(connectionName).getMongoRepository(entityClass);\n}\n/**\n * Creates a new query builder.\n */\n\nexport function createQueryBuilder(entityClass, alias, connectionName) {\n  if (connectionName === void 0) {\n    connectionName = \"default\";\n  }\n\n  if (entityClass) {\n    return getRepository(entityClass, connectionName).createQueryBuilder(alias);\n  }\n\n  return getConnection(connectionName).createQueryBuilder();\n}","map":{"version":3,"sources":["../browser/src/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*!\n */\nimport \"reflect-metadata\";\nimport {ConnectionManager} from \"./connection/ConnectionManager\";\nimport {Connection} from \"./connection/Connection\";\nimport {MetadataArgsStorage} from \"./metadata-args/MetadataArgsStorage\";\nimport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nimport {getFromContainer} from \"./container\";\nimport {ObjectType} from \"./common/ObjectType\";\nimport {Repository} from \"./repository/Repository\";\nimport {EntityManager} from \"./entity-manager/EntityManager\";\nimport {PlatformTools} from \"./platform/PlatformTools\";\nimport {TreeRepository} from \"./repository/TreeRepository\";\nimport {MongoRepository} from \"./repository/MongoRepository\";\nimport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\nimport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\nimport {SqljsEntityManager} from \"./entity-manager/SqljsEntityManager\";\nimport {SelectQueryBuilder} from \"./query-builder/SelectQueryBuilder\";\nimport {EntityTarget} from \"./common/EntityTarget\";\n\n// -------------------------------------------------------------------------\n// Commonly Used exports\n// -------------------------------------------------------------------------\n\nexport * from \"./container\";\nexport * from \"./common/EntityTarget\";\nexport * from \"./common/ObjectType\";\nexport * from \"./common/ObjectLiteral\";\nexport * from \"./common/DeepPartial\";\nexport * from \"./error\";\nexport * from \"./decorator/columns/Column\";\nexport * from \"./decorator/columns/CreateDateColumn\";\nexport * from \"./decorator/columns/DeleteDateColumn\";\nexport * from \"./decorator/columns/PrimaryGeneratedColumn\";\nexport * from \"./decorator/columns/PrimaryColumn\";\nexport * from \"./decorator/columns/UpdateDateColumn\";\nexport * from \"./decorator/columns/VersionColumn\";\nexport * from \"./decorator/columns/ViewColumn\";\nexport * from \"./decorator/columns/ObjectIdColumn\";\nexport * from \"./decorator/listeners/AfterInsert\";\nexport * from \"./decorator/listeners/AfterLoad\";\nexport * from \"./decorator/listeners/AfterRemove\";\nexport * from \"./decorator/listeners/AfterUpdate\";\nexport * from \"./decorator/listeners/BeforeInsert\";\nexport * from \"./decorator/listeners/BeforeRemove\";\nexport * from \"./decorator/listeners/BeforeUpdate\";\nexport * from \"./decorator/listeners/EventSubscriber\";\nexport * from \"./decorator/options/ColumnOptions\";\nexport * from \"./decorator/options/IndexOptions\";\nexport * from \"./decorator/options/JoinColumnOptions\";\nexport * from \"./decorator/options/JoinTableOptions\";\nexport * from \"./decorator/options/RelationOptions\";\nexport * from \"./decorator/options/EntityOptions\";\nexport * from \"./decorator/options/ValueTransformer\";\nexport * from \"./decorator/relations/JoinColumn\";\nexport * from \"./decorator/relations/JoinTable\";\nexport * from \"./decorator/relations/ManyToMany\";\nexport * from \"./decorator/relations/ManyToOne\";\nexport * from \"./decorator/relations/OneToMany\";\nexport * from \"./decorator/relations/OneToOne\";\nexport * from \"./decorator/relations/RelationCount\";\nexport * from \"./decorator/relations/RelationId\";\nexport * from \"./decorator/entity/Entity\";\nexport * from \"./decorator/entity/ChildEntity\";\nexport * from \"./decorator/entity/TableInheritance\";\nexport * from \"./decorator/entity-view/ViewEntity\";\nexport * from \"./decorator/transaction/Transaction\";\nexport * from \"./decorator/transaction/TransactionManager\";\nexport * from \"./decorator/transaction/TransactionRepository\";\nexport * from \"./decorator/tree/TreeLevelColumn\";\nexport * from \"./decorator/tree/TreeParent\";\nexport * from \"./decorator/tree/TreeChildren\";\nexport * from \"./decorator/tree/Tree\";\nexport * from \"./decorator/Index\";\nexport * from \"./decorator/Unique\";\nexport * from \"./decorator/Check\";\nexport * from \"./decorator/Exclusion\";\nexport * from \"./decorator/Generated\";\nexport * from \"./decorator/EntityRepository\";\nexport * from \"./find-options/operator/Any\";\nexport * from \"./find-options/operator/Between\";\nexport * from \"./find-options/operator/Equal\";\nexport * from \"./find-options/operator/In\";\nexport * from \"./find-options/operator/IsNull\";\nexport * from \"./find-options/operator/LessThan\";\nexport * from \"./find-options/operator/LessThanOrEqual\";\nexport * from \"./find-options/operator/ILike\";\nexport * from \"./find-options/operator/Like\";\nexport * from \"./find-options/operator/MoreThan\";\nexport * from \"./find-options/operator/MoreThanOrEqual\";\nexport * from \"./find-options/operator/Not\";\nexport * from \"./find-options/operator/Raw\";\nexport * from \"./find-options/FindConditions\";\nexport * from \"./find-options/FindManyOptions\";\nexport * from \"./find-options/FindOneOptions\";\nexport * from \"./find-options/FindOperator\";\nexport * from \"./find-options/FindOperatorType\";\nexport * from \"./find-options/JoinOptions\";\nexport * from \"./find-options/OrderByCondition\";\nexport * from \"./find-options/FindOptionsUtils\";\nexport * from \"./logger/Logger\";\nexport * from \"./logger/LoggerOptions\";\nexport * from \"./logger/AdvancedConsoleLogger\";\nexport * from \"./logger/SimpleConsoleLogger\";\nexport * from \"./logger/FileLogger\";\nexport * from \"./metadata/EntityMetadata\";\nexport * from \"./entity-manager/EntityManager\";\nexport * from \"./repository/AbstractRepository\";\nexport * from \"./repository/Repository\";\nexport * from \"./repository/BaseEntity\";\nexport * from \"./repository/TreeRepository\";\nexport * from \"./repository/MongoRepository\";\nexport * from \"./repository/RemoveOptions\";\nexport * from \"./repository/SaveOptions\";\nexport * from \"./schema-builder/table/TableCheck\";\nexport * from \"./schema-builder/table/TableColumn\";\nexport * from \"./schema-builder/table/TableExclusion\";\nexport * from \"./schema-builder/table/TableForeignKey\";\nexport * from \"./schema-builder/table/TableIndex\";\nexport * from \"./schema-builder/table/TableUnique\";\nexport * from \"./schema-builder/table/Table\";\nexport * from \"./driver/mongodb/typings\";\nexport * from \"./driver/types/DatabaseType\";\nexport * from \"./driver/types/ReplicationMode\";\nexport * from \"./driver/sqlserver/MssqlParameter\";\n\nexport {ConnectionOptionsReader} from \"./connection/ConnectionOptionsReader\";\nexport {Connection} from \"./connection/Connection\";\nexport {ConnectionManager} from \"./connection/ConnectionManager\";\nexport {ConnectionOptions} from \"./connection/ConnectionOptions\";\nexport {Driver} from \"./driver/Driver\";\nexport {QueryBuilder} from \"./query-builder/QueryBuilder\";\nexport {SelectQueryBuilder} from \"./query-builder/SelectQueryBuilder\";\nexport {DeleteQueryBuilder} from \"./query-builder/DeleteQueryBuilder\";\nexport {InsertQueryBuilder} from \"./query-builder/InsertQueryBuilder\";\nexport {UpdateQueryBuilder} from \"./query-builder/UpdateQueryBuilder\";\nexport {RelationQueryBuilder} from \"./query-builder/RelationQueryBuilder\";\nexport {Brackets} from \"./query-builder/Brackets\";\nexport {WhereExpression} from \"./query-builder/WhereExpression\";\nexport {InsertResult} from \"./query-builder/result/InsertResult\";\nexport {UpdateResult} from \"./query-builder/result/UpdateResult\";\nexport {DeleteResult} from \"./query-builder/result/DeleteResult\";\nexport {QueryRunner} from \"./query-runner/QueryRunner\";\nexport {MongoEntityManager} from \"./entity-manager/MongoEntityManager\";\nexport {Migration} from \"./migration/Migration\";\nexport {MigrationExecutor} from \"./migration/MigrationExecutor\";\nexport {MigrationInterface} from \"./migration/MigrationInterface\";\nexport {DefaultNamingStrategy} from \"./naming-strategy/DefaultNamingStrategy\";\nexport {NamingStrategyInterface} from \"./naming-strategy/NamingStrategyInterface\";\nexport {FindOneOptions} from \"./find-options/FindOneOptions\";\nexport {FindManyOptions} from \"./find-options/FindManyOptions\";\nexport {InsertEvent} from \"./subscriber/event/InsertEvent\";\nexport {LoadEvent} from \"./subscriber/event/LoadEvent\";\nexport {UpdateEvent} from \"./subscriber/event/UpdateEvent\";\nexport {RemoveEvent} from \"./subscriber/event/RemoveEvent\";\nexport {EntitySubscriberInterface} from \"./subscriber/EntitySubscriberInterface\";\nexport {EntitySchema} from \"./entity-schema/EntitySchema\";\nexport {EntitySchemaColumnOptions} from \"./entity-schema/EntitySchemaColumnOptions\";\nexport {EntitySchemaIndexOptions} from \"./entity-schema/EntitySchemaIndexOptions\";\nexport {EntitySchemaRelationOptions} from \"./entity-schema/EntitySchemaRelationOptions\";\nexport {ColumnType} from \"./driver/types/ColumnTypes\";\n\n// -------------------------------------------------------------------------\n// Deprecated\n// -------------------------------------------------------------------------\n\n// -------------------------------------------------------------------------\n// Commonly used functionality\n// -------------------------------------------------------------------------\n\n/**\n * Gets metadata args storage.\n */\nexport function getMetadataArgsStorage(): MetadataArgsStorage {\n    // we should store metadata storage in a global variable otherwise it brings too much problems\n    // one of the problem is that if any entity (or any other) will be imported before consumer will call\n    // useContainer method with his own container implementation, that entity will be registered in the\n    // old old container (default one post probably) and consumer will his entity.\n    // calling useContainer before he imports any entity (or any other) is not always convenient.\n    // another reason is that when we run migrations typeorm is being called from a global package\n    // and it may load entities which register decorators in typeorm of local package\n    // this leads to impossibility of usage of entities in migrations and cli related operations\n    const globalScope = PlatformTools.getGlobalVariable();\n    if (!globalScope.typeormMetadataArgsStorage)\n        globalScope.typeormMetadataArgsStorage = new MetadataArgsStorage();\n\n    return globalScope.typeormMetadataArgsStorage;\n}\n\n/**\n * Reads connection options stored in ormconfig configuration file.\n */\nexport async function getConnectionOptions(connectionName: string = \"default\"): Promise<ConnectionOptions> {\n    return new ConnectionOptionsReader().get(connectionName);\n}\n\n/**\n * Gets a ConnectionManager which creates connections.\n */\nexport function getConnectionManager(): ConnectionManager {\n    return getFromContainer(ConnectionManager);\n}\n\n/**\n * Creates a new connection and registers it in the manager.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n */\nexport async function createConnection(): Promise<Connection>;\n\n/**\n * Creates a new connection from the ormconfig file with a given name.\n */\nexport async function createConnection(name: string): Promise<Connection>;\n\n/**\n * Creates a new connection and registers it in the manager.\n */\nexport async function createConnection(options: ConnectionOptions): Promise<Connection>;\n\n/**\n * Creates a new connection and registers it in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * Only one connection from ormconfig will be created (name \"default\" or connection without name).\n */\nexport async function createConnection(optionsOrName?: any): Promise<Connection> {\n    const connectionName = typeof optionsOrName === \"string\" ? optionsOrName : \"default\";\n    const options = optionsOrName instanceof Object ? optionsOrName : await getConnectionOptions(connectionName);\n    return getConnectionManager().create(options).connect();\n}\n\n/**\n * Creates new connections and registers them in the manager.\n *\n * If connection options were not specified, then it will try to create connection automatically,\n * based on content of ormconfig (json/js/yml/xml/env) file or environment variables.\n * All connections from the ormconfig will be created.\n */\nexport async function createConnections(options?: ConnectionOptions[]): Promise<Connection[]> {\n    if (!options)\n        options = await new ConnectionOptionsReader().all();\n    const connections = options.map(options => getConnectionManager().create(options));\n    return Promise.all(connections.map(connection => connection.connect()));\n}\n\n/**\n * Gets connection from the connection manager.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getConnection(connectionName: string = \"default\"): Connection {\n    return getConnectionManager().get(connectionName);\n}\n\n/**\n * Gets entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getManager(connectionName: string = \"default\"): EntityManager {\n    return getConnectionManager().get(connectionName).manager;\n}\n\n/**\n * Gets MongoDB entity manager from the connection.\n * If connection name wasn't specified, then \"default\" connection will be retrieved.\n */\nexport function getMongoManager(connectionName: string = \"default\"): MongoEntityManager {\n    return getConnectionManager().get(connectionName).manager as MongoEntityManager;\n}\n\n/**\n * Gets Sqljs entity manager from connection name.\n * \"default\" connection is used, when no name is specified.\n * Only works when Sqljs driver is used.\n */\nexport function getSqljsManager(connectionName: string = \"default\"): SqljsEntityManager {\n    return getConnectionManager().get(connectionName).manager as SqljsEntityManager;\n}\n\n/**\n * Gets repository for the given entity class.\n */\nexport function getRepository<Entity>(entityClass: EntityTarget<Entity>, connectionName: string = \"default\"): Repository<Entity> {\n    return getConnectionManager().get(connectionName).getRepository<Entity>(entityClass);\n}\n\n/**\n * Gets tree repository for the given entity class.\n */\nexport function getTreeRepository<Entity>(entityClass: EntityTarget<Entity>, connectionName: string = \"default\"): TreeRepository<Entity> {\n    return getConnectionManager().get(connectionName).getTreeRepository<Entity>(entityClass);\n}\n\n/**\n * Gets tree repository for the given entity class.\n */\nexport function getCustomRepository<T>(customRepository: ObjectType<T>, connectionName: string = \"default\"): T {\n    return getConnectionManager().get(connectionName).getCustomRepository(customRepository);\n}\n\n/**\n * Gets mongodb repository for the given entity class or name.\n */\nexport function getMongoRepository<Entity>(entityClass: EntityTarget<Entity>, connectionName: string = \"default\"): MongoRepository<Entity> {\n    return getConnectionManager().get(connectionName).getMongoRepository<Entity>(entityClass);\n}\n\n/**\n * Creates a new query builder.\n */\nexport function createQueryBuilder<Entity>(entityClass?: EntityTarget<Entity>, alias?: string, connectionName: string = \"default\"): SelectQueryBuilder<Entity> {\n    if (entityClass) {\n        return getRepository(entityClass, connectionName).createQueryBuilder(alias);\n    }\n\n    return getConnection(connectionName).createQueryBuilder();\n}\n"],"sourceRoot":"."},"metadata":{},"sourceType":"module"}