{"ast":null,"code":"/**\n * Contains all information about entity's foreign key.\n */\nvar ForeignKeyMetadata =\n/** @class */\nfunction () {\n  // ---------------------------------------------------------------------\n  // Constructor\n  // ---------------------------------------------------------------------\n  function ForeignKeyMetadata(options) {\n    /**\n     * Array of columns of this foreign key.\n     */\n    this.columns = [];\n    /**\n     * Array of referenced columns.\n     */\n\n    this.referencedColumns = [];\n    /**\n     * Gets array of column names.\n     */\n\n    this.columnNames = [];\n    /**\n     * Gets array of referenced column names.\n     */\n\n    this.referencedColumnNames = [];\n    this.entityMetadata = options.entityMetadata;\n    this.referencedEntityMetadata = options.referencedEntityMetadata;\n    this.columns = options.columns;\n    this.referencedColumns = options.referencedColumns;\n    this.onDelete = options.onDelete || \"NO ACTION\";\n    this.onUpdate = options.onUpdate || \"NO ACTION\";\n    this.deferrable = options.deferrable;\n    if (options.namingStrategy) this.build(options.namingStrategy);\n  } // ---------------------------------------------------------------------\n  // Public Methods\n  // ---------------------------------------------------------------------\n\n  /**\n   * Builds some depend foreign key properties.\n   * Must be called after all entity metadatas and their columns are built.\n   */\n\n\n  ForeignKeyMetadata.prototype.build = function (namingStrategy) {\n    this.columnNames = this.columns.map(function (column) {\n      return column.databaseName;\n    });\n    this.referencedColumnNames = this.referencedColumns.map(function (column) {\n      return column.databaseName;\n    });\n    this.referencedTablePath = this.referencedEntityMetadata.tablePath;\n    this.name = namingStrategy.foreignKeyName(this.entityMetadata.tablePath, this.columnNames, this.referencedTablePath, this.referencedColumnNames);\n  };\n\n  return ForeignKeyMetadata;\n}();\n\nexport { ForeignKeyMetadata };","map":{"version":3,"sources":["../browser/src/metadata/ForeignKeyMetadata.ts"],"names":[],"mappings":"AAOA;;AAEG;AACH,IAAA,kBAAA;AAAA;AAAA,YAAA;AA6DI;AACA;AACA;AAEA,WAAA,kBAAA,CAAY,OAAZ,EASC;AA1DD;;AAEG;AACH,SAAA,OAAA,GAA4B,EAA5B;AAEA;;AAEG;;AACH,SAAA,iBAAA,GAAsC,EAAtC;AA2BA;;AAEG;;AACH,SAAA,WAAA,GAAwB,EAAxB;AAEA;;AAEG;;AACH,SAAA,qBAAA,GAAkC,EAAlC;AAgBI,SAAK,cAAL,GAAsB,OAAO,CAAC,cAA9B;AACA,SAAK,wBAAL,GAAgC,OAAO,CAAC,wBAAxC;AACA,SAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;AACA,SAAK,iBAAL,GAAyB,OAAO,CAAC,iBAAjC;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAR,IAAoB,WAApC;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAR,IAAoB,WAApC;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,QAAI,OAAO,CAAC,cAAZ,EACI,KAAK,KAAL,CAAW,OAAO,CAAC,cAAnB;AACP,GApFL,CAsFI;AACA;AACA;;AAEA;;;AAGG;;;AACH,EAAA,kBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,cAAN,EAA6C;AACzC,SAAK,WAAL,GAAmB,KAAK,OAAL,CAAa,GAAb,CAAiB,UAAA,MAAA,EAAM;AAAI,aAAA,MAAM,CAAN,YAAA;AAAmB,KAA9C,CAAnB;AACA,SAAK,qBAAL,GAA6B,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,UAAA,MAAA,EAAM;AAAI,aAAA,MAAM,CAAN,YAAA;AAAmB,KAAxD,CAA7B;AACA,SAAK,mBAAL,GAA2B,KAAK,wBAAL,CAA8B,SAAzD;AACA,SAAK,IAAL,GAAY,cAAc,CAAC,cAAf,CAA8B,KAAK,cAAL,CAAoB,SAAlD,EAA6D,KAAK,WAAlE,EAA+E,KAAK,mBAApF,EAAyG,KAAK,qBAA9G,CAAZ;AACH,GALD;;AAOJ,SAAA,kBAAA;AAAC,CArGD,EAAA","sourcesContent":["import {ColumnMetadata} from \"./ColumnMetadata\";\nimport {EntityMetadata} from \"./EntityMetadata\";\nimport {NamingStrategyInterface} from \"../naming-strategy/NamingStrategyInterface\";\nimport {DeferrableType} from \"./types/DeferrableType\";\nimport {OnDeleteType} from \"./types/OnDeleteType\";\nimport {OnUpdateType} from \"./types/OnUpdateType\";\n\n/**\n * Contains all information about entity's foreign key.\n */\nexport class ForeignKeyMetadata {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata where this foreign key is.\n     */\n    entityMetadata: EntityMetadata;\n\n    /**\n     * Entity metadata which this foreign key references.\n     */\n    referencedEntityMetadata: EntityMetadata;\n\n    /**\n     * Array of columns of this foreign key.\n     */\n    columns: ColumnMetadata[] = [];\n\n    /**\n     * Array of referenced columns.\n     */\n    referencedColumns: ColumnMetadata[] = [];\n\n    /**\n     * What to do with a relation on deletion of the row containing a foreign key.\n     */\n    onDelete?: OnDeleteType;\n\n    /**\n     * What to do with a relation on update of the row containing a foreign key.\n     */\n    onUpdate?: OnUpdateType;\n\n    /**\n     * When to check the constraints of a foreign key.\n     */\n    deferrable?: DeferrableType;\n\n    /**\n     * Gets the table name to which this foreign key is referenced.\n     */\n    referencedTablePath: string;\n\n    /**\n     * Gets foreign key name.\n     */\n    name: string;\n\n    /**\n     * Gets array of column names.\n     */\n    columnNames: string[] = [];\n\n    /**\n     * Gets array of referenced column names.\n     */\n    referencedColumnNames: string[] = [];\n\n    // ---------------------------------------------------------------------\n    // Constructor\n    // ---------------------------------------------------------------------\n\n    constructor(options: {\n        entityMetadata: EntityMetadata,\n        referencedEntityMetadata: EntityMetadata,\n        namingStrategy?: NamingStrategyInterface,\n        columns: ColumnMetadata[],\n        referencedColumns: ColumnMetadata[],\n        onDelete?: OnDeleteType,\n        onUpdate?: OnUpdateType,\n        deferrable?: DeferrableType,\n    }) {\n        this.entityMetadata = options.entityMetadata;\n        this.referencedEntityMetadata = options.referencedEntityMetadata;\n        this.columns = options.columns;\n        this.referencedColumns = options.referencedColumns;\n        this.onDelete = options.onDelete || \"NO ACTION\";\n        this.onUpdate = options.onUpdate || \"NO ACTION\";\n        this.deferrable = options.deferrable;\n        if (options.namingStrategy)\n            this.build(options.namingStrategy);\n    }\n\n    // ---------------------------------------------------------------------\n    // Public Methods\n    // ---------------------------------------------------------------------\n\n    /**\n     * Builds some depend foreign key properties.\n     * Must be called after all entity metadatas and their columns are built.\n     */\n    build(namingStrategy: NamingStrategyInterface) {\n        this.columnNames = this.columns.map(column => column.databaseName);\n        this.referencedColumnNames = this.referencedColumns.map(column => column.databaseName);\n        this.referencedTablePath = this.referencedEntityMetadata.tablePath;\n        this.name = namingStrategy.foreignKeyName(this.entityMetadata.tablePath, this.columnNames, this.referencedTablePath, this.referencedColumnNames);\n    }\n\n}\n"],"sourceRoot":".."},"metadata":{},"sourceType":"module"}