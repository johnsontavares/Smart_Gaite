{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\REINALDO\\\\Desktop\\\\ls-gait-web\\\\dashboard\\\\src\\\\pages\\\\register\\\\confirmEmail\\\\component\\\\clocker.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      duracao: null,\n      liveTimeMin: -1,\n      liveTimeSec: 0,\n      timeFormat: '00:00',\n      flagTimer: false,\n      duracao: this.props.duracao\n    };\n\n    if (this.props.start) {\n      this.startClock();\n    }\n  }\n\n  toggleColor() {\n    this.getTime = setInterval(() => {\n      console.log(\"toggleColor =\");\n      let newIndice = this.state.colorInt + 1;\n      let indice = newIndice % 2;\n      console.log('indice color = ' + indice);\n      this.setState({\n        color: colorArray[indice],\n        colorInt: newIndice\n      });\n    }, 1000);\n  }\n\n  startClock() {\n    let timeFormater = this.timeFormater;\n    this.getTime = setInterval(() => {\n      if (this.state.liveTimeSec == 0) {\n        let min = 0;\n        console.log(\"min out 1 = \" + min);\n\n        if (this.state.liveTimeMin == -1) {\n          min = this.state.duracao - 1;\n          console.log(\"min if = \" + min);\n          console.log(\"min if = \" + this.state.duracao);\n        } else {\n          if (this.state.liveTimeMin == 0) {\n            // send parou relogio\n            clearInterval(this.getTime);\n            this.toggleColor();\n            return;\n          }\n\n          min = this.state.liveTimeMin - 1;\n          console.log(\"min else = \" + this.state.liveTimeMin);\n        }\n\n        min = '' + min;\n        console.log(\"min out 2 = \" + min);\n        this.setState({\n          liveTimeMin: min,\n          liveTimeSec: 59\n        });\n      } else {\n        this.setState({\n          liveTimeSec: this.state.liveTimeSec - 1\n        });\n      }\n\n      console.log(\" this.state.liveTimeMin = \" + this.state.liveTimeMin);\n      let timeFormat = timeFormater(this.state.liveTimeMin) + ':' + timeFormater(this.state.liveTimeSec);\n      this.setState({\n        timeFormat,\n        flagTimer: true\n      });\n    }, 1000);\n  }\n\n  timeFormater(time) {\n    if (time < 10) {\n      time = '0' + time;\n    }\n\n    return time;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Text, {\n      style: {\n        color: this.state.color\n      },\n      children: [\" \", this.state.timeFormat, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 15\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/REINALDO/Desktop/ls-gait-web/dashboard/src/pages/register/confirmEmail/component/clocker.js"],"names":["React","Clock","Component","constructor","props","state","duracao","liveTimeMin","liveTimeSec","timeFormat","flagTimer","start","startClock","toggleColor","getTime","setInterval","console","log","newIndice","colorInt","indice","setState","color","colorArray","timeFormater","min","clearInterval","time","render"],"mappings":"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","sourcesContent":["import React from 'react';\r\n\r\nexport default class Clock extends React.Component {\r\n\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n          duracao: null,\r\n          liveTimeMin: -1,\r\n          liveTimeSec: 0,\r\n          timeFormat:'00:00',\r\n          flagTimer: false,\r\n          duracao: this.props.duracao,\r\n        }\r\n    \r\n        if(this.props.start){\r\n          this.startClock()\r\n        }\r\n      }\r\n    \r\n      toggleColor(){\r\n        this.getTime =  setInterval(() => {\r\n          \r\n          console.log(\"toggleColor =\");\r\n          let newIndice = this.state.colorInt + 1;\r\n          let indice = newIndice % 2\r\n          console.log('indice color = '+ indice);\r\n          this.setState({\r\n            color: colorArray[indice],\r\n            colorInt: newIndice\r\n          })\r\n    \r\n        }, 1000)\r\n      }\r\n    \r\n      startClock(){\r\n        let timeFormater = this.timeFormater\r\n        this.getTime =  setInterval(() => {\r\n          \r\n          if(this.state.liveTimeSec == 0){\r\n    \r\n            let min = 0;\r\n            console.log(\"min out 1 = \" + min);\r\n            if(this.state.liveTimeMin == -1){\r\n              min = this.state.duracao - 1\r\n              console.log(\"min if = \"+ min);\r\n              console.log(\"min if = \"+ this.state.duracao);\r\n            }else{\r\n              if(this.state.liveTimeMin == 0){\r\n                // send parou relogio\r\n                clearInterval(this.getTime);\r\n                this.toggleColor();\r\n                return           \r\n              }\r\n              min = this.state.liveTimeMin -1\r\n              console.log(\"min else = \"+ this.state.liveTimeMin);\r\n            }\r\n            min = '' + min;\r\n            console.log(\"min out 2 = \"+ min);\r\n            this.setState({\r\n              liveTimeMin: min,\r\n              liveTimeSec: 59\r\n            })\r\n          }else{\r\n            this.setState({\r\n              liveTimeSec: this.state.liveTimeSec -1\r\n            })\r\n          }\r\n          console.log(\" this.state.liveTimeMin = \"+ this.state.liveTimeMin);\r\n          let timeFormat = timeFormater(this.state.liveTimeMin) + ':' +timeFormater(this.state.liveTimeSec)\r\n          this.setState({\r\n            timeFormat,\r\n            flagTimer: true\r\n          })\r\n        }, 1000)\r\n      }\r\n    \r\n      timeFormater(time) {\r\n        if (time < 10) {\r\n            time = '0' + time\r\n        }\r\n        return time\r\n    }\r\n    \r\n      render() {\r\n        return (\r\n              <Text style={{color: this.state.color}}> {this.state.timeFormat} </Text>\r\n        );\r\n      }\r\n    }"]},"metadata":{},"sourceType":"module"}