{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\REINALDO\\\\Desktop\\\\ls-gait-web\\\\dashboard\\\\src\\\\pages\\\\register\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport InputMask from 'react-input-mask';\nimport '../register/style.css';\nimport Button from '../../components/utils/button/button';\nimport Api from \"../../services/api\";\nimport { Formik, Field, Form } from 'formik';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ntoast.configure();\nexport default function Register() {\n  _s();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [crm, setCrm] = useState('');\n  const [cpf, setCpf] = useState('');\n  const [phone, setPhone] = useState('');\n  const [specialization, setSpecialization] = useState('');\n\n  async function submitOn(e) {\n    e.preventDefault();\n    const data = {\n      name: name,\n      email: email,\n      password: password,\n      crm: crm,\n      cpf: cpf,\n      phone: phone,\n      specialization: specialization\n    };\n\n    try {\n      if (name !== '' && email !== '' && password !== '' && crm !== '' && phone !== '' && specialization !== '') {\n        const response = await Api.post('verifyUser', data);\n\n        if (response.status === 201) {\n          sessionStorage.setItem('user', JSON.stringify(data));\n          window.location.href = '/confirmation';\n        }\n      } else {\n        alert(\"Fill in all data\");\n      }\n    } catch (error) {\n      const {\n        data\n      } = error.response;\n      alert(data.message);\n    }\n  }\n\n  function onblurCrm(e) {\n    const {\n      value\n    } = e.target;\n\n    if (value === '') {\n      return;\n    }\n\n    fetch(`https://www.consultacrm.com.br/api/index.php?tipo=crm&uf=am&q=${value}&chave=2798018964&destino=json`).then(res => res.json()).then(data => console.log(data.item));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      onSubmit: submitOn,\n      validateOnMount: true,\n      initialValues: {\n        cep: '',\n        logradouro: '',\n        numero: '',\n        complemento: '',\n        bairro: '',\n        cidade: '',\n        uf: ''\n      },\n      render: ({\n        isValid,\n        setFieldValue\n      }) => /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Register, \"QUviDHDi+IDI4Vxpe5zsQRR4s1s=\");\n\n_c = Register;\n\nvar _c;\n\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"sources":["C:/Users/REINALDO/Desktop/ls-gait-web/dashboard/src/pages/register/index.js"],"names":["useState","toast","InputMask","Button","Api","Formik","Field","Form","configure","Register","name","setName","email","setEmail","password","setPassword","crm","setCrm","cpf","setCpf","phone","setPhone","specialization","setSpecialization","submitOn","e","preventDefault","data","response","post","status","sessionStorage","setItem","JSON","stringify","window","location","href","alert","error","message","onblurCrm","value","target","fetch","then","res","json","console","log","item","cep","logradouro","numero","complemento","bairro","cidade","uf","isValid","setFieldValue"],"mappings":"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","sourcesContent":["import { useState} from \"react\";\r\nimport { toast } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport InputMask from 'react-input-mask';\r\nimport '../register/style.css';\r\nimport Button from '../../components/utils/button/button';\r\nimport Api from \"../../services/api\";\r\nimport { Formik, Field, Form } from 'formik';\r\ntoast.configure();\r\n\r\nexport default function Register() {\r\n\r\n  const [name, setName] = useState('');\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [crm, setCrm] = useState('');\r\n  const [cpf, setCpf] = useState('');\r\n  const [phone, setPhone] = useState('');\r\n  const [specialization, setSpecialization] = useState('');\r\n  \r\n  \r\n  async function submitOn(e) {\r\n    \r\n    e.preventDefault();\r\n    const data = {\r\n      name: name,\r\n      email: email,\r\n      password: password,\r\n      crm: crm,\r\n      cpf: cpf,\r\n      phone: phone,\r\n      specialization: specialization\r\n    }\r\n    try {\r\n      if(name!==''&&email!==''&&password!==''&&crm!==''&&phone!==''&&specialization!==''){ \r\n          \r\n        \r\n        \r\n        \r\n        const response = await Api.post('verifyUser',data)\r\n        if(response.status === 201){\r\n          sessionStorage.setItem('user',JSON.stringify(data));\r\n          window.location.href= '/confirmation';\r\n        }\r\n      }else{\r\n        alert(\"Fill in all data\")\r\n      }\r\n    \r\n    } catch (error) {\r\n      const { data } = error.response;\r\n      alert(data.message);\r\n      \r\n    }\r\n        \r\n      \r\n    \r\n}\r\n  \r\n  \r\n\r\nfunction onblurCrm(e){\r\n\r\n  const {value} = e.target;\r\n\r\n  if(value === ''){\r\n    return;\r\n  }\r\n  fetch(`https://www.consultacrm.com.br/api/index.php?tipo=crm&uf=am&q=${value}&chave=2798018964&destino=json`)\r\n  .then((res) => res.json())\r\n  .then((data) =>console.log(data.item))\r\n  \r\n}\r\nreturn (\r\n  <div className=\"App\">\r\n    <Formik\r\n      onSubmit={submitOn}\r\n      validateOnMount\r\n      initialValues={{\r\n        cep: '',\r\n        logradouro: '',\r\n        numero: '',\r\n        complemento: '',\r\n        bairro: '',\r\n        cidade: '',\r\n        uf: '',\r\n      }}\r\n      render={({ isValid, setFieldValue }) => (\r\n        <Form>\r\n          \r\n        </Form>\r\n      )}\r\n    />\r\n  </div>\r\n);\r\n}"]},"metadata":{},"sourceType":"module"}